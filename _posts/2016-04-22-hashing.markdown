---
layout:     post
title:      "数据结构 - 哈希表"
date:       2016-04-22 12:00:00
author:     "Lindz"
header-img: "img/8.jpg"
tags:
    - 数据结构
---

## (一) 前言

### 表格：

在处理数据的时候我们经常会遇到表格，比如像下面这样的：

![](/assets/2016-04-22-hashing/1.png)

这就是所谓的表格，一个表中可以包含许多个域。

* 比如上图中，成绩单里面包含姓名、语文、数学、英语的字段。
* 又比如一个电话册里可能会有姓名、地址、以及电话号码等信息。

想要搜索某个条目，我们只需要知道其中一个域就可以了，我们把这个域叫做主键。比如上面的表格，我们姓名作为主键，通过姓名来找到某人对应的成绩单。

在理想状态下，这个主键不应该重复，如果主键没有重复，那我们通过主键就可以找到唯一的条目。

**以上就是所谓表格数据结构，它具有查找，插入，删除等操作。**

为了更好的查找，最好将主键和其它域进行区分，分别叫主键和条目，它们同属于一个字段 (即使主键的值包含在条目中)

比如：

![](/assets/2016-04-22-hashing/2.png)

### 实现方式:

#### 1.未排序的连续数组：

可以存储在一个连续的数组中，但事先不进行排序。这时候时间复杂度为:

* 插入: O(1)
* 查找: O(n)
* 删除: O(n)

#### 2.未排序的连续数组：

可以存储在一个连续的数组中，但事先	进行排序。这时候时间复杂度为:

* 插入: O(n)
* 查找: O(logn) - 二分查找
* 删除: O(n)

#### 3.(未)排序的链表：

可以存储在一个链表中。这时候时间复杂度为:

* 插入: 未排序 - O(1) 排序 - O(n)
* 查找: O(n)
* 删除: O(n)

#### 4.AVL 树：

比如：

![](/assets/2016-04-22-hashing/3.png)

* 插入：O(logn)
* 查找：O(logn)
* 删除：O(logn)

**AVL 树虽然不错，但是对于表格来说，我们有更好的方式来进行存储，这就是接下来要介绍的哈希表**

## (二) 基本概念

哈希表又称为散列表，是一种以 键 - 值(key - index)存储数据结构，我们只要输入待查找的值(key)，即可找到其对应的值。

表格的每一行字段并没有像之前存储在一个连续的数组中，这是通过一个哈希函数，我们将主键转换成一个数组的索引，这样我们以后进行操作的时候只要将主键也转换成数组索引，那么不就可以直接找到元素了吗。

![](/assets/2016-04-22-hashing/4.png)

因为任何操作 (插入、查找、删除) 我们只需要通过哈希函数进行转换，就可以找到数组对应的索引值，对索引进行操作，所以时间复杂度:插入、查找和删除均为 O(1)

使用哈希查找一般有两个步骤:

1. 使用哈希函数将被查找的键转换为数组的索引。在理想的情况下，不同的键会被转换为不同的索引值，但是在有些情况下我们需要处理多个键被哈希到同一个索引值的情况。所以哈希查找的第二个步骤就是处理冲突
2. 处理哈希碰撞冲突。有很多处理哈希碰撞冲突的方法，本文后面会介绍拉链法和线性探测法。

## (三) 影响因素：

* 哈希函数：最好能够使字段较为均匀地分布在数组中并且能够减少索引冲突(新的索引值对应的位置先前已经被占据)
* 数组的大小：创建太大会造成空间浪费，创建太小可能会增加索引冲突，所以对数组大小需要进行预判
* 冲突解决策略：索引冲突之后应该如何解决

##（四）哈希函数:

那么哈希函数的选取就至关重要，那么我们应该怎么选取哈希函数呢？这里我们介绍三种策略

### 1.截断法：

忽略主键的一部分值，使用其中一部分作为数组的索引，比如我们通过手机号作为主键，比如 925371622，那么我们可以截取后面三位数字 622 作为数组的索引，那么一种映射关系就形成了。

### 2.切割取和法：

将一个数字切割成好几部分，然后在将他们求和作为数组的索引，比如上面的手机号，我们可以将其四位地截断，就变成了 925 376 622，再将它们求和就变成了 1923。

### 3.模块化算法:

有时候通过前两种方式算出来的值还是偏大，比我们创建的数组索引还大，比如我们创建数组大小为 1000，那么第二种方法求出来的 5498 值显然太大，我们可以对其进行取模 ```1923 % 1000 = 923``` 得到新的数组索引值。

### 4.其它：

1. 还有就是比如截断手机号，我们肯定会截断手机号后几位而不会去截取前几位，因为后几位的随机性更大。
2. 当使用姓名作为主键时，一般使用姓而不采用名，可以将姓名字符串转换为 Unicode 编码，然后再将所有数字相加从而求出数组的索引

## (五) 选取数组大小：

这个一般跟哈希函数的选取有关，比如我们创建的数组大小为 100，而哈希函数是对 10 进行取模，那么这时候将会造成大量内存浪费和索引冲突。所以我们应该根据实际情况来选取所创建的数组大小。

## (六) 索引冲突解决：

如果新的位置在之前就已经被占用了，我们就需要一些策略来存储这个新加入的值。

### 1. 开放寻址法：

基本原理为：当索引值对应的数组位置已被占用，我们可以将索引值加一或者平方增加的方式。

比如：我们通过哈希函数获得的值为 100，但是 Arr[100]已被占用，这时候新的索引值如: 101,102,103 (线性查找)来找空白的位置 101,104,109,116 (平方查找)的方式来获得新的索引值。

注：如果表由于许多索引冲突导致基本为空，那么线性增加的方式会导致字段的群聚，这样会导致更多查找、删除的时间消耗

### 2. 拉链法：

如图:

![](/assets/2016-04-22-hashing/5.png)

表的每个位置对应的是一个链表，这样如果发生索引冲突的时候我们就将它放到该位置的链表末尾。

优缺点：

* 不需要重新改变索引值
* 更简单地进行插入和删除
* 数组大小不再是限制
* 如果索引值冲突太多，那么内存花费成本很高

## (七) 重哈希：

### 何时需要重新哈希？

* 当数组接近填充满时
* 当使用平方查找时，数组已经使用一半以上并且插入会失败。

### 如何重新哈希分布？

1. 创建一个更大的数组 (一般是原来的两倍大)
2. 将原来的字段转移到新的数组中 (需要重新计算新的索引值)






